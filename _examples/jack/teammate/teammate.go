package teammate

import (
	"context"
	"encoding/json"
	"errors"
	"strconv"
	"strings"
	"time"

	"github.com/jackc/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrTeammateNotFound returned if the teammates is not found
var ErrTeammateNotFound = errors.New("teammates not found")

// Teammate result data for "jack"."teammates"
type Teammate struct {
	ID        string
	SlackID   string
	Username  string
	FirstName *string
	LastName  *string
	Email     *string
	Avatar    *string
	Timezone  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// New input builder for "jack"."teammates".
func New() *Input {
	return &Input{}
}

// Input data for "jack"."teammates"
type Input struct {
	id        *string
	slackID   *string
	username  *string
	firstName *string
	lastName  *string
	email     *string
	avatar    *string
	timezone  *string
	createdAt *time.Time
	updatedAt *time.Time
}

// ID sets the "id"
func (teammate *Input) ID(id string) *Input {
	teammate.id = &id
	return teammate
}

// SlackID sets the "slackID"
func (teammate *Input) SlackID(slackID string) *Input {
	teammate.slackID = &slackID
	return teammate
}

// Username sets the "username"
func (teammate *Input) Username(username string) *Input {
	teammate.username = &username
	return teammate
}

// FirstName sets the "firstName"
func (teammate *Input) FirstName(firstName string) *Input {
	teammate.firstName = &firstName
	return teammate
}

// LastName sets the "lastName"
func (teammate *Input) LastName(lastName string) *Input {
	teammate.lastName = &lastName
	return teammate
}

// Email sets the "email"
func (teammate *Input) Email(email string) *Input {
	teammate.email = &email
	return teammate
}

// Avatar sets the "avatar"
func (teammate *Input) Avatar(avatar string) *Input {
	teammate.avatar = &avatar
	return teammate
}

// Timezone sets the "timezone"
func (teammate *Input) Timezone(timezone string) *Input {
	teammate.timezone = &timezone
	return teammate
}

// CreatedAt sets the "createdAt"
func (teammate *Input) CreatedAt(createdAt time.Time) *Input {
	teammate.createdAt = &createdAt
	return teammate
}

// UpdatedAt sets the "updatedAt"
func (teammate *Input) UpdatedAt(updatedAt time.Time) *Input {
	teammate.updatedAt = &updatedAt
	return teammate
}

// MarshalJSON marshals the "teammate" into JSON
func (teammate *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(teammate)
}

// UnmarshalJSON unmarshals json to a "teammate"
func (teammate *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, teammate)
}

func (teammate *Input) String() string {
	return "teammate"
}

func columns(teammate *Input) map[string]interface{} {
	columns := make(map[string]interface{})

	if teammate.id != nil {
		columns["id"] = *teammate.id
	}

	if teammate.slackID != nil {
		columns["slack_id"] = *teammate.slackID
	}

	if teammate.username != nil {
		columns["username"] = *teammate.username
	}

	if teammate.firstName != nil {
		columns["first_name"] = *teammate.firstName
	}

	if teammate.lastName != nil {
		columns["last_name"] = *teammate.lastName
	}

	if teammate.email != nil {
		columns["email"] = *teammate.email
	}

	if teammate.avatar != nil {
		columns["avatar"] = *teammate.avatar
	}

	if teammate.timezone != nil {
		columns["timezone"] = *teammate.timezone
	}

	if teammate.createdAt != nil {
		columns["created_at"] = *teammate.createdAt
	}

	if teammate.updatedAt != nil {
		columns["updated_at"] = *teammate.updatedAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// DB is the common interface for database operations that can be used with
// types from schema `jack`.
//
// This should work with database/sql.DB and database/sql.Tx.
type DB interface {
	Exec(string, ...interface{}) (pgx.CommandTag, error)
	Query(string, ...interface{}) (*pgx.Rows, error)
	QueryRow(string, ...interface{}) *pgx.Row
}

// Model for Teammate
type Model struct {
	DB  DB
	Log func(string, ...interface{})
}

// Insert a "teammate" into the "jack"."teammates"
func (m *Model) Insert(ctx context.Context, teammateInput *Input) (*Teammate, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(teammateInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."teammates" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		return nil, e
	}

	return &teammate, nil
}

// Find a `Teammate` by it's primary key `id`
func (m *Model) Find(ctx context.Context, id string) (*Teammate, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
    FROM "jack"."teammates"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, &id)
	}

	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, &id)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeammateNotFound
		}
		return nil, e
	}

	return &teammate, nil
}

// FindBySlackID find a teammate by slack_id
func (m *Model) FindBySlackID(ctx context.Context, slackID string) (*Teammate, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
    FROM "jack"."teammates"
    WHERE "slack_id" = $1
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, slackID)
	}

	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, slackID)
	err := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrTeammateNotFound
		}
		return nil, err
	}

	return &teammate, nil
}

// FindOne find one teammate by a condition
func (m *Model) FindOne(ctx context.Context, where *WhereClause) (*Teammate, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
  FROM "jack"."teammates"
  WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeammateNotFound
		}
		return nil, e
	}

	return &teammate, nil
}

// FindWhere find many "teammate"'s by a given condition
func (m *Model) FindWhere(ctx context.Context, where *WhereClause) ([]*Teammate, error) {
	teammates := []*Teammate{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
  FROM "jack"."teammates"
  WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	rows, err := m.DB.Query(sqlstr, where.params...)
	if err != nil {
		return teammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var teammate Teammate
		if e := rows.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teammates, ErrTeammateNotFound
			}
			return teammates, err
		}
		teammates = append(teammates, &teammate)
	}
	if rows.Err() != nil {
		return teammates, rows.Err()
	}

	return teammates, nil
}

// FindAll find all "teammate"'s
func (m *Model) FindAll(ctx context.Context) ([]*Teammate, error) {
	teammates := []*Teammate{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"
  FROM "jack"."teammates"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr)
	}

	rows, err := m.DB.Query(sqlstr)
	if err != nil {
		return teammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var teammate Teammate
		if e := rows.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teammates, ErrTeammateNotFound
			}
			return teammates, err
		}
		teammates = append(teammates, &teammate)
	}
	if rows.Err() != nil {
		return teammates, rows.Err()
	}

	return teammates, nil
}

// Update a "teammate" in "jack"."teammates" by its "id"
func (m *Model) Update(ctx context.Context, id string, teammateInput *Input) (*Teammate, error) {
	fields := columns(teammateInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teammates" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run the query
	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, values...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeammateNotFound
		}
		return nil, e
	}

	return &teammate, nil
}

// UpdateBySlackID find a Teammate
func (m *Model) UpdateBySlackID(ctx context.Context, slackID string, teammateInput *Input) (*Teammate, error) {
	fields := columns(teammateInput)

	// don't update the keys
	delete(fields, "slack_id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teammates" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_id" = $1 ` +
		`RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, slackID)
	values = append(values, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run the query
	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, values...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeammateNotFound
		}
		return nil, e
	}

	return &teammate, nil
}

// UpdateWhere rows in "jack"."teammates" by a given condition
func (m *Model) UpdateWhere(ctx context.Context, where *WhereClause, teammateInput *Input) ([]*Teammate, error) {
	teammates := []*Teammate{}

	// prepare the slices
	_c, _i, _v := slice(columns(teammateInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "jack"."teammates" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run query
	rows, err := m.DB.Query(sqlstr, values...)
	if err != nil {
		return teammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var teammate Teammate
		if e := rows.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teammates, ErrTeammateNotFound
			}
			return teammates, err
		}
		teammates = append(teammates, &teammate)
	}
	if rows.Err() != nil {
		return teammates, rows.Err()
	}

	return teammates, nil
}

// Delete a "teammate" from the "jack"."teammates" table
func (m *Model) Delete(ctx context.Context, id string) error {
	// sql query
	sqlstr := `DELETE FROM "jack"."teammates" WHERE "id" = $1`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, id)
	}

	// run query
	if _, e := m.DB.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeammateNotFound
		}
		return e
	}

	return nil
}

// DeleteBySlackID deletes a "teammate"
func (m *Model) DeleteBySlackID(ctx context.Context, slackID string) error {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."teammates" WHERE "slack_id" = $1`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, slackID)
	}

	if _, e := m.DB.Exec(sqlstr, slackID); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeammateNotFound
		}
		return e
	}

	return nil
}

// DeleteWhere delete many "teammate"'s by the given condition
func (m *Model) DeleteWhere(ctx context.Context, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "jack"."teammates" WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	if _, e := m.DB.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "teammate" by its "id".
func (m *Model) Upsert(ctx context.Context, teammateInput *Input) (*Teammate, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(teammateInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teammates" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	// run query
	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil {
		return nil, e
	}

	return &teammate, nil
}

// UpsertBySlackID find a "Teammate"
func (m *Model) UpsertBySlackID(ctx context.Context, teammateInput *Input) (*Teammate, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(teammateInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teammates" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("slack_id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_id", "username", "first_name", "last_name", "email", "avatar", "timezone", "created_at", "updated_at"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	// run query
	var teammate Teammate
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&teammate.ID, &teammate.SlackID, &teammate.Username, &teammate.FirstName, &teammate.LastName, &teammate.Email, &teammate.Avatar, &teammate.Timezone, &teammate.CreatedAt, &teammate.UpdatedAt); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &teammate, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
