package jack

import (
	"github.com/jackc/pgx"
	report "github.com/matthewmueller/pogo/_examples/jack/report"
	standup "github.com/matthewmueller/pogo/_examples/jack/standup"
	standupteammate "github.com/matthewmueller/pogo/_examples/jack/standupteammate"
	team "github.com/matthewmueller/pogo/_examples/jack/team"
	teammate "github.com/matthewmueller/pogo/_examples/jack/teammate"
)

// GENERATED BY POGO. DO NOT EDIT.

// DB is the common interface for database operations that can be used with
// types from schema `jack`. Note that this is
// also copied into each of the table packages.
//
// This should work with database/sql.DB and database/sql.Tx.
type DB interface {
	Exec(string, ...interface{}) (pgx.CommandTag, error)
	Query(string, ...interface{}) (*pgx.Rows, error)
	QueryRow(string, ...interface{}) *pgx.Row
}

// opts is a private struct for holding our options.
type opts struct {
	Log func(log string, v ...interface{})
}

// Option function.
type Option func(*opts)

// New Client with all the models setup.
func New(db DB, options ...Option) *Client {
	var opts opts
	for _, o := range options {
		o(&opts)
	}

	return &Client{
		Report: &report.Model{
			DB:  db,
			Log: opts.Log,
		},
		Standup: &standup.Model{
			DB:  db,
			Log: opts.Log,
		},
		StandupTeammate: &standupteammate.Model{
			DB:  db,
			Log: opts.Log,
		},
		Teammate: &teammate.Model{
			DB:  db,
			Log: opts.Log,
		},
		Team: &team.Model{
			DB:  db,
			Log: opts.Log,
		},
	}
}

// WithLogger option.
func WithLogger(log func(msg string, v ...interface{})) Option {
	return func(opts *opts) {
		opts.Log = log
	}
}

// Client contains all our models
type Client struct {
	Report          *report.Model
	Standup         *standup.Model
	StandupTeammate *standupteammate.Model
	Teammate        *teammate.Model
	Team            *team.Model
}
