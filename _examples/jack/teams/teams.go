package teams

// GENERATED BY POGO. DO NOT EDIT.

import (
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
	jack "github.com/matthewmueller/pogo/_examples/jack"
)

// ErrTeamNotFound returned if the teams is not found
var ErrTeamNotFound = errors.New("teams not found")

// TeamInput model for "jack"."teams"
type TeamInput struct {
	id                   *string
	slackTeamID          *string
	slackTeamAccessToken *string
	slackBotAccessToken  *string
	slackBotID           *string
	teamName             *string
	scope                *[]string
	email                *string
	stripeID             *string
	active               *bool
	freeTeammates        *int
	costPerUser          *int
	trialEnds            *time.Time
	createdAt            *time.Time
	updatedAt            *time.Time
}

// Team model for "jack"."teams"
type Team struct {
	ID                   string
	SlackTeamID          string
	SlackTeamAccessToken string
	SlackBotAccessToken  string
	SlackBotID           string
	TeamName             string
	Scope                []string
	Email                *string
	StripeID             *string
	Active               bool
	FreeTeammates        int
	CostPerUser          int
	TrialEnds            time.Time
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
}

// New "jack"."teams" API
func New() *TeamInput {
	return &TeamInput{}
}

// ID sets the "id"
func (team *TeamInput) ID(id string) *TeamInput {
	team.id = &id
	return team
}

// SlackTeamID sets the "slackTeamID"
func (team *TeamInput) SlackTeamID(slackTeamID string) *TeamInput {
	team.slackTeamID = &slackTeamID
	return team
}

// SlackTeamAccessToken sets the "slackTeamAccessToken"
func (team *TeamInput) SlackTeamAccessToken(slackTeamAccessToken string) *TeamInput {
	team.slackTeamAccessToken = &slackTeamAccessToken
	return team
}

// SlackBotAccessToken sets the "slackBotAccessToken"
func (team *TeamInput) SlackBotAccessToken(slackBotAccessToken string) *TeamInput {
	team.slackBotAccessToken = &slackBotAccessToken
	return team
}

// SlackBotID sets the "slackBotID"
func (team *TeamInput) SlackBotID(slackBotID string) *TeamInput {
	team.slackBotID = &slackBotID
	return team
}

// TeamName sets the "teamName"
func (team *TeamInput) TeamName(teamName string) *TeamInput {
	team.teamName = &teamName
	return team
}

// Scope sets the "scope"
func (team *TeamInput) Scope(scope []string) *TeamInput {
	team.scope = &scope
	return team
}

// Email sets the "email"
func (team *TeamInput) Email(email string) *TeamInput {
	team.email = &email
	return team
}

// StripeID sets the "stripeID"
func (team *TeamInput) StripeID(stripeID string) *TeamInput {
	team.stripeID = &stripeID
	return team
}

// Active sets the "active"
func (team *TeamInput) Active(active bool) *TeamInput {
	team.active = &active
	return team
}

// FreeTeammates sets the "freeTeammates"
func (team *TeamInput) FreeTeammates(freeTeammates int) *TeamInput {
	team.freeTeammates = &freeTeammates
	return team
}

// CostPerUser sets the "costPerUser"
func (team *TeamInput) CostPerUser(costPerUser int) *TeamInput {
	team.costPerUser = &costPerUser
	return team
}

// TrialEnds sets the "trialEnds"
func (team *TeamInput) TrialEnds(trialEnds time.Time) *TeamInput {
	team.trialEnds = &trialEnds
	return team
}

// CreatedAt sets the "createdAt"
func (team *TeamInput) CreatedAt(createdAt time.Time) *TeamInput {
	team.createdAt = &createdAt
	return team
}

// UpdatedAt sets the "updatedAt"
func (team *TeamInput) UpdatedAt(updatedAt time.Time) *TeamInput {
	team.updatedAt = &updatedAt
	return team
}

// MarshalJSON marshals the "team" into JSON
func (team *TeamInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(team)
}

// UnmarshalJSON unmarshals json to a "team"
func (team *TeamInput) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, team)
}

func (team *TeamInput) String() string {
	return "team"
}

func getColumns(team *TeamInput) map[string]interface{} {
	columns := make(map[string]interface{})

	if team.id != nil {
		columns["id"] = *team.id
	}

	if team.slackTeamID != nil {
		columns["slack_team_id"] = *team.slackTeamID
	}

	if team.slackTeamAccessToken != nil {
		columns["slack_team_access_token"] = *team.slackTeamAccessToken
	}

	if team.slackBotAccessToken != nil {
		columns["slack_bot_access_token"] = *team.slackBotAccessToken
	}

	if team.slackBotID != nil {
		columns["slack_bot_id"] = *team.slackBotID
	}

	if team.teamName != nil {
		columns["team_name"] = *team.teamName
	}

	if team.scope != nil {
		columns["scope"] = *team.scope
	}

	if team.email != nil {
		columns["email"] = *team.email
	}

	if team.stripeID != nil {
		columns["stripe_id"] = *team.stripeID
	}

	if team.active != nil {
		columns["active"] = *team.active
	}

	if team.freeTeammates != nil {
		columns["free_teammates"] = *team.freeTeammates
	}

	if team.costPerUser != nil {
		columns["cost_per_user"] = *team.costPerUser
	}

	if team.trialEnds != nil {
		columns["trial_ends"] = *team.trialEnds
	}

	if team.createdAt != nil {
		columns["created_at"] = *team.createdAt
	}

	if team.updatedAt != nil {
		columns["updated_at"] = *team.updatedAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// Insert a "team" into the "jack"."teams"
func Insert(db jack.DB, teamInput *TeamInput) (*Team, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := jack.Slice(getColumns(teamInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."teams" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
  `
	jack.Log(sqlstr, _v...)

	var team Team
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		return nil, e
	}

	return &team, nil
}

// Find a `Team` by it's primary key `id`
func Find(db jack.DB, id string) (*Team, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
    FROM "jack"."teams"
    WHERE "id" = $1
  `
	jack.Log(sqlstr, &id)

	var team Team
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// FindBySlackBotAccessToken find a team by slack_bot_access_token
func FindBySlackBotAccessToken(db jack.DB, slackBotAccessToken string) (*Team, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
    FROM "jack"."teams"
    WHERE "slack_bot_access_token" = $1
  `
	jack.Log(sqlstr, slackBotAccessToken)

	var team Team
	row := db.QueryRow(sqlstr, slackBotAccessToken)
	err := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, err
	}

	return &team, nil
}

// FindBySlackTeamAccessToken find a team by slack_team_access_token
func FindBySlackTeamAccessToken(db jack.DB, slackTeamAccessToken string) (*Team, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
    FROM "jack"."teams"
    WHERE "slack_team_access_token" = $1
  `
	jack.Log(sqlstr, slackTeamAccessToken)

	var team Team
	row := db.QueryRow(sqlstr, slackTeamAccessToken)
	err := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, err
	}

	return &team, nil
}

// FindBySlackTeamID find a team by slack_team_id
func FindBySlackTeamID(db jack.DB, slackTeamID string) (*Team, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
    FROM "jack"."teams"
    WHERE "slack_team_id" = $1
  `
	jack.Log(sqlstr, slackTeamID)

	var team Team
	row := db.QueryRow(sqlstr, slackTeamID)
	err := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, err
	}

	return &team, nil
}

// FindOne find one team by a condition
func FindOne(db jack.DB, where *WhereClause) (*Team, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
  FROM "jack"."teams"
  WHERE ` + where.condition
	jack.Log(sqlstr, where.params...)

	var team Team
	row := db.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// FindWhere find many "team"'s by a given condition
func FindWhere(db jack.DB, where *WhereClause) ([]*Team, error) {
	teams := []*Team{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
  FROM "jack"."teams"
  WHERE ` + where.condition
	jack.Log(sqlstr, where.params...)

	rows, err := db.Query(sqlstr, where.params...)
	if err != nil {
		return teams, err
	}
	defer rows.Close()

	for rows.Next() {
		var team Team
		if e := rows.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teams, ErrTeamNotFound
			}
			return teams, err
		}
		teams = append(teams, &team)
	}
	if rows.Err() != nil {
		return teams, rows.Err()
	}

	return teams, nil
}

// FindAll find all "team"'s
func FindAll(db jack.DB) ([]*Team, error) {
	teams := []*Team{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
  FROM "jack"."teams"`
	jack.Log(sqlstr)

	rows, err := db.Query(sqlstr)
	if err != nil {
		return teams, err
	}
	defer rows.Close()

	for rows.Next() {
		var team Team
		if e := rows.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teams, ErrTeamNotFound
			}
			return teams, err
		}
		teams = append(teams, &team)
	}
	if rows.Err() != nil {
		return teams, rows.Err()
	}

	return teams, nil
}

// Update a "team" in "jack"."teams" by its "id"
func Update(db jack.DB, id string, teamInput *TeamInput) (*Team, error) {
	fields := getColumns(teamInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := jack.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teams" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)
	jack.Log(sqlstr, values...)

	// run the query
	var team Team
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// UpdateBySlackBotAccessToken find a Team
func UpdateBySlackBotAccessToken(db jack.DB, slackBotAccessToken string, teamInput *TeamInput) (*Team, error) {
	fields := getColumns(teamInput)

	// don't update the keys
	delete(fields, "slack_bot_access_token")

	// prepare the slices
	_c, _i, _v := jack.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teams" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_bot_access_token" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, slackBotAccessToken)
	values = append(values, _v...)
	jack.Log(sqlstr, values...)

	// run the query
	var team Team
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// UpdateBySlackTeamAccessToken find a Team
func UpdateBySlackTeamAccessToken(db jack.DB, slackTeamAccessToken string, teamInput *TeamInput) (*Team, error) {
	fields := getColumns(teamInput)

	// don't update the keys
	delete(fields, "slack_team_access_token")

	// prepare the slices
	_c, _i, _v := jack.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teams" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_team_access_token" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, slackTeamAccessToken)
	values = append(values, _v...)
	jack.Log(sqlstr, values...)

	// run the query
	var team Team
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// UpdateBySlackTeamID find a Team
func UpdateBySlackTeamID(db jack.DB, slackTeamID string, teamInput *TeamInput) (*Team, error) {
	fields := getColumns(teamInput)

	// don't update the keys
	delete(fields, "slack_team_id")

	// prepare the slices
	_c, _i, _v := jack.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."teams" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_team_id" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, slackTeamID)
	values = append(values, _v...)
	jack.Log(sqlstr, values...)

	// run the query
	var team Team
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrTeamNotFound
		}
		return nil, e
	}

	return &team, nil
}

// UpdateWhere rows in "jack"."teams" by a given condition
func UpdateWhere(db jack.DB, where *WhereClause, teamInput *TeamInput) ([]*Team, error) {
	teams := []*Team{}

	// prepare the slices
	_c, _i, _v := jack.Slice(getColumns(teamInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "jack"."teams" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)
	jack.Log(sqlstr, values...)

	// run query
	rows, err := db.Query(sqlstr, values...)
	if err != nil {
		return teams, err
	}
	defer rows.Close()

	for rows.Next() {
		var team Team
		if e := rows.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return teams, ErrTeamNotFound
			}
			return teams, err
		}
		teams = append(teams, &team)
	}
	if rows.Err() != nil {
		return teams, rows.Err()
	}

	return teams, nil
}

// Delete a "team" from the "jack"."teams" table
func Delete(db jack.DB, id string) error {
	// sql query
	sqlstr := `DELETE FROM "jack"."teams" WHERE "id" = $1`
	jack.Log(sqlstr, id)

	// run query
	if _, e := db.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeamNotFound
		}
		return e
	}

	return nil
}

// DeleteBySlackBotAccessToken deletes a "team"
func DeleteBySlackBotAccessToken(db jack.DB, slackBotAccessToken string) error {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."teams" WHERE "slack_bot_access_token" = $1`
	jack.Log(sqlstr, slackBotAccessToken)

	if _, e := db.Exec(sqlstr, slackBotAccessToken); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeamNotFound
		}
		return e
	}

	return nil
}

// DeleteBySlackTeamAccessToken deletes a "team"
func DeleteBySlackTeamAccessToken(db jack.DB, slackTeamAccessToken string) error {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."teams" WHERE "slack_team_access_token" = $1`
	jack.Log(sqlstr, slackTeamAccessToken)

	if _, e := db.Exec(sqlstr, slackTeamAccessToken); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeamNotFound
		}
		return e
	}

	return nil
}

// DeleteBySlackTeamID deletes a "team"
func DeleteBySlackTeamID(db jack.DB, slackTeamID string) error {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."teams" WHERE "slack_team_id" = $1`
	jack.Log(sqlstr, slackTeamID)

	if _, e := db.Exec(sqlstr, slackTeamID); e != nil {
		if e == pgx.ErrNoRows {
			return ErrTeamNotFound
		}
		return e
	}

	return nil
}

// DeleteWhere delete many "team"'s by the given condition
func DeleteWhere(db jack.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "jack"."teams" WHERE ` + where.condition
	jack.Log(sqlstr, where.params...)

	if _, e := db.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "team" by its "id".
func Upsert(db jack.DB, teamInput *TeamInput) (*Team, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := jack.Slice(getColumns(teamInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teams" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`
	jack.Log(sqlstr, _v...)

	// run query
	var team Team
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil {
		return nil, e
	}

	return &team, nil
}

// UpsertBySlackBotAccessToken find a "Team"
func UpsertBySlackBotAccessToken(db jack.DB, teamInput *TeamInput) (*Team, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := jack.Slice(getColumns(teamInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teams" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT (slack_bot_access_token) ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`
	jack.Log(sqlstr, _v...)

	// run query
	var team Team
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &team, nil
}

// UpsertBySlackTeamAccessToken find a "Team"
func UpsertBySlackTeamAccessToken(db jack.DB, teamInput *TeamInput) (*Team, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := jack.Slice(getColumns(teamInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teams" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT (slack_team_access_token) ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`
	jack.Log(sqlstr, _v...)

	// run query
	var team Team
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &team, nil
}

// UpsertBySlackTeamID find a "Team"
func UpsertBySlackTeamID(db jack.DB, teamInput *TeamInput) (*Team, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := jack.Slice(getColumns(teamInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."teams" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT (slack_team_id) ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`
	jack.Log(sqlstr, _v...)

	// run query
	var team Team
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &team, nil
}
