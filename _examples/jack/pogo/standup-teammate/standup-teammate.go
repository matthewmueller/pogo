package standupteammate

import (
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/pogo/test/jack/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrStandupTeammateNotFound returned if the standups_teammates is not found
var ErrStandupTeammateNotFound = errors.New("standupTeammate not found")

// StandupTeammate result data for "jack"."standups_teammates"
type StandupTeammate struct {
	ID         int    `json:"id,omitempty"`
	StandupID  int    `json:"standup_id,omitempty"`
	TeammateID int    `json:"teammate_id,omitempty"`
	Time       string `json:"time,omitempty"`
	Owner      bool   `json:"owner,omitempty"`
}

// New "jack"."standups_teammates" input
func New() *Input {
	return &Input{}
}

// Input data for "jack"."standups_teammates"
type Input struct {
	id         *int
	standupID  *int
	teammateID *int
	time       *string
	owner      *bool
}

// ID sets the "id"
func (st *Input) ID(id int) *Input {
	st.id = &id
	return st
}

// StandupID sets the "standup_id"
func (st *Input) StandupID(standupID int) *Input {
	st.standupID = &standupID
	return st
}

// TeammateID sets the "teammate_id"
func (st *Input) TeammateID(teammateID int) *Input {
	st.teammateID = &teammateID
	return st
}

// Time sets the "time"
func (st *Input) Time(time string) *Input {
	st.time = &time
	return st
}

// Owner sets the "owner"
func (st *Input) Owner(owner bool) *Input {
	st.owner = &owner
	return st
}

// MarshalJSON marshals the "standupTeammate" into JSON
func (st *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(st)
}

// UnmarshalJSON unmarshals json to a "standupTeammate"
func (st *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, st)
}

func (st *Input) String() string {
	return "standups_teammates"
}

func (st *Input) columns() map[string]interface{} {
	columns := make(map[string]interface{})

	if st.id != nil {
		columns["id"] = *st.id
	}

	if st.standupID != nil {
		columns["standup_id"] = *st.standupID
	}

	if st.teammateID != nil {
		columns["teammate_id"] = *st.teammateID
	}

	if st.time != nil {
		columns["time"] = *st.time
	}

	if st.owner != nil {
		columns["owner"] = *st.owner
	}

	return columns
}

// NewFilter creates a new filter
func NewFilter() *Filter {
	return &Filter{}
}

// Filter filters for "jack"."standups_teammates"
type Filter struct {
	formats []string
	values  []interface{}
}

var _ pogo.Condition = (*Filter)(nil)

// Clause fn
func (f *Filter) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "WHERE",
		Format: strings.Join(f.formats, " AND "),
		Params: f.values,
	}
}

// And filter
// func (f *Filter) And(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " AND "))
//   return f
// }

// Or filter
// func (f *Filter) Or(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " OR "))
//   return f
// }

// ID id equals
func (f *Filter) ID(v int) *Filter {
	f.formats = append(f.formats, `id = %s`)
	f.values = append(f.values, v)
	return f
}

// IDNot id doesn't equal
func (f *Filter) IDNot(v int) *Filter {
	f.formats = append(f.formats, `id != %s`)
	f.values = append(f.values, v)
	return f
}

// IDLt id is less than
func (f *Filter) IDLt(v int) *Filter {
	f.formats = append(f.formats, `id < %s`)
	f.values = append(f.values, v)
	return f
}

// IDLte id is less than or equal
func (f *Filter) IDLte(v int) *Filter {
	f.formats = append(f.formats, `id <= %s`)
	f.values = append(f.values, v)
	return f
}

// IDGt id is greater than
func (f *Filter) IDGt(v int) *Filter {
	f.formats = append(f.formats, `id > %s`)
	f.values = append(f.values, v)
	return f
}

// IDGte id is greater than or equal
func (f *Filter) IDGte(v int) *Filter {
	f.formats = append(f.formats, `id >= %s`)
	f.values = append(f.values, v)
	return f
}

// IDIn id is in
func (f *Filter) IDIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`id IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// IDNotIn id is not in
func (f *Filter) IDNotIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`id NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// StandupID standup_id equals
func (f *Filter) StandupID(v int) *Filter {
	f.formats = append(f.formats, `standup_id = %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDNot standup_id doesn't equal
func (f *Filter) StandupIDNot(v int) *Filter {
	f.formats = append(f.formats, `standup_id != %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDLt standup_id is less than
func (f *Filter) StandupIDLt(v int) *Filter {
	f.formats = append(f.formats, `standup_id < %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDLte standup_id is less than or equal
func (f *Filter) StandupIDLte(v int) *Filter {
	f.formats = append(f.formats, `standup_id <= %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDGt standup_id is greater than
func (f *Filter) StandupIDGt(v int) *Filter {
	f.formats = append(f.formats, `standup_id > %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDGte standup_id is greater than or equal
func (f *Filter) StandupIDGte(v int) *Filter {
	f.formats = append(f.formats, `standup_id >= %s`)
	f.values = append(f.values, v)
	return f
}

// StandupIDIn standup_id is in
func (f *Filter) StandupIDIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`standup_id IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// StandupIDNotIn standup_id is not in
func (f *Filter) StandupIDNotIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`standup_id NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// TeammateID teammate_id equals
func (f *Filter) TeammateID(v int) *Filter {
	f.formats = append(f.formats, `teammate_id = %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDNot teammate_id doesn't equal
func (f *Filter) TeammateIDNot(v int) *Filter {
	f.formats = append(f.formats, `teammate_id != %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDLt teammate_id is less than
func (f *Filter) TeammateIDLt(v int) *Filter {
	f.formats = append(f.formats, `teammate_id < %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDLte teammate_id is less than or equal
func (f *Filter) TeammateIDLte(v int) *Filter {
	f.formats = append(f.formats, `teammate_id <= %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDGt teammate_id is greater than
func (f *Filter) TeammateIDGt(v int) *Filter {
	f.formats = append(f.formats, `teammate_id > %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDGte teammate_id is greater than or equal
func (f *Filter) TeammateIDGte(v int) *Filter {
	f.formats = append(f.formats, `teammate_id >= %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDIn teammate_id is in
func (f *Filter) TeammateIDIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`teammate_id IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// TeammateIDNotIn teammate_id is not in
func (f *Filter) TeammateIDNotIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`teammate_id NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Time time equals
func (f *Filter) Time(v string) *Filter {
	f.formats = append(f.formats, `time = %s`)
	f.values = append(f.values, v)
	return f
}

// TimeNot time doesn't equal
func (f *Filter) TimeNot(v string) *Filter {
	f.formats = append(f.formats, `time != %s`)
	f.values = append(f.values, v)
	return f
}

// TimeContains time contains
func (f *Filter) TimeContains(v string) *Filter {
	f.formats = append(f.formats, `time LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// TimeNotContains time doesn't contain
func (f *Filter) TimeNotContains(v string) *Filter {
	f.formats = append(f.formats, `time NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// TimeStartsWith time starts with
func (f *Filter) TimeStartsWith(v string) *Filter {
	f.formats = append(f.formats, `time LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// TimeNotStartsWith time doesn't start with
func (f *Filter) TimeNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `time NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// TimeEndsWith time ends with
func (f *Filter) TimeEndsWith(v string) *Filter {
	f.formats = append(f.formats, `time LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// TimeNotEndsWith time doesn't end with
func (f *Filter) TimeNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `time NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// TimeLt time is less than
func (f *Filter) TimeLt(v string) *Filter {
	f.formats = append(f.formats, `time < %s`)
	f.values = append(f.values, v)
	return f
}

// TimeLte time is less than or equal
func (f *Filter) TimeLte(v string) *Filter {
	f.formats = append(f.formats, `time <= %s`)
	f.values = append(f.values, v)
	return f
}

// TimeGt time is greater than
func (f *Filter) TimeGt(v string) *Filter {
	f.formats = append(f.formats, `time > %s`)
	f.values = append(f.values, v)
	return f
}

// TimeGte time is greater than or equal
func (f *Filter) TimeGte(v string) *Filter {
	f.formats = append(f.formats, `time >= %s`)
	f.values = append(f.values, v)
	return f
}

// TimeIn time is in
func (f *Filter) TimeIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`time IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// TimeNotIn time is not in
func (f *Filter) TimeNotIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`time NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Owner owner is equal to
func (f *Filter) Owner(v bool) *Filter {
	f.formats = append(f.formats, `owner = %s`)
	f.values = append(f.values, v)
	return f
}

// OwnerNot owner is not equal to
func (f *Filter) OwnerNot(v bool) *Filter {
	f.formats = append(f.formats, `owner != %s`)
	f.values = append(f.values, v)
	return f
}

// OrderBy specificies the ORDERBy BY <order>
type OrderBy string

const (
	// Asc sorts by ascending order
	ASC OrderBy = "ASC"

	// Desc sorts by descending order
	DESC OrderBy = "DESC"
)

// NewOrder fn
func NewOrder() *Order {
	return &Order{}
}

var _ pogo.Condition = (*Order)(nil)

// Order orders the given fields
type Order struct {
	formats []string
}

// Clause fn
func (o *Order) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "ORDER BY",
		Format: strings.Join(o.formats, ", "),
	}
}

// ID sorts `id` by an expression
func (o *Order) ID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"id" %s`, order))
	return o
}

// StandupID sorts `standup_id` by an expression
func (o *Order) StandupID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"standup_id" %s`, order))
	return o
}

// TeammateID sorts `teammate_id` by an expression
func (o *Order) TeammateID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"teammate_id" %s`, order))
	return o
}

// Time sorts `time` by an expression
func (o *Order) Time(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"time" %s`, order))
	return o
}

// Owner sorts `owner` by an expression
func (o *Order) Owner(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"owner" %s`, order))
	return o
}

// Insert a "standups_teammates" into the "jack"."standups_teammates"
func Insert(db pogo.DB, standupTeammate *Input) (*StandupTeammate, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(standupTeammate.columns(), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."standups_teammates" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "standup_id", "teammate_id", "time", "owner"
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		return nil, e
	}

	return &_standupTeammate, nil
}

// Find a `StandupTeammate` by some conditions.
func Find(db pogo.DB, conds ...pogo.Condition) (*StandupTeammate, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "standup_id", "teammate_id", "time", "owner" ` +
		`FROM "jack"."standups_teammates" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// FindByID a `StandupTeammate` by some conditions.
func FindByID(db pogo.DB, id int) (*StandupTeammate, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "standup_id", "teammate_id", "time", "owner"
    FROM "jack"."standups_teammates"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, &id)
	}

	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// FindByStandupIDAndTeammateID find a standupTeammate by standup_id and teammate_id
func FindByStandupIDAndTeammateID(db pogo.DB, standupID int, teammateID int) (*StandupTeammate, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "standup_id", "teammate_id", "time", "owner"
    FROM "jack"."standups_teammates"
    WHERE "standup_id" = $1 AND "teammate_id" = $2
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, standupID, teammateID)
	}

	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, standupID, teammateID)
	err := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, err
	}

	return &_standupTeammate, nil
}

// FindMany finds many "jack"."standups_teammates" by a condition
func FindMany(db pogo.DB, conds ...pogo.Condition) ([]*StandupTeammate, error) {
	var standupsTeammates []*StandupTeammate

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return standupsTeammates, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "standup_id", "teammate_id", "time", "owner" ` +
		`FROM "jack"."standups_teammates" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return standupsTeammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var _standupTeammate StandupTeammate
		if e := rows.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
			if e == pgx.ErrNoRows {
				return standupsTeammates, ErrStandupTeammateNotFound
			}
			return standupsTeammates, err
		}
		standupsTeammates = append(standupsTeammates, &_standupTeammate)
	}
	if rows.Err() != nil {
		return standupsTeammates, rows.Err()
	}

	return standupsTeammates, nil
}

// Update "standups_teammates" rows in "jack"."standups_teammates" by a condition, returning 1 result
func Update(db pogo.DB, standupTeammate *Input, conds ...pogo.Condition) (*StandupTeammate, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := standupTeammate.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("standupteammate.Update: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."standups_teammates" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run the query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// UpdateMany updates "standups_teammates" rows in "jack"."standups_teammates" by conditions, returning all results
func UpdateMany(db pogo.DB, standupTeammate *Input, conds ...pogo.Condition) ([]*StandupTeammate, error) {
	var standupsTeammates []*StandupTeammate

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := standupTeammate.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("standupteammate.UpdateMany: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."standups_teammates" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return standupsTeammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var _standupTeammate StandupTeammate
		if e := rows.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
			if e == pgx.ErrNoRows {
				return standupsTeammates, ErrStandupTeammateNotFound
			}
			return standupsTeammates, err
		}
		standupsTeammates = append(standupsTeammates, &_standupTeammate)
	}
	if rows.Err() != nil {
		return standupsTeammates, rows.Err()
	}

	return standupsTeammates, nil
}

// UpdateByID a "standupTeammate" in "jack"."standups_teammates" by its "id"
func UpdateByID(db pogo.DB, id int, standupTeammate *Input) (*StandupTeammate, error) {
	fields := standupTeammate.columns()

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("standupteammate.UpdateByID: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."standups_teammates" ` +
		`SET ` + strings.Join(_u, ", ") + ` ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// setup query
	values := append([]interface{}{&id}, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// UpdateByStandupIDAndTeammateID find a StandupTeammate
func UpdateByStandupIDAndTeammateID(db pogo.DB, standupID int, teammateID int, standupTeammate *Input) (*StandupTeammate, error) {
	// add values to input, overriding existing keys if present in the input
	standupTeammate = standupTeammate.StandupID(standupID).TeammateID(teammateID)

	// get the columns
	fields := standupTeammate.columns()

	// don't update the keys
	delete(fields, "standup_id")
	delete(fields, "teammate_id")

	// prepare the slices
	_c, _i, _v := slice(fields, 2)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("standupteammate.UpdateByStandupIDAndTeammateID: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."standups_teammates" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "standup_id" = $1 AND "teammate_id" = $2 ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// setup the query
	values := []interface{}{}
	values = append(values, standupID)
	values = append(values, teammateID)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// Delete `StandupTeammate`s by some conditions. Returns the first result.
func Delete(db pogo.DB, conds ...pogo.Condition) (*StandupTeammate, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."standups_teammates" ` +
		_s + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// DeleteMany `StandupTeammate`s by some conditions, returning all results.
func DeleteMany(db pogo.DB, conds ...pogo.Condition) ([]*StandupTeammate, error) {
	var standupsTeammates []*StandupTeammate

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return standupsTeammates, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."standups_teammates" ` +
		_s + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return standupsTeammates, err
	}
	defer rows.Close()

	for rows.Next() {
		var _standupTeammate StandupTeammate
		if e := rows.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
			if e == pgx.ErrNoRows {
				return standupsTeammates, ErrStandupTeammateNotFound
			}
			return standupsTeammates, err
		}
		standupsTeammates = append(standupsTeammates, &_standupTeammate)
	}
	if rows.Err() != nil {
		return standupsTeammates, rows.Err()
	}

	return standupsTeammates, nil
}

// DeleteByID a "standupTeammate" from the "jack"."standups_teammates" table
func DeleteByID(db pogo.DB, id int) (*StandupTeammate, error) {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."standups_teammates" ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	// run the query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// DeleteByStandupIDAndTeammateID deletes a "standupTeammate"
func DeleteByStandupIDAndTeammateID(db pogo.DB, standupID int, teammateID int) (*StandupTeammate, error) {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."standups_teammates" ` +
		`WHERE "standup_id" = $1 AND "teammate_id" = $2 ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, standupID, teammateID)
	}

	// run the query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, standupID, teammateID)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupTeammateNotFound
		}
		return nil, e
	}

	return &_standupTeammate, nil
}

// UpsertByID inserts a `standups_teammates`, updating the row if `ID` already exists.
func UpsertByID(db pogo.DB, id int, standupTeammate *Input) (*StandupTeammate, error) {
	// add values to input, overriding existing keys if present in the input
	standupTeammate = standupTeammate.ID(id)

	fields := standupTeammate.columns()

	// prepare the slices
	_c, _i, _v := slice(fields, 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = EXCLUDED."+c)
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("standupteammate.UpsertByID: no input provided")
	}

	// sql query
	sqlstr := `INSERT INTO "jack"."standups_teammates" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT (id) ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &_standupTeammate, nil
}

// UpsertByStandupIDAndTeammateID inserts a `standups_teammates`, updating the row if `"standup_id", "teammate_id"` already exists.
func UpsertByStandupIDAndTeammateID(db pogo.DB, standupID int, teammateID int, standupTeammate *Input) (*StandupTeammate, error) {
	// add values to input, overriding existing keys if present in the input
	standupTeammate = standupTeammate.StandupID(standupID).TeammateID(teammateID)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(standupTeammate.columns(), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."standups_teammates" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("standup_id", "teammate_id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "owner"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _standupTeammate StandupTeammate
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_standupTeammate.ID, &_standupTeammate.StandupID, &_standupTeammate.TeammateID, &_standupTeammate.Time, &_standupTeammate.Owner); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &_standupTeammate, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
