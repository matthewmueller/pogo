package cron

import (
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/pogo/test/jack/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrCronNotFound returned if the crons is not found
var ErrCronNotFound = errors.New("cron not found")

// Cron result data for "jack"."crons"
type Cron struct {
	ID        int     `json:"id,omitempty"`
	Job       string  `json:"job,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
}

// New "jack"."crons" input
func New() *Input {
	return &Input{}
}

// Input data for "jack"."crons"
type Input struct {
	id                *int
	job               *string
	frequency         *string
	nullableFrequency **string
}

// ID sets the "id"
func (c *Input) ID(id int) *Input {
	c.id = &id
	return c
}

// Job sets the "job"
func (c *Input) Job(job string) *Input {
	c.job = &job
	return c
}

// Frequency sets the "frequency"
func (c *Input) Frequency(frequency string) *Input {
	c.frequency = &frequency
	return c
}

// NullableFrequency will set the `frequency` to NULL if `frequency` is null
func (c *Input) NullableFrequency(frequency *string) *Input {
	c.nullableFrequency = &frequency
	return c
}

// MarshalJSON marshals the "cron" into JSON
func (c *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(c)
}

// UnmarshalJSON unmarshals json to a "cron"
func (c *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, c)
}

func (c *Input) String() string {
	return "crons"
}

func (c *Input) columns() map[string]interface{} {
	columns := make(map[string]interface{})

	if c.id != nil {
		columns["id"] = *c.id
	}

	if c.job != nil {
		columns["job"] = *c.job
	}

	if c.nullableFrequency != nil {
		columns["frequency"] = *c.nullableFrequency
	}
	if c.frequency != nil {
		columns["frequency"] = *c.frequency
	}

	return columns
}

// NewFilter creates a new filter
func NewFilter() *Filter {
	return &Filter{}
}

// Filter filters for "jack"."crons"
type Filter struct {
	formats []string
	values  []interface{}
}

var _ pogo.Condition = (*Filter)(nil)

// Clause fn
func (f *Filter) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "WHERE",
		Format: strings.Join(f.formats, " AND "),
		Params: f.values,
	}
}

// And filter
// func (f *Filter) And(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " AND "))
//   return f
// }

// Or filter
// func (f *Filter) Or(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " OR "))
//   return f
// }

// ID id equals
func (f *Filter) ID(v int) *Filter {
	f.formats = append(f.formats, `id = %s`)
	f.values = append(f.values, v)
	return f
}

// IDNot id doesn't equal
func (f *Filter) IDNot(v int) *Filter {
	f.formats = append(f.formats, `id != %s`)
	f.values = append(f.values, v)
	return f
}

// IDLt id is less than
func (f *Filter) IDLt(v int) *Filter {
	f.formats = append(f.formats, `id < %s`)
	f.values = append(f.values, v)
	return f
}

// IDLte id is less than or equal
func (f *Filter) IDLte(v int) *Filter {
	f.formats = append(f.formats, `id <= %s`)
	f.values = append(f.values, v)
	return f
}

// IDGt id is greater than
func (f *Filter) IDGt(v int) *Filter {
	f.formats = append(f.formats, `id > %s`)
	f.values = append(f.values, v)
	return f
}

// IDGte id is greater than or equal
func (f *Filter) IDGte(v int) *Filter {
	f.formats = append(f.formats, `id >= %s`)
	f.values = append(f.values, v)
	return f
}

// IDIn id is in
func (f *Filter) IDIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`id IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// IDNotIn id is not in
func (f *Filter) IDNotIn(v ...int) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`id NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Job job equals
func (f *Filter) Job(v string) *Filter {
	f.formats = append(f.formats, `job = %s`)
	f.values = append(f.values, v)
	return f
}

// JobNot job doesn't equal
func (f *Filter) JobNot(v string) *Filter {
	f.formats = append(f.formats, `job != %s`)
	f.values = append(f.values, v)
	return f
}

// JobContains job contains
func (f *Filter) JobContains(v string) *Filter {
	f.formats = append(f.formats, `job LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// JobNotContains job doesn't contain
func (f *Filter) JobNotContains(v string) *Filter {
	f.formats = append(f.formats, `job NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// JobStartsWith job starts with
func (f *Filter) JobStartsWith(v string) *Filter {
	f.formats = append(f.formats, `job LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// JobNotStartsWith job doesn't start with
func (f *Filter) JobNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `job NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// JobEndsWith job ends with
func (f *Filter) JobEndsWith(v string) *Filter {
	f.formats = append(f.formats, `job LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// JobNotEndsWith job doesn't end with
func (f *Filter) JobNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `job NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// JobLt job is less than
func (f *Filter) JobLt(v string) *Filter {
	f.formats = append(f.formats, `job < %s`)
	f.values = append(f.values, v)
	return f
}

// JobLte job is less than or equal
func (f *Filter) JobLte(v string) *Filter {
	f.formats = append(f.formats, `job <= %s`)
	f.values = append(f.values, v)
	return f
}

// JobGt job is greater than
func (f *Filter) JobGt(v string) *Filter {
	f.formats = append(f.formats, `job > %s`)
	f.values = append(f.values, v)
	return f
}

// JobGte job is greater than or equal
func (f *Filter) JobGte(v string) *Filter {
	f.formats = append(f.formats, `job >= %s`)
	f.values = append(f.values, v)
	return f
}

// JobIn job is in
func (f *Filter) JobIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`job IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// JobNotIn job is not in
func (f *Filter) JobNotIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`job NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Frequency frequency equals
func (f *Filter) Frequency(v string) *Filter {
	f.formats = append(f.formats, `frequency = %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyNot frequency doesn't equal
func (f *Filter) FrequencyNot(v string) *Filter {
	f.formats = append(f.formats, `frequency != %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyContains frequency contains
func (f *Filter) FrequencyContains(v string) *Filter {
	f.formats = append(f.formats, `frequency LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// FrequencyNotContains frequency doesn't contain
func (f *Filter) FrequencyNotContains(v string) *Filter {
	f.formats = append(f.formats, `frequency NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// FrequencyStartsWith frequency starts with
func (f *Filter) FrequencyStartsWith(v string) *Filter {
	f.formats = append(f.formats, `frequency LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// FrequencyNotStartsWith frequency doesn't start with
func (f *Filter) FrequencyNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `frequency NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// FrequencyEndsWith frequency ends with
func (f *Filter) FrequencyEndsWith(v string) *Filter {
	f.formats = append(f.formats, `frequency LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyNotEndsWith frequency doesn't end with
func (f *Filter) FrequencyNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `frequency NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyLt frequency is less than
func (f *Filter) FrequencyLt(v string) *Filter {
	f.formats = append(f.formats, `frequency < %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyLte frequency is less than or equal
func (f *Filter) FrequencyLte(v string) *Filter {
	f.formats = append(f.formats, `frequency <= %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyGt frequency is greater than
func (f *Filter) FrequencyGt(v string) *Filter {
	f.formats = append(f.formats, `frequency > %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyGte frequency is greater than or equal
func (f *Filter) FrequencyGte(v string) *Filter {
	f.formats = append(f.formats, `frequency >= %s`)
	f.values = append(f.values, v)
	return f
}

// FrequencyIn frequency is in
func (f *Filter) FrequencyIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`frequency IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// FrequencyNotIn frequency is not in
func (f *Filter) FrequencyNotIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`frequency NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// OrderBy specificies the ORDERBy BY <order>
type OrderBy string

const (
	// Asc sorts by ascending order
	ASC OrderBy = "ASC"

	// Desc sorts by descending order
	DESC OrderBy = "DESC"
)

// NewOrder fn
func NewOrder() *Order {
	return &Order{}
}

var _ pogo.Condition = (*Order)(nil)

// Order orders the given fields
type Order struct {
	formats []string
}

// Clause fn
func (o *Order) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "ORDER BY",
		Format: strings.Join(o.formats, ", "),
	}
}

// ID sorts `id` by an expression
func (o *Order) ID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"id" %s`, order))
	return o
}

// Job sorts `job` by an expression
func (o *Order) Job(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"job" %s`, order))
	return o
}

// Frequency sorts `frequency` by an expression
func (o *Order) Frequency(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"frequency" %s`, order))
	return o
}

// Insert a "crons" into the "jack"."crons"
func Insert(db pogo.DB, cron *Input) (*Cron, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(cron.columns(), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."crons" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "job", "frequency"
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		return nil, e
	}

	return &_cron, nil
}

// Find a `Cron` by some conditions.
func Find(db pogo.DB, conds ...pogo.Condition) (*Cron, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "job", "frequency" ` +
		`FROM "jack"."crons" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// FindByID a `Cron` by some conditions.
func FindByID(db pogo.DB, id int) (*Cron, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "job", "frequency"
    FROM "jack"."crons"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, &id)
	}

	var _cron Cron
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// FindByJob find a cron by job
func FindByJob(db pogo.DB, job string) (*Cron, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "job", "frequency"
    FROM "jack"."crons"
    WHERE "job" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, job)
	}

	var _cron Cron
	row := db.QueryRow(sqlstr, job)
	err := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, err
	}

	return &_cron, nil
}

// FindMany finds many "jack"."crons" by a condition
func FindMany(db pogo.DB, conds ...pogo.Condition) ([]*Cron, error) {
	var crons []*Cron

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return crons, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "job", "frequency" ` +
		`FROM "jack"."crons" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return crons, err
	}
	defer rows.Close()

	for rows.Next() {
		var _cron Cron
		if e := rows.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
			if e == pgx.ErrNoRows {
				return crons, ErrCronNotFound
			}
			return crons, err
		}
		crons = append(crons, &_cron)
	}
	if rows.Err() != nil {
		return crons, rows.Err()
	}

	return crons, nil
}

// Update "crons" rows in "jack"."crons" by a condition, returning 1 result
func Update(db pogo.DB, cron *Input, conds ...pogo.Condition) (*Cron, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := cron.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("cron.Update: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."crons" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run the query
	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// UpdateMany updates "crons" rows in "jack"."crons" by conditions, returning all results
func UpdateMany(db pogo.DB, cron *Input, conds ...pogo.Condition) ([]*Cron, error) {
	var crons []*Cron

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := cron.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("cron.UpdateMany: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."crons" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return crons, err
	}
	defer rows.Close()

	for rows.Next() {
		var _cron Cron
		if e := rows.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
			if e == pgx.ErrNoRows {
				return crons, ErrCronNotFound
			}
			return crons, err
		}
		crons = append(crons, &_cron)
	}
	if rows.Err() != nil {
		return crons, rows.Err()
	}

	return crons, nil
}

// UpdateByID a "cron" in "jack"."crons" by its "id"
func UpdateByID(db pogo.DB, id int, cron *Input) (*Cron, error) {
	fields := cron.columns()

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("cron.UpdateByID: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."crons" ` +
		`SET ` + strings.Join(_u, ", ") + ` ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "job", "frequency"`

	// setup query
	values := append([]interface{}{&id}, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _cron Cron
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// UpdateByJob find a Cron
func UpdateByJob(db pogo.DB, job string, cron *Input) (*Cron, error) {
	// add values to input, overriding existing keys if present in the input
	cron = cron.Job(job)

	// get the columns
	fields := cron.columns()

	// don't update the keys
	delete(fields, "job")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("cron.UpdateByJob: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "jack"."crons" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "job" = $1 ` +
		`RETURNING "id", "job", "frequency"`

	// setup the query
	values := []interface{}{}
	values = append(values, job)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _cron Cron
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// Delete `Cron`s by some conditions. Returns the first result.
func Delete(db pogo.DB, conds ...pogo.Condition) (*Cron, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."crons" ` +
		_s + ` ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// DeleteMany `Cron`s by some conditions, returning all results.
func DeleteMany(db pogo.DB, conds ...pogo.Condition) ([]*Cron, error) {
	var crons []*Cron

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return crons, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."crons" ` +
		_s + ` ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return crons, err
	}
	defer rows.Close()

	for rows.Next() {
		var _cron Cron
		if e := rows.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
			if e == pgx.ErrNoRows {
				return crons, ErrCronNotFound
			}
			return crons, err
		}
		crons = append(crons, &_cron)
	}
	if rows.Err() != nil {
		return crons, rows.Err()
	}

	return crons, nil
}

// DeleteByID a "cron" from the "jack"."crons" table
func DeleteByID(db pogo.DB, id int) (*Cron, error) {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."crons" ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	// run the query
	var _cron Cron
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// DeleteByJob deletes a "cron"
func DeleteByJob(db pogo.DB, job string) (*Cron, error) {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."crons" ` +
		`WHERE "job" = $1 ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, job)
	}

	// run the query
	var _cron Cron
	row := db.QueryRow(sqlstr, job)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrCronNotFound
		}
		return nil, e
	}

	return &_cron, nil
}

// UpsertByID inserts a `crons`, updating the row if `ID` already exists.
func UpsertByID(db pogo.DB, id int, cron *Input) (*Cron, error) {
	// add values to input, overriding existing keys if present in the input
	cron = cron.ID(id)

	fields := cron.columns()

	// prepare the slices
	_c, _i, _v := slice(fields, 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = EXCLUDED."+c)
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("cron.UpsertByID: no input provided")
	}

	// sql query
	sqlstr := `INSERT INTO "jack"."crons" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT (id) ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &_cron, nil
}

// UpsertByJob inserts a `crons`, updating the row if `"job"` already exists.
func UpsertByJob(db pogo.DB, job string, cron *Input) (*Cron, error) {
	// add values to input, overriding existing keys if present in the input
	cron = cron.Job(job)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(cron.columns(), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."crons" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("job") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "job", "frequency"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _cron Cron
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_cron.ID, &_cron.Job, &_cron.Frequency); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &_cron, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
