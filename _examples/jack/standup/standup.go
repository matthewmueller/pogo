package standup

import (
	"context"
	"encoding/json"
	"errors"
	"strconv"
	"strings"
	"time"

	"github.com/jackc/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrStandupNotFound returned if the standups is not found
var ErrStandupNotFound = errors.New("standups not found")

// Standup result data for "jack"."standups"
type Standup struct {
	ID             string
	Name           string
	SlackChannelID string
	Time           string
	Timezone       string
	Questions      json.RawMessage
	TeamID         string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
}

// New input builder for "jack"."standups".
func New() *Input {
	return &Input{}
}

// Input data for "jack"."standups"
type Input struct {
	id             *string
	name           *string
	slackChannelID *string
	time           *string
	timezone       *string
	questions      *json.RawMessage
	teamID         *string
	createdAt      *time.Time
	updatedAt      *time.Time
}

// ID sets the "id"
func (standup *Input) ID(id string) *Input {
	standup.id = &id
	return standup
}

// Name sets the "name"
func (standup *Input) Name(name string) *Input {
	standup.name = &name
	return standup
}

// SlackChannelID sets the "slackChannelID"
func (standup *Input) SlackChannelID(slackChannelID string) *Input {
	standup.slackChannelID = &slackChannelID
	return standup
}

// Time sets the "time"
func (standup *Input) Time(time string) *Input {
	standup.time = &time
	return standup
}

// Timezone sets the "timezone"
func (standup *Input) Timezone(timezone string) *Input {
	standup.timezone = &timezone
	return standup
}

// Questions sets the "questions"
func (standup *Input) Questions(questions json.RawMessage) *Input {
	standup.questions = &questions
	return standup
}

// TeamID sets the "teamID"
func (standup *Input) TeamID(teamID string) *Input {
	standup.teamID = &teamID
	return standup
}

// CreatedAt sets the "createdAt"
func (standup *Input) CreatedAt(createdAt time.Time) *Input {
	standup.createdAt = &createdAt
	return standup
}

// UpdatedAt sets the "updatedAt"
func (standup *Input) UpdatedAt(updatedAt time.Time) *Input {
	standup.updatedAt = &updatedAt
	return standup
}

// MarshalJSON marshals the "standup" into JSON
func (standup *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(standup)
}

// UnmarshalJSON unmarshals json to a "standup"
func (standup *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, standup)
}

func (standup *Input) String() string {
	return "standup"
}

func columns(standup *Input) map[string]interface{} {
	columns := make(map[string]interface{})

	if standup.id != nil {
		columns["id"] = *standup.id
	}

	if standup.name != nil {
		columns["name"] = *standup.name
	}

	if standup.slackChannelID != nil {
		columns["slack_channel_id"] = *standup.slackChannelID
	}

	if standup.time != nil {
		columns["time"] = *standup.time
	}

	if standup.timezone != nil {
		columns["timezone"] = *standup.timezone
	}

	if standup.questions != nil {
		columns["questions"] = *standup.questions
	}

	if standup.teamID != nil {
		columns["team_id"] = *standup.teamID
	}

	if standup.createdAt != nil {
		columns["created_at"] = *standup.createdAt
	}

	if standup.updatedAt != nil {
		columns["updated_at"] = *standup.updatedAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// DB is the common interface for database operations that can be used with
// types from schema `jack`.
//
// This should work with database/sql.DB and database/sql.Tx.
type DB interface {
	Exec(string, ...interface{}) (pgx.CommandTag, error)
	Query(string, ...interface{}) (*pgx.Rows, error)
	QueryRow(string, ...interface{}) *pgx.Row
}

// Model for Standup
type Model struct {
	DB  DB
	Log func(string, ...interface{})
}

// Insert a "standup" into the "jack"."standups"
func (m *Model) Insert(ctx context.Context, standupInput *Input) (*Standup, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(standupInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."standups" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	var standup Standup
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		return nil, e
	}

	return &standup, nil
}

// Find a `Standup` by it's primary key `id`
func (m *Model) Find(ctx context.Context, id string) (*Standup, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
    FROM "jack"."standups"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, &id)
	}

	var standup Standup
	row := m.DB.QueryRow(sqlstr, &id)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupNotFound
		}
		return nil, e
	}

	return &standup, nil
}

// FindBySlackChannelID find a standup by slack_channel_id
func (m *Model) FindBySlackChannelID(ctx context.Context, slackChannelID string) (*Standup, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
    FROM "jack"."standups"
    WHERE "slack_channel_id" = $1
  `

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, slackChannelID)
	}

	var standup Standup
	row := m.DB.QueryRow(sqlstr, slackChannelID)
	err := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrStandupNotFound
		}
		return nil, err
	}

	return &standup, nil
}

// FindOne find one standup by a condition
func (m *Model) FindOne(ctx context.Context, where *WhereClause) (*Standup, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
  FROM "jack"."standups"
  WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	var standup Standup
	row := m.DB.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupNotFound
		}
		return nil, e
	}

	return &standup, nil
}

// FindWhere find many "standup"'s by a given condition
func (m *Model) FindWhere(ctx context.Context, where *WhereClause) ([]*Standup, error) {
	standups := []*Standup{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
  FROM "jack"."standups"
  WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	rows, err := m.DB.Query(sqlstr, where.params...)
	if err != nil {
		return standups, err
	}
	defer rows.Close()

	for rows.Next() {
		var standup Standup
		if e := rows.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return standups, ErrStandupNotFound
			}
			return standups, err
		}
		standups = append(standups, &standup)
	}
	if rows.Err() != nil {
		return standups, rows.Err()
	}

	return standups, nil
}

// FindAll find all "standup"'s
func (m *Model) FindAll(ctx context.Context) ([]*Standup, error) {
	standups := []*Standup{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"
  FROM "jack"."standups"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr)
	}

	rows, err := m.DB.Query(sqlstr)
	if err != nil {
		return standups, err
	}
	defer rows.Close()

	for rows.Next() {
		var standup Standup
		if e := rows.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return standups, ErrStandupNotFound
			}
			return standups, err
		}
		standups = append(standups, &standup)
	}
	if rows.Err() != nil {
		return standups, rows.Err()
	}

	return standups, nil
}

// Update a "standup" in "jack"."standups" by its "id"
func (m *Model) Update(ctx context.Context, id string, standupInput *Input) (*Standup, error) {
	fields := columns(standupInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."standups" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run the query
	var standup Standup
	row := m.DB.QueryRow(sqlstr, values...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupNotFound
		}
		return nil, e
	}

	return &standup, nil
}

// UpdateBySlackChannelID find a Standup
func (m *Model) UpdateBySlackChannelID(ctx context.Context, slackChannelID string, standupInput *Input) (*Standup, error) {
	fields := columns(standupInput)

	// don't update the keys
	delete(fields, "slack_channel_id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "jack"."standups" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_channel_id" = $1 ` +
		`RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, slackChannelID)
	values = append(values, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run the query
	var standup Standup
	row := m.DB.QueryRow(sqlstr, values...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrStandupNotFound
		}
		return nil, e
	}

	return &standup, nil
}

// UpdateWhere rows in "jack"."standups" by a given condition
func (m *Model) UpdateWhere(ctx context.Context, where *WhereClause, standupInput *Input) ([]*Standup, error) {
	standups := []*Standup{}

	// prepare the slices
	_c, _i, _v := slice(columns(standupInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "jack"."standups" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, values...)
	}

	// run query
	rows, err := m.DB.Query(sqlstr, values...)
	if err != nil {
		return standups, err
	}
	defer rows.Close()

	for rows.Next() {
		var standup Standup
		if e := rows.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return standups, ErrStandupNotFound
			}
			return standups, err
		}
		standups = append(standups, &standup)
	}
	if rows.Err() != nil {
		return standups, rows.Err()
	}

	return standups, nil
}

// Delete a "standup" from the "jack"."standups" table
func (m *Model) Delete(ctx context.Context, id string) error {
	// sql query
	sqlstr := `DELETE FROM "jack"."standups" WHERE "id" = $1`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, id)
	}

	// run query
	if _, e := m.DB.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrStandupNotFound
		}
		return e
	}

	return nil
}

// DeleteBySlackChannelID deletes a "standup"
func (m *Model) DeleteBySlackChannelID(ctx context.Context, slackChannelID string) error {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."standups" WHERE "slack_channel_id" = $1`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, slackChannelID)
	}

	if _, e := m.DB.Exec(sqlstr, slackChannelID); e != nil {
		if e == pgx.ErrNoRows {
			return ErrStandupNotFound
		}
		return e
	}

	return nil
}

// DeleteWhere delete many "standup"'s by the given condition
func (m *Model) DeleteWhere(ctx context.Context, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "jack"."standups" WHERE ` + where.condition

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, where.params...)
	}

	if _, e := m.DB.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "standup" by its "id".
func (m *Model) Upsert(ctx context.Context, standupInput *Input) (*Standup, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(standupInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."standups" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	// run query
	var standup Standup
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil {
		return nil, e
	}

	return &standup, nil
}

// UpsertBySlackChannelID find a "Standup"
func (m *Model) UpsertBySlackChannelID(ctx context.Context, standupInput *Input) (*Standup, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(columns(standupInput), 0)

	// sql query
	sqlstr := `INSERT INTO "jack"."standups" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("slack_channel_id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "name", "slack_channel_id", "time", "timezone", "questions", "team_id", "created_at", "updated_at"`

	// log query if we've provided a logger
	if m.Log != nil {
		m.Log(sqlstr, _v...)
	}

	// run query
	var standup Standup
	row := m.DB.QueryRow(sqlstr, _v...)
	if e := row.Scan(&standup.ID, &standup.Name, &standup.SlackChannelID, &standup.Time, &standup.Timezone, &standup.Questions, &standup.TeamID, &standup.CreatedAt, &standup.UpdatedAt); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &standup, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
