package events

import (
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/digby/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrEventNotFound returned if the events is not found
var ErrEventNotFound = errors.New("events not found")

// EventInput model for "public"."events"
type EventInput struct {
	id          *string
	activityID  *string
	subject     *string
	icon        *string
	level       *string
	sourceTable *string
	createdAt   *time.Time
}

// Event model for "public"."events"
type Event struct {
	ID          string
	ActivityID  string
	Subject     string
	Icon        string
	Level       string
	SourceTable string
	CreatedAt   *time.Time
}

// New "public"."events" API
func New() *EventInput {
	return &EventInput{}
}

// ID sets the "id"
func (event *EventInput) ID(id string) *EventInput {
	event.id = &id
	return event
}

// ActivityID sets the "activityID"
func (event *EventInput) ActivityID(activityID string) *EventInput {
	event.activityID = &activityID
	return event
}

// Subject sets the "subject"
func (event *EventInput) Subject(subject string) *EventInput {
	event.subject = &subject
	return event
}

// Icon sets the "icon"
func (event *EventInput) Icon(icon string) *EventInput {
	event.icon = &icon
	return event
}

// Level sets the "level"
func (event *EventInput) Level(level string) *EventInput {
	event.level = &level
	return event
}

// SourceTable sets the "sourceTable"
func (event *EventInput) SourceTable(sourceTable string) *EventInput {
	event.sourceTable = &sourceTable
	return event
}

// CreatedAt sets the "createdAt"
func (event *EventInput) CreatedAt(createdAt time.Time) *EventInput {
	event.createdAt = &createdAt
	return event
}

// MarshalJSON marshals the "event" into JSON
func (event *EventInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(event)
}

// UnmarshalJSON unmarshals json to a "event"
func (event *EventInput) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, event)
}

func (event *EventInput) String() string {
	return "event"
}

func getColumns(event *EventInput) map[string]interface{} {
	columns := make(map[string]interface{})

	if event.id != nil {
		columns["id"] = *event.id
	}

	if event.activityID != nil {
		columns["activity_id"] = *event.activityID
	}

	if event.subject != nil {
		columns["subject"] = *event.subject
	}

	if event.icon != nil {
		columns["icon"] = *event.icon
	}

	if event.level != nil {
		columns["level"] = *event.level
	}

	if event.sourceTable != nil {
		columns["source_table"] = *event.sourceTable
	}

	if event.createdAt != nil {
		columns["created_at"] = *event.createdAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// Insert a "event" into the "public"."events"
func Insert(db digby.DB, eventInput *EventInput) (*Event, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(eventInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "public"."events" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"
  `
	digby.Log(sqlstr, _v...)

	var event Event
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
		return nil, e
	}

	return &event, nil
}

// Find a "Event" by "id"
func Find(db pogo.DB, id string) (*Event, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"
    FROM "public"."events"
    WHERE "id" = $1
  `
	pogo.Log(sqlstr, &id)

	var event Event
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrEventNotFound
		}
		return nil, e
	}

	return &event, nil
}

// FindByID find a event by id
func FindByID(db digby.DB, id string) (*Event, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"
    FROM "public"."events"
    WHERE "id" = $1
  `
	digby.Log(sqlstr, id)

	var event Event
	row := db.QueryRow(sqlstr, id)
	err := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrEventNotFound
		}
		return nil, err
	}

	return &event, nil
}

// FindOne find one event by a condition
func FindOne(db digby.DB, where *WhereClause) (*Event, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"
  FROM "public"."events"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	var event Event
	row := db.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrEventNotFound
		}
		return nil, e
	}

	return &event, nil
}

// FindMany find many "event"'s by a given condition
func FindMany(db digby.DB, where *WhereClause) (events []*Event, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"
  FROM "public"."events"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	rows, err := db.Query(sqlstr, where.params...)
	if err != nil {
		return events, err
	}
	defer rows.Close()

	for rows.Next() {
		var event Event
		if e := rows.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return events, ErrEventNotFound
			}
			return events, err
		}
		events = append(events, &event)
	}
	if rows.Err() != nil {
		return events, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	// if len(events) == 0 {
	// 	return make([]*Event, 0), nil
	// }

	return events, nil
}

// Update a "event" in "public"."events" by its "id"
func Update(db digby.DB, id string, eventInput *EventInput) (*Event, error) {
	fields := getColumns(eventInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := digby.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "public"."events" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)
	digby.Log(sqlstr, values...)

	// run the query
	var event Event
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrEventNotFound
		}
		return nil, e
	}

	return &event, nil
}

// UpdateMany rows in "public"."events" by a given condition
func UpdateMany(db digby.DB, where *WhereClause, eventInput *EventInput) (events []*Event, err error) {
	// prepare the slices
	_c, _i, _v := digby.Slice(getColumns(eventInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "public"."events" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)
	digby.Log(sqlstr, values...)

	// run query
	rows, err := db.Query(sqlstr, values...)
	if err != nil {
		return events, err
	}
	defer rows.Close()

	for rows.Next() {
		var event Event
		if e := rows.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return events, ErrEventNotFound
			}
			return events, err
		}
		events = append(events, &event)
	}
	if rows.Err() != nil {
		return events, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	// if len(events) == 0 {
	// 	return make([]*Event, 0), nil
	// }

	return events, nil
}

// Delete a "event" from the "public"."events" table
func Delete(db digby.DB, id string) error {
	// sql query
	sqlstr := `DELETE FROM "public"."events" WHERE "id" = $1`
	digby.Log(sqlstr, id)

	// run query
	if _, e := db.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrEventNotFound
		}
		return e
	}

	return nil
}

// DeleteMany delete many "event"'s by the given condition
func DeleteMany(db digby.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "public"."events" WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	if _, e := db.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "event" by its "id".
func Upsert(db digby.DB, eventInput *EventInput) (*Event, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(eventInput), 0)

	// sql query
	sqlstr := `INSERT INTO "public"."events" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "activity_id", "subject", "icon", "level", "source_table", "created_at"`
	digby.Log(sqlstr, _v...)

	// run query
	var event Event
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&event.ID, &event.ActivityID, &event.Subject, &event.Icon, &event.Level, &event.SourceTable, &event.CreatedAt); e != nil {
		return nil, e
	}

	return &event, nil
}
