package projects

import (
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/digby/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrProjectNotFound returned if the projects is not found
var ErrProjectNotFound = errors.New("projects not found")

// ProjectInput model for "public"."projects"
type ProjectInput struct {
	id        *string
	name      *string
	domain    *string
	createdAt *time.Time
	updatedAt *time.Time
}

// Project model for "public"."projects"
type Project struct {
	ID        string
	Name      string
	Domain    *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// New "public"."projects" API
func New() *ProjectInput {
	return &ProjectInput{}
}

// ID sets the "id"
func (project *ProjectInput) ID(id string) *ProjectInput {
	project.id = &id
	return project
}

// Name sets the "name"
func (project *ProjectInput) Name(name string) *ProjectInput {
	project.name = &name
	return project
}

// Domain sets the "domain"
func (project *ProjectInput) Domain(domain string) *ProjectInput {
	project.domain = &domain
	return project
}

// CreatedAt sets the "createdAt"
func (project *ProjectInput) CreatedAt(createdAt time.Time) *ProjectInput {
	project.createdAt = &createdAt
	return project
}

// UpdatedAt sets the "updatedAt"
func (project *ProjectInput) UpdatedAt(updatedAt time.Time) *ProjectInput {
	project.updatedAt = &updatedAt
	return project
}

// MarshalJSON marshals the "project" into JSON
func (project *ProjectInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(project)
}

// UnmarshalJSON unmarshals json to a "project"
func (project *ProjectInput) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, project)
}

func (project *ProjectInput) String() string {
	return "project"
}

func getColumns(project *ProjectInput) map[string]interface{} {
	columns := make(map[string]interface{})

	if project.id != nil {
		columns["id"] = *project.id
	}

	if project.name != nil {
		columns["name"] = *project.name
	}

	if project.domain != nil {
		columns["domain"] = *project.domain
	}

	if project.createdAt != nil {
		columns["created_at"] = *project.createdAt
	}

	if project.updatedAt != nil {
		columns["updated_at"] = *project.updatedAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// Insert a "project" into the "public"."projects"
func Insert(db digby.DB, projectInput *ProjectInput) (*Project, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(projectInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "public"."projects" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "name", "domain", "created_at", "updated_at"
  `
	digby.Log(sqlstr, _v...)

	var project Project
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
		return nil, e
	}

	return &project, nil
}

// Find a "Project" by "id"
func Find(db pogo.DB, id string) (*Project, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "domain", "created_at", "updated_at"
    FROM "public"."projects"
    WHERE "id" = $1
  `
	pogo.Log(sqlstr, &id)

	var project Project
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrProjectNotFound
		}
		return nil, e
	}

	return &project, nil
}

// FindByID find a project by id
func FindByID(db digby.DB, id string) (*Project, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "domain", "created_at", "updated_at"
    FROM "public"."projects"
    WHERE "id" = $1
  `
	digby.Log(sqlstr, id)

	var project Project
	row := db.QueryRow(sqlstr, id)
	err := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrProjectNotFound
		}
		return nil, err
	}

	return &project, nil
}

// FindOne find one project by a condition
func FindOne(db digby.DB, where *WhereClause) (*Project, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "domain", "created_at", "updated_at"
  FROM "public"."projects"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	var project Project
	row := db.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrProjectNotFound
		}
		return nil, e
	}

	return &project, nil
}

// FindMany find many "project"'s by a given condition
func FindMany(db digby.DB, where *WhereClause) (projects []*Project, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "domain", "created_at", "updated_at"
  FROM "public"."projects"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	rows, err := db.Query(sqlstr, where.params...)
	if err != nil {
		return projects, err
	}
	defer rows.Close()

	for rows.Next() {
		var project Project
		if e := rows.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return projects, ErrProjectNotFound
			}
			return projects, err
		}
		projects = append(projects, &project)
	}
	if rows.Err() != nil {
		return projects, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	// if len(projects) == 0 {
	// 	return make([]*Project, 0), nil
	// }

	return projects, nil
}

// Update a "project" in "public"."projects" by its "id"
func Update(db digby.DB, id string, projectInput *ProjectInput) (*Project, error) {
	fields := getColumns(projectInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := digby.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "public"."projects" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "name", "domain", "created_at", "updated_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)
	digby.Log(sqlstr, values...)

	// run the query
	var project Project
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrProjectNotFound
		}
		return nil, e
	}

	return &project, nil
}

// UpdateMany rows in "public"."projects" by a given condition
func UpdateMany(db digby.DB, where *WhereClause, projectInput *ProjectInput) (projects []*Project, err error) {
	// prepare the slices
	_c, _i, _v := digby.Slice(getColumns(projectInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "public"."projects" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "name", "domain", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)
	digby.Log(sqlstr, values...)

	// run query
	rows, err := db.Query(sqlstr, values...)
	if err != nil {
		return projects, err
	}
	defer rows.Close()

	for rows.Next() {
		var project Project
		if e := rows.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return projects, ErrProjectNotFound
			}
			return projects, err
		}
		projects = append(projects, &project)
	}
	if rows.Err() != nil {
		return projects, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	// if len(projects) == 0 {
	// 	return make([]*Project, 0), nil
	// }

	return projects, nil
}

// Delete a "project" from the "public"."projects" table
func Delete(db digby.DB, id string) error {
	// sql query
	sqlstr := `DELETE FROM "public"."projects" WHERE "id" = $1`
	digby.Log(sqlstr, id)

	// run query
	if _, e := db.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrProjectNotFound
		}
		return e
	}

	return nil
}

// DeleteMany delete many "project"'s by the given condition
func DeleteMany(db digby.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "public"."projects" WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	if _, e := db.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "project" by its "id".
func Upsert(db digby.DB, projectInput *ProjectInput) (*Project, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(projectInput), 0)

	// sql query
	sqlstr := `INSERT INTO "public"."projects" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "name", "domain", "created_at", "updated_at"`
	digby.Log(sqlstr, _v...)

	// run query
	var project Project
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&project.ID, &project.Name, &project.Domain, &project.CreatedAt, &project.UpdatedAt); e != nil {
		return nil, e
	}

	return &project, nil
}
