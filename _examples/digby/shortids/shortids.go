package shortids

import (
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/jack/slack/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrShortidNotFound returned if the shortids is not found
var ErrShortidNotFound = errors.New("shortids not found")

// ShortidInput model for "public"."shortids"
type ShortidInput struct {
	id        *string
	createdAt *time.Time
}

// Shortid model for "public"."shortids"
type Shortid struct {
	ID        string
	CreatedAt *time.Time
}

// New "public"."shortids" API
func New() *ShortidInput {
	return &ShortidInput{}
}

// ID sets the "id"
func (shortid *ShortidInput) ID(id string) *ShortidInput {
	shortid.id = &id
	return shortid
}

// CreatedAt sets the "createdAt"
func (shortid *ShortidInput) CreatedAt(createdAt time.Time) *ShortidInput {
	shortid.createdAt = &createdAt
	return shortid
}

// MarshalJSON marshals the "shortid" into JSON
func (shortid *ShortidInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(shortid)
}

// UnmarshalJSON unmarshals json to a "shortid"
func (shortid *ShortidInput) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, shortid)
}

func (shortid *ShortidInput) String() string {
	return "shortid"
}

func getColumns(shortid *ShortidInput) map[string]interface{} {
	columns := make(map[string]interface{})

	if shortid.id != nil {
		columns["id"] = *shortid.id
	}

	if shortid.createdAt != nil {
		columns["created_at"] = *shortid.createdAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// Insert a "shortid" into the "public"."shortids"
func Insert(db digby.DB, shortidInput *ShortidInput) (*Shortid, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(shortidInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "public"."shortids" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "created_at"
  `
	digby.Log(sqlstr, _v...)

	var shortid Shortid
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
		return nil, e
	}

	return &shortid, nil
}

// Find a "Shortid" by "id"
func Find(db pogo.DB, id string) (*Shortid, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "created_at"
    FROM "public"."shortids"
    WHERE "id" = $1
  `
	pogo.Log(sqlstr, &id)

	var shortid Shortid
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrShortidNotFound
		}
		return nil, e
	}

	return &shortid, nil
}

// FindByID find a shortid by id
func FindByID(db digby.DB, id string) (*Shortid, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "created_at"
    FROM "public"."shortids"
    WHERE "id" = $1
  `
	digby.Log(sqlstr, id)

	var shortid Shortid
	row := db.QueryRow(sqlstr, id)
	err := row.Scan(&shortid.ID, &shortid.CreatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrShortidNotFound
		}
		return nil, err
	}

	return &shortid, nil
}

// FindOne find one shortid by a condition
func FindOne(db digby.DB, where *WhereClause) (*Shortid, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "created_at"
  FROM "public"."shortids"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	var shortid Shortid
	row := db.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrShortidNotFound
		}
		return nil, e
	}

	return &shortid, nil
}

// FindMany find many "shortid"'s by a given condition
func FindMany(db digby.DB, where *WhereClause) ([]*Shortid, error) {
	shortids := []*Shortid{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "created_at"
  FROM "public"."shortids"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	rows, err := db.Query(sqlstr, where.params...)
	if err != nil {
		return shortids, err
	}
	defer rows.Close()

	for rows.Next() {
		var shortid Shortid
		if e := rows.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return shortids, ErrShortidNotFound
			}
			return shortids, err
		}
		shortids = append(shortids, &shortid)
	}
	if rows.Err() != nil {
		return shortids, rows.Err()
	}

	return shortids, nil
}

// Update a "shortid" in "public"."shortids" by its "id"
func Update(db digby.DB, id string, shortidInput *ShortidInput) (*Shortid, error) {
	fields := getColumns(shortidInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := digby.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "public"."shortids" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "created_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)
	digby.Log(sqlstr, values...)

	// run the query
	var shortid Shortid
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrShortidNotFound
		}
		return nil, e
	}

	return &shortid, nil
}

// UpdateMany rows in "public"."shortids" by a given condition
func UpdateMany(db digby.DB, where *WhereClause, shortidInput *ShortidInput) ([]*Shortid, error) {
	shortids := []*Shortid{}

	// prepare the slices
	_c, _i, _v := digby.Slice(getColumns(shortidInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "public"."shortids" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "created_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)
	digby.Log(sqlstr, values...)

	// run query
	rows, err := db.Query(sqlstr, values...)
	if err != nil {
		return shortids, err
	}
	defer rows.Close()

	for rows.Next() {
		var shortid Shortid
		if e := rows.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return shortids, ErrShortidNotFound
			}
			return shortids, err
		}
		shortids = append(shortids, &shortid)
	}
	if rows.Err() != nil {
		return shortids, rows.Err()
	}

	return shortids, nil
}

// Delete a "shortid" from the "public"."shortids" table
func Delete(db digby.DB, id string) error {
	// sql query
	sqlstr := `DELETE FROM "public"."shortids" WHERE "id" = $1`
	digby.Log(sqlstr, id)

	// run query
	if _, e := db.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrShortidNotFound
		}
		return e
	}

	return nil
}

// DeleteMany delete many "shortid"'s by the given condition
func DeleteMany(db digby.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "public"."shortids" WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	if _, e := db.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "shortid" by its "id".
func Upsert(db digby.DB, shortidInput *ShortidInput) (*Shortid, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(shortidInput), 0)

	// sql query
	sqlstr := `INSERT INTO "public"."shortids" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "created_at"`
	digby.Log(sqlstr, _v...)

	// run query
	var shortid Shortid
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&shortid.ID, &shortid.CreatedAt); e != nil {
		return nil, e
	}

	return &shortid, nil
}
