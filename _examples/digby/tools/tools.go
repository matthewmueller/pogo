package tools

import (
	"encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/jack/slack/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrToolNotFound returned if the tools is not found
var ErrToolNotFound = errors.New("tools not found")

// ToolInput model for "public"."tools"
type ToolInput struct {
	id          *string
	name        *string
	icon        *string
	toolURL     *string
	activityURL *string
	eventURL    *string
	createdAt   *time.Time
	updatedAt   *time.Time
}

// Tool model for "public"."tools"
type Tool struct {
	ID          string
	Name        string
	Icon        string
	ToolURL     string
	ActivityURL string
	EventURL    string
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
}

// New "public"."tools" API
func New() *ToolInput {
	return &ToolInput{}
}

// ID sets the "id"
func (tool *ToolInput) ID(id string) *ToolInput {
	tool.id = &id
	return tool
}

// Name sets the "name"
func (tool *ToolInput) Name(name string) *ToolInput {
	tool.name = &name
	return tool
}

// Icon sets the "icon"
func (tool *ToolInput) Icon(icon string) *ToolInput {
	tool.icon = &icon
	return tool
}

// ToolURL sets the "toolURL"
func (tool *ToolInput) ToolURL(toolURL string) *ToolInput {
	tool.toolURL = &toolURL
	return tool
}

// ActivityURL sets the "activityURL"
func (tool *ToolInput) ActivityURL(activityURL string) *ToolInput {
	tool.activityURL = &activityURL
	return tool
}

// EventURL sets the "eventURL"
func (tool *ToolInput) EventURL(eventURL string) *ToolInput {
	tool.eventURL = &eventURL
	return tool
}

// CreatedAt sets the "createdAt"
func (tool *ToolInput) CreatedAt(createdAt time.Time) *ToolInput {
	tool.createdAt = &createdAt
	return tool
}

// UpdatedAt sets the "updatedAt"
func (tool *ToolInput) UpdatedAt(updatedAt time.Time) *ToolInput {
	tool.updatedAt = &updatedAt
	return tool
}

// MarshalJSON marshals the "tool" into JSON
func (tool *ToolInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(tool)
}

// UnmarshalJSON unmarshals json to a "tool"
func (tool *ToolInput) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, tool)
}

func (tool *ToolInput) String() string {
	return "tool"
}

func getColumns(tool *ToolInput) map[string]interface{} {
	columns := make(map[string]interface{})

	if tool.id != nil {
		columns["id"] = *tool.id
	}

	if tool.name != nil {
		columns["name"] = *tool.name
	}

	if tool.icon != nil {
		columns["icon"] = *tool.icon
	}

	if tool.toolURL != nil {
		columns["tool_url"] = *tool.toolURL
	}

	if tool.activityURL != nil {
		columns["activity_url"] = *tool.activityURL
	}

	if tool.eventURL != nil {
		columns["event_url"] = *tool.eventURL
	}

	if tool.createdAt != nil {
		columns["created_at"] = *tool.createdAt
	}

	if tool.updatedAt != nil {
		columns["updated_at"] = *tool.updatedAt
	}

	return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

// Insert a "tool" into the "public"."tools"
func Insert(db digby.DB, toolInput *ToolInput) (*Tool, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(toolInput), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "public"."tools" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"
  `
	digby.Log(sqlstr, _v...)

	var tool Tool
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
		return nil, e
	}

	return &tool, nil
}

// Find a "Tool" by "id"
func Find(db pogo.DB, id string) (*Tool, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"
    FROM "public"."tools"
    WHERE "id" = $1
  `
	pogo.Log(sqlstr, &id)

	var tool Tool
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrToolNotFound
		}
		return nil, e
	}

	return &tool, nil
}

// FindByID find a tool by id
func FindByID(db digby.DB, id string) (*Tool, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"
    FROM "public"."tools"
    WHERE "id" = $1
  `
	digby.Log(sqlstr, id)

	var tool Tool
	row := db.QueryRow(sqlstr, id)
	err := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, ErrToolNotFound
		}
		return nil, err
	}

	return &tool, nil
}

// FindOne find one tool by a condition
func FindOne(db digby.DB, where *WhereClause) (*Tool, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"
  FROM "public"."tools"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	var tool Tool
	row := db.QueryRow(sqlstr, where.params...)
	if e := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrToolNotFound
		}
		return nil, e
	}

	return &tool, nil
}

// FindMany find many "tool"'s by a given condition
func FindMany(db digby.DB, where *WhereClause) ([]*Tool, error) {
	tools := []*Tool{}

	// sql select query, primary key provided by sequence
	sqlstr := `
  SELECT "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"
  FROM "public"."tools"
  WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	rows, err := db.Query(sqlstr, where.params...)
	if err != nil {
		return tools, err
	}
	defer rows.Close()

	for rows.Next() {
		var tool Tool
		if e := rows.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return tools, ErrToolNotFound
			}
			return tools, err
		}
		tools = append(tools, &tool)
	}
	if rows.Err() != nil {
		return tools, rows.Err()
	}

	return tools, nil
}

// Update a "tool" in "public"."tools" by its "id"
func Update(db digby.DB, id string, toolInput *ToolInput) (*Tool, error) {
	fields := getColumns(toolInput)

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := digby.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE "public"."tools" SET (` +
		strings.Join(_c, ", ") +
		`) = (` +
		strings.Join(_i, ", ") +
		`)
    WHERE "id" = $1
    RETURNING "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"`

	// setup query
	values := append([]interface{}{&id}, _v...)
	digby.Log(sqlstr, values...)

	// run the query
	var tool Tool
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrToolNotFound
		}
		return nil, e
	}

	return &tool, nil
}

// UpdateMany rows in "public"."tools" by a given condition
func UpdateMany(db digby.DB, where *WhereClause, toolInput *ToolInput) ([]*Tool, error) {
	tools := []*Tool{}

	// prepare the slices
	_c, _i, _v := digby.Slice(getColumns(toolInput), len(where.params))

	// sql query
	sqlstr := `UPDATE "public"."tools" SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, where.params...)
	values = append(values, _v...)
	digby.Log(sqlstr, values...)

	// run query
	rows, err := db.Query(sqlstr, values...)
	if err != nil {
		return tools, err
	}
	defer rows.Close()

	for rows.Next() {
		var tool Tool
		if e := rows.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
			if e == pgx.ErrNoRows {
				return tools, ErrToolNotFound
			}
			return tools, err
		}
		tools = append(tools, &tool)
	}
	if rows.Err() != nil {
		return tools, rows.Err()
	}

	return tools, nil
}

// Delete a "tool" from the "public"."tools" table
func Delete(db digby.DB, id string) error {
	// sql query
	sqlstr := `DELETE FROM "public"."tools" WHERE "id" = $1`
	digby.Log(sqlstr, id)

	// run query
	if _, e := db.Exec(sqlstr, id); e != nil {
		if e == pgx.ErrNoRows {
			return ErrToolNotFound
		}
		return e
	}

	return nil
}

// DeleteMany delete many "tool"'s by the given condition
func DeleteMany(db digby.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM "public"."tools" WHERE ` + where.condition
	digby.Log(sqlstr, where.params...)

	if _, e := db.Exec(sqlstr, where.params...); e != nil {
		return e
	}

	return nil
}

// Upsert the "tool" by its "id".
func Upsert(db digby.DB, toolInput *ToolInput) (*Tool, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := digby.Slice(getColumns(toolInput), 0)

	// sql query
	sqlstr := `INSERT INTO "public"."tools" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
		`RETURNING "id", "name", "icon", "tool_url", "activity_url", "event_url", "created_at", "updated_at"`
	digby.Log(sqlstr, _v...)

	// run query
	var tool Tool
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&tool.ID, &tool.Name, &tool.Icon, &tool.ToolURL, &tool.ActivityURL, &tool.EventURL, &tool.CreatedAt, &tool.UpdatedAt); e != nil {
		return nil, e
	}

	return &tool, nil
}
