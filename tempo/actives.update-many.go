package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (a *Actives) UpdateMany(aa *Active, condition string, params ...interface{}) (actives []Active, err error) {
	fields := a.getFields(aa)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.actives SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "token", "state", "used", "created_at", "updated_at"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := a.DB.Query(sqlstr, values...)
	if err != nil {
		return actives, err
	}
	defer rows.Close()

	for rows.Next() {
		active := Active{}
		err = rows.Scan(&active.ID, &active.Token, &active.State, &active.Used, &active.CreatedAt, &active.UpdatedAt)
		if err != nil {
			return actives, err
		}
		actives = append(actives, active)
	}

	if rows.Err() != nil {
		return actives, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(actives) == 0 {
		return make([]Active, 0), nil
	}

	return actives, nil
}
