package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// TargetType is the 'target_type' enum type from schema 'public'.
type TargetType uint16

const (

	// TargetTypeWebhook is the 'WEBHOOK' TargetType.
	TargetTypeWebhook = TargetType(1)

	// TargetTypeAmqp is the 'AMQP' TargetType.
	TargetTypeAmqp = TargetType(2)

	// TargetTypeEmail is the 'EMAIL' TargetType.
	TargetTypeEmail = TargetType(3)

	// TargetTypeLambda is the 'LAMBDA' TargetType.
	TargetTypeLambda = TargetType(4)

	// TargetTypeSns is the 'SNS' TargetType.
	TargetTypeSns = TargetType(5)

	// TargetTypeSqs is the 'SQS' TargetType.
	TargetTypeSqs = TargetType(6)

	// TargetTypePostgres is the 'POSTGRES' TargetType.
	TargetTypePostgres = TargetType(7)
)

// String returns the string value of the TargetType.
func (tt TargetType) String() string {
	var enumVal string

	switch tt {

	case TargetTypeWebhook:
		enumVal = "WEBHOOK"

	case TargetTypeAmqp:
		enumVal = "AMQP"

	case TargetTypeEmail:
		enumVal = "EMAIL"

	case TargetTypeLambda:
		enumVal = "LAMBDA"

	case TargetTypeSns:
		enumVal = "SNS"

	case TargetTypeSqs:
		enumVal = "SQS"

	case TargetTypePostgres:
		enumVal = "POSTGRES"

	}

	return enumVal
}

// MarshalText marshals TargetType into text.
func (tt TargetType) MarshalText() ([]byte, error) {
	return []byte(tt.String()), nil
}

// UnmarshalText unmarshals TargetType from text.
func (tt *TargetType) UnmarshalText(text []byte) error {
	switch string(text) {

	case "WEBHOOK":
		*tt = TargetTypeWebhook

	case "AMQP":
		*tt = TargetTypeAmqp

	case "EMAIL":
		*tt = TargetTypeEmail

	case "LAMBDA":
		*tt = TargetTypeLambda

	case "SNS":
		*tt = TargetTypeSns

	case "SQS":
		*tt = TargetTypeSqs

	case "POSTGRES":
		*tt = TargetTypePostgres

	default:
		return errors.New("invalid TargetType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TargetType.
func (tt TargetType) Value() (driver.Value, error) {
	return tt.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for TargetType.
func (tt *TargetType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid TargetType")
	}

	return tt.UnmarshalText(buf)
}

// ScanPgx into PGX
func (tt *TargetType) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return tt.UnmarshalText(vr.ReadBytes(vr.Len()))
}
