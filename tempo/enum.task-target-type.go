package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// TaskTargetType is the 'task_target_type' enum type from schema 'public'.
type TaskTargetType uint16

const (

	// TaskTargetTypeWebhook is the 'WEBHOOK' TaskTargetType.
	TaskTargetTypeWebhook = TaskTargetType(1)

	// TaskTargetTypeAmqp is the 'AMQP' TaskTargetType.
	TaskTargetTypeAmqp = TaskTargetType(2)

	// TaskTargetTypeEmail is the 'EMAIL' TaskTargetType.
	TaskTargetTypeEmail = TaskTargetType(3)

	// TaskTargetTypeLambda is the 'LAMBDA' TaskTargetType.
	TaskTargetTypeLambda = TaskTargetType(4)

	// TaskTargetTypeSns is the 'SNS' TaskTargetType.
	TaskTargetTypeSns = TaskTargetType(5)

	// TaskTargetTypeSqs is the 'SQS' TaskTargetType.
	TaskTargetTypeSqs = TaskTargetType(6)

	// TaskTargetTypePostgres is the 'POSTGRES' TaskTargetType.
	TaskTargetTypePostgres = TaskTargetType(7)
)

// String returns the string value of the TaskTargetType.
func (ttt TaskTargetType) String() string {
	var enumVal string

	switch ttt {

	case TaskTargetTypeWebhook:
		enumVal = "WEBHOOK"

	case TaskTargetTypeAmqp:
		enumVal = "AMQP"

	case TaskTargetTypeEmail:
		enumVal = "EMAIL"

	case TaskTargetTypeLambda:
		enumVal = "LAMBDA"

	case TaskTargetTypeSns:
		enumVal = "SNS"

	case TaskTargetTypeSqs:
		enumVal = "SQS"

	case TaskTargetTypePostgres:
		enumVal = "POSTGRES"

	}

	return enumVal
}

// MarshalText marshals TaskTargetType into text.
func (ttt TaskTargetType) MarshalText() ([]byte, error) {
	return []byte(ttt.String()), nil
}

// UnmarshalText unmarshals TaskTargetType from text.
func (ttt *TaskTargetType) UnmarshalText(text []byte) error {
	switch string(text) {

	case "WEBHOOK":
		*ttt = TaskTargetTypeWebhook

	case "AMQP":
		*ttt = TaskTargetTypeAmqp

	case "EMAIL":
		*ttt = TaskTargetTypeEmail

	case "LAMBDA":
		*ttt = TaskTargetTypeLambda

	case "SNS":
		*ttt = TaskTargetTypeSns

	case "SQS":
		*ttt = TaskTargetTypeSqs

	case "POSTGRES":
		*ttt = TaskTargetTypePostgres

	default:
		return errors.New("invalid TaskTargetType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TaskTargetType.
func (ttt TaskTargetType) Value() (driver.Value, error) {
	return ttt.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for TaskTargetType.
func (ttt *TaskTargetType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid TaskTargetType")
	}

	return ttt.UnmarshalText(buf)
}

// ScanPgx into PGX
func (ttt *TaskTargetType) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return ttt.UnmarshalText(vr.ReadBytes(vr.Len()))
}
