package tempo

import (
	"github.com/matthewmueller/pgx"
	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a Active by "id"
func (a *Actives) Find(id *uuid.UUID) (active Active, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "token", "state", "used", "created_at", "updated_at"
    FROM public.actives
    WHERE "id" = $1`

	DBLog(sqlstr, id)
	row := a.DB.QueryRow(sqlstr, id)
	err = row.Scan(&active.ID, &active.Token, &active.State, &active.Used, &active.CreatedAt, &active.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return active, ErrActiveNotFound
		}
		return active, err
	}

	return active, nil
}

// FindByState find a Active
func (a *Actives) FindByState(state *uuid.UUID) (active Active, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "token", "state", "used", "created_at", "updated_at"
		FROM public.actives
		WHERE "state" = $1`

	DBLog(sqlstr, state)
	row := a.DB.QueryRow(sqlstr, state)
	err = row.Scan(&active.ID, &active.Token, &active.State, &active.Used, &active.CreatedAt, &active.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return active, ErrActiveNotFound
		}
		return active, err
	}

	return active, nil
}

// FindByToken find a Active
func (a *Actives) FindByToken(token *uuid.UUID) (active Active, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "token", "state", "used", "created_at", "updated_at"
		FROM public.actives
		WHERE "token" = $1`

	DBLog(sqlstr, token)
	row := a.DB.QueryRow(sqlstr, token)
	err = row.Scan(&active.ID, &active.Token, &active.State, &active.Used, &active.CreatedAt, &active.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return active, ErrActiveNotFound
		}
		return active, err
	}

	return active, nil
}
