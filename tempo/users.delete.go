package tempo

import (
	"github.com/matthewmueller/pgx"
	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// Delete the User from the database.
func (u *Users) Delete(id *uuid.UUID) (err error) {
	// sql query
	sqlstr := `DELETE FROM public.users WHERE "id" = $1`

	// run query
	DBLog(sqlstr, id)
	_, err = u.DB.Exec(sqlstr, id)
	if err != nil {
		if err == pgx.ErrNoRows {
			return ErrUserNotFound
		}
		return err
	}

	return nil
}

// DeleteByEmail find a User
func (u *Users) DeleteByEmail(email *string) (err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM public.users WHERE "email" = $1`

	DBLog(sqlstr, email)
	_, err = u.DB.Exec(sqlstr, email)
	if err != nil {
		if err == pgx.ErrNoRows {
			return ErrUserNotFound
		}
		return err
	}

	return nil
}

// DeleteByGithubAccessToken find a User
func (u *Users) DeleteByGithubAccessToken(githubaccesstoken *string) (err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM public.users WHERE "github_access_token" = $1`

	DBLog(sqlstr, githubaccesstoken)
	_, err = u.DB.Exec(sqlstr, githubaccesstoken)
	if err != nil {
		if err == pgx.ErrNoRows {
			return ErrUserNotFound
		}
		return err
	}

	return nil
}

// DeleteByToken find a User
func (u *Users) DeleteByToken(token *uuid.UUID) (err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM public.users WHERE "token" = $1`

	DBLog(sqlstr, token)
	_, err = u.DB.Exec(sqlstr, token)
	if err != nil {
		if err == pgx.ErrNoRows {
			return ErrUserNotFound
		}
		return err
	}

	return nil
}
