package tempo

import (
	"errors"
	"time"

	"github.com/satori/go.uuid"
	"github.com/shopspring/decimal"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrUserNotFound returned if the User is not found
var ErrUserNotFound = errors.New("User not found")

// Users class
type Users struct {
	DB DB
}

// User model
type User struct {
	ID                *uuid.UUID       `json:"id,omitempty"`
	Role              *string          `json:"role,omitempty"`
	Email             *string          `json:"email,omitempty"`
	StripeID          *string          `json:"stripe_id,omitempty"`
	Active            *bool            `json:"active,omitempty"`
	GithubAccessToken *string          `json:"github_access_token,omitempty"`
	Scope             *[]string        `json:"scope,omitempty"`
	FreeEvents        *int             `json:"free_events,omitempty"`
	CostPerEvent      *decimal.Decimal `json:"cost_per_event,omitempty"`
	TotalEvents       *int             `json:"total_events,omitempty"`
	PaidEvents        *int             `json:"paid_events,omitempty"`
	Token             *uuid.UUID       `json:"token,omitempty"`
	CreatedAt         *time.Time       `json:"created_at,omitempty"`
	UpdatedAt         *time.Time       `json:"updated_at,omitempty"`
	FreeTasks         *int             `json:"free_tasks,omitempty"`
}

// NewUser model
func NewUser(db DB) Users {
	return Users{
		DB: db,
	}
}

// getFields fetch the non-nil fields
func (u *Users) getFields(uu *User) map[string]interface{} {
	fields := map[string]interface{}{}

	if uu.ID != nil {
		fields["id"] = uu.ID
	}

	if uu.Role != nil {
		fields["role"] = uu.Role
	}

	if uu.Email != nil {
		fields["email"] = uu.Email
	}

	if uu.StripeID != nil {
		fields["stripe_id"] = uu.StripeID
	}

	if uu.Active != nil {
		fields["active"] = uu.Active
	}

	if uu.GithubAccessToken != nil {
		fields["github_access_token"] = uu.GithubAccessToken
	}

	if uu.Scope != nil {
		fields["scope"] = uu.Scope
	}

	if uu.FreeEvents != nil {
		fields["free_events"] = uu.FreeEvents
	}

	if uu.CostPerEvent != nil {
		fields["cost_per_event"] = uu.CostPerEvent
	}

	if uu.TotalEvents != nil {
		fields["total_events"] = uu.TotalEvents
	}

	if uu.PaidEvents != nil {
		fields["paid_events"] = uu.PaidEvents
	}

	if uu.Token != nil {
		fields["token"] = uu.Token
	}

	if uu.CreatedAt != nil {
		fields["created_at"] = uu.CreatedAt
	}

	if uu.UpdatedAt != nil {
		fields["updated_at"] = uu.UpdatedAt
	}

	if uu.FreeTasks != nil {
		fields["free_tasks"] = uu.FreeTasks
	}

	return fields
}
