package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
	"time"

	"github.com/satori/go.uuid"
)

// Update the Event by the Primary Key
func (e *Events) Update(ee *Event, id *uuid.UUID) (event Event, err error) {
	fields := e.getFields(ee)

	// first check if we have the primary key
	if id == nil {
		return event, errors.New(`primary key "id" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.events SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `)
		WHERE "id" = $1
		RETURNING "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"`

	// run query
	values := append([]interface{}{id}, v...)
	DBLog(sqlstr, values...)

	row := e.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
	if err != nil {
		return event, err
	}

	return event, nil
}

// UpdateByTaskAndTime find a Event
func (e *Events) UpdateByTaskAndTime(ee *Event, task *uuid.UUID, time *time.Time) (event Event, err error) {
	fields := e.getFields(ee)

	// first check if we have all the keys we need
	if task == nil {
		return event, errors.New(`task must be non-nil`)
	}
	if time == nil {
		return event, errors.New(`time must be non-nil`)
	}

	// don't update the keys
	delete(fields, "task")
	delete(fields, "time")

	// prepare the slices
	c, i, v := querySlices(fields, 2)

	// sql query
	sqlstr := `UPDATE public.events SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "task" = $1 AND "time" = $2 ` +
		`RETURNING "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"`

	// run query
	values := []interface{}{}
	values = append(values, task)
	values = append(values, time)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := e.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
	if err != nil {
		return event, err
	}

	return event, nil
}
