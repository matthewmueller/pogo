package tempo

// GENERATED BY POGO. DO NOT EDIT.

// FindMany find many Events by a condition
func (e *Events) FindMany(condition string, params ...interface{}) (events []Event, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"
    FROM public.events
    WHERE ` + condition

	DBLog(sqlstr, params...)
	rows, err := e.DB.Query(sqlstr, params...)
	if err != nil {
		return events, err
	}
	defer rows.Close()

	for rows.Next() {
		event := Event{}
		err = rows.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
		if err != nil {
			return events, err
		}
		events = append(events, event)
	}

	if rows.Err() != nil {
		return events, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(events) == 0 {
		return make([]Event, 0), nil
	}

	return events, nil
}
