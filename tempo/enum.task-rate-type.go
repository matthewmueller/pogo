package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// TaskRateType is the 'task_rate_type' enum type from schema 'public'.
type TaskRateType uint16

const (

	// TaskRateTypeCron is the 'CRON' TaskRateType.
	TaskRateTypeCron = TaskRateType(1)

	// TaskRateTypeRrule is the 'RRULE' TaskRateType.
	TaskRateTypeRrule = TaskRateType(2)

	// TaskRateTypeNlp is the 'NLP' TaskRateType.
	TaskRateTypeNlp = TaskRateType(3)
)

// String returns the string value of the TaskRateType.
func (trt TaskRateType) String() string {
	var enumVal string

	switch trt {

	case TaskRateTypeCron:
		enumVal = "CRON"

	case TaskRateTypeRrule:
		enumVal = "RRULE"

	case TaskRateTypeNlp:
		enumVal = "NLP"

	}

	return enumVal
}

// MarshalText marshals TaskRateType into text.
func (trt TaskRateType) MarshalText() ([]byte, error) {
	return []byte(trt.String()), nil
}

// UnmarshalText unmarshals TaskRateType from text.
func (trt *TaskRateType) UnmarshalText(text []byte) error {
	switch string(text) {

	case "CRON":
		*trt = TaskRateTypeCron

	case "RRULE":
		*trt = TaskRateTypeRrule

	case "NLP":
		*trt = TaskRateTypeNlp

	default:
		return errors.New("invalid TaskRateType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TaskRateType.
func (trt TaskRateType) Value() (driver.Value, error) {
	return trt.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for TaskRateType.
func (trt *TaskRateType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid TaskRateType")
	}

	return trt.UnmarshalText(buf)
}

// ScanPgx into PGX
func (trt *TaskRateType) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return trt.UnmarshalText(vr.ReadBytes(vr.Len()))
}
