package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the SchemaMigration by the Primary Key
func (sm *SchemaMigrations) Upsert(smsm *SchemaMigration, action string) (schemamigration SchemaMigration, err error) {
	fields := sm.getFields(smsm)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return schemamigration, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.schema_migrations (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("version") ` +
		upsertAction + ` ` +
		`RETURNING "version"`

		// run query
	DBLog(sqlstr, v...)
	row := sm.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&schemamigration.Version)
	if err != nil && err != pgx.ErrNoRows {
		return schemamigration, err
	}

	return schemamigration, nil
}
