package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
 "database/sql/driver"
 "errors"
)

// EventStatus is the 'event_status' enum type from schema 'public'.
type EventStatus uint16

const (

 // EventStatusSuccess is the 'SUCCESS' EventStatus.
 EventStatusSuccess = EventStatus(1)

 // EventStatusRunning is the 'RUNNING' EventStatus.
 EventStatusRunning = EventStatus(2)

 // EventStatusFailure is the 'FAILURE' EventStatus.
 EventStatusFailure = EventStatus(3)

 // EventStatusSkipped is the 'SKIPPED' EventStatus.
 EventStatusSkipped = EventStatus(4)
)

// String returns the string value of the EventStatus.
func (es EventStatus) String() string {
 var enumVal string

 switch es {

 case EventStatusSuccess:
  enumVal = "SUCCESS"

 case EventStatusRunning:
  enumVal = "RUNNING"

 case EventStatusFailure:
  enumVal = "FAILURE"

 case EventStatusSkipped:
  enumVal = "SKIPPED"

 }

 return enumVal
}

// MarshalText marshals EventStatus into text.
func (es EventStatus) MarshalText() ([]byte, error) {
 return []byte(es.String()), nil
}

// UnmarshalText unmarshals EventStatus from text.
func (es *EventStatus) UnmarshalText(text []byte) error {
 switch string(text) {

 case "SUCCESS":
  *es = EventStatusSuccess

 case "RUNNING":
  *es = EventStatusRunning

 case "FAILURE":
  *es = EventStatusFailure

 case "SKIPPED":
  *es = EventStatusSkipped

 default:
  return errors.New("invalid EventStatus")
 }

 return nil
}

// Value satisfies the sql/driver.Valuer interface for EventStatus.
func (es EventStatus) Value() (driver.Value, error) {
 return es.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for EventStatus.
func (es *EventStatus) Scan(src interface{}) error {
 buf, ok := src.([]byte)
 if !ok {
  return errors.New("invalid EventStatus")
 }

 return es.UnmarshalText(buf)
}
