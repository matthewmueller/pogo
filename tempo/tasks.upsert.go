package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the Task by the Primary Key
func (t *Tasks) Upsert(tt *Task, action string) (task Task, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return task, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.tasks (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "key", "target", "rate", "offset", "timezone", "rate_type", "rate_options", "status", "target_type", "target_options", "user", "meta", "refreshed_at", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&task.ID, &task.Key, &task.Target, &task.Rate, &task.Offset, &task.Timezone, &task.RateType, &task.RateOptions, &task.Status, &task.TargetType, &task.TargetOptions, &task.User, &task.Meta, &task.RefreshedAt, &task.CreatedAt, &task.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return task, err
	}

	return task, nil
}

// UpsertByKeyAndUser find a Task
func (t *Tasks) UpsertByKeyAndUser(tt *Task, action string) (task Task, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return task, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.tasks (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("key", "user") ` +
		upsertAction + ` ` +
		`RETURNING "id", "key", "target", "rate", "offset", "timezone", "rate_type", "rate_options", "status", "target_type", "target_options", "user", "meta", "refreshed_at", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&task.ID, &task.Key, &task.Target, &task.Rate, &task.Offset, &task.Timezone, &task.RateType, &task.RateOptions, &task.Status, &task.TargetType, &task.TargetOptions, &task.User, &task.Meta, &task.RefreshedAt, &task.CreatedAt, &task.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return task, err
	}

	return task, nil
}
