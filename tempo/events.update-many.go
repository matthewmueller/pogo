package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (e *Events) UpdateMany(ee *Event, condition string, params ...interface{}) (events []Event, err error) {
	fields := e.getFields(ee)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.events SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := e.DB.Query(sqlstr, values...)
	if err != nil {
		return events, err
	}
	defer rows.Close()

	for rows.Next() {
		event := Event{}
		err = rows.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
		if err != nil {
			return events, err
		}
		events = append(events, event)
	}

	if rows.Err() != nil {
		return events, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(events) == 0 {
		return make([]Event, 0), nil
	}

	return events, nil
}
