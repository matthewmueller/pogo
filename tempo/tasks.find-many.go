package tempo

// GENERATED BY POGO. DO NOT EDIT.

// FindMany find many Tasks by a condition
func (t *Tasks) FindMany(condition string, params ...interface{}) (tasks []Task, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "key", "target", "rate", "offset", "timezone", "rate_type", "rate_options", "status", "target_type", "target_options", "user", "meta", "refreshed_at", "created_at", "updated_at"
    FROM public.tasks
    WHERE ` + condition

	DBLog(sqlstr, params...)
	rows, err := t.DB.Query(sqlstr, params...)
	if err != nil {
		return tasks, err
	}
	defer rows.Close()

	for rows.Next() {
		task := Task{}
		err = rows.Scan(&task.ID, &task.Key, &task.Target, &task.Rate, &task.Offset, &task.Timezone, &task.RateType, &task.RateOptions, &task.Status, &task.TargetType, &task.TargetOptions, &task.User, &task.Meta, &task.RefreshedAt, &task.CreatedAt, &task.UpdatedAt)
		if err != nil {
			return tasks, err
		}
		tasks = append(tasks, task)
	}

	if rows.Err() != nil {
		return tasks, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(tasks) == 0 {
		return make([]Task, 0), nil
	}

	return tasks, nil
}
