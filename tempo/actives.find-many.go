package tempo

// GENERATED BY POGO. DO NOT EDIT.

// FindMany find many Actives by a condition
func (a *Actives) FindMany(condition string, params ...interface{}) (actives []Active, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "token", "state", "used", "created_at", "updated_at"
    FROM public.actives
    WHERE ` + condition

	DBLog(sqlstr, params...)
	rows, err := a.DB.Query(sqlstr, params...)
	if err != nil {
		return actives, err
	}
	defer rows.Close()

	for rows.Next() {
		active := Active{}
		err = rows.Scan(&active.ID, &active.Token, &active.State, &active.Used, &active.CreatedAt, &active.UpdatedAt)
		if err != nil {
			return actives, err
		}
		actives = append(actives, active)
	}

	if rows.Err() != nil {
		return actives, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(actives) == 0 {
		return make([]Active, 0), nil
	}

	return actives, nil
}
