package tempo

// GENERATED BY POGO. DO NOT EDIT.

// FindMany find many SchemaMigrations by a condition
func (sm *SchemaMigrations) FindMany(condition string, params ...interface{}) (schemamigrations []SchemaMigration, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "version"
    FROM public.schema_migrations
    WHERE ` + condition

	DBLog(sqlstr, params...)
	rows, err := sm.DB.Query(sqlstr, params...)
	if err != nil {
		return schemamigrations, err
	}
	defer rows.Close()

	for rows.Next() {
		schemamigration := SchemaMigration{}
		err = rows.Scan(&schemamigration.Version)
		if err != nil {
			return schemamigrations, err
		}
		schemamigrations = append(schemamigrations, schemamigration)
	}

	if rows.Err() != nil {
		return schemamigrations, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(schemamigrations) == 0 {
		return make([]SchemaMigration, 0), nil
	}

	return schemamigrations, nil
}
