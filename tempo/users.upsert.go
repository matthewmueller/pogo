package tempo

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the User by the Primary Key
func (u *Users) Upsert(uu *User, action string) (user User, err error) {
	fields := u.getFields(uu)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return user, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.users (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"`

		// run query
	DBLog(sqlstr, v...)
	row := u.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil && err != pgx.ErrNoRows {
		return user, err
	}

	return user, nil
}

// UpsertByEmail find a User
func (u *Users) UpsertByEmail(uu *User, action string) (user User, err error) {
	fields := u.getFields(uu)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return user, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.users (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("email") ` +
		upsertAction + ` ` +
		`RETURNING "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"`

		// run query
	DBLog(sqlstr, v...)
	row := u.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil && err != pgx.ErrNoRows {
		return user, err
	}

	return user, nil
}

// UpsertByGithubAccessToken find a User
func (u *Users) UpsertByGithubAccessToken(uu *User, action string) (user User, err error) {
	fields := u.getFields(uu)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return user, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.users (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("githubaccesstoken") ` +
		upsertAction + ` ` +
		`RETURNING "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"`

		// run query
	DBLog(sqlstr, v...)
	row := u.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil && err != pgx.ErrNoRows {
		return user, err
	}

	return user, nil
}

// UpsertByToken find a User
func (u *Users) UpsertByToken(uu *User, action string) (user User, err error) {
	fields := u.getFields(uu)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return user, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.users (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("token") ` +
		upsertAction + ` ` +
		`RETURNING "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"`

		// run query
	DBLog(sqlstr, v...)
	row := u.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil && err != pgx.ErrNoRows {
		return user, err
	}

	return user, nil
}
