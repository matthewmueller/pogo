package tempo

import (
	"time"

	"github.com/matthewmueller/pgx"
	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a Event by "id"
func (e *Events) Find(id *uuid.UUID) (event Event, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"
    FROM public.events
    WHERE "id" = $1`

	DBLog(sqlstr, id)
	row := e.DB.QueryRow(sqlstr, id)
	err = row.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
	if err != nil {
		if err == pgx.ErrNoRows {
			return event, ErrEventNotFound
		}
		return event, err
	}

	return event, nil
}

// FindByTaskAndTime find a Event
func (e *Events) FindByTaskAndTime(task *uuid.UUID, time *time.Time) (event Event, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "time", "task", "created_at", "triggered_at", "status", "response", "attempts"
		FROM public.events
		WHERE "task" = $1 AND "time" = $2`

	DBLog(sqlstr, task, time)
	row := e.DB.QueryRow(sqlstr, task, time)
	err = row.Scan(&event.ID, &event.Time, &event.Task, &event.CreatedAt, &event.TriggeredAt, &event.Status, &event.Response, &event.Attempts)
	if err != nil {
		if err == pgx.ErrNoRows {
			return event, ErrEventNotFound
		}
		return event, err
	}

	return event, nil
}
