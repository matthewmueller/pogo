package tempo

import (
	"github.com/matthewmueller/pgx"
	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a User by "id"
func (u *Users) Find(id *uuid.UUID) (user User, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"
    FROM public.users
    WHERE "id" = $1`

	DBLog(sqlstr, id)
	row := u.DB.QueryRow(sqlstr, id)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil {
		if err == pgx.ErrNoRows {
			return user, ErrUserNotFound
		}
		return user, err
	}

	return user, nil
}

// FindByEmail find a User
func (u *Users) FindByEmail(email *string) (user User, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"
		FROM public.users
		WHERE "email" = $1`

	DBLog(sqlstr, email)
	row := u.DB.QueryRow(sqlstr, email)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil {
		if err == pgx.ErrNoRows {
			return user, ErrUserNotFound
		}
		return user, err
	}

	return user, nil
}

// FindByGithubAccessToken find a User
func (u *Users) FindByGithubAccessToken(githubaccesstoken *string) (user User, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"
		FROM public.users
		WHERE "github_access_token" = $1`

	DBLog(sqlstr, githubaccesstoken)
	row := u.DB.QueryRow(sqlstr, githubaccesstoken)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil {
		if err == pgx.ErrNoRows {
			return user, ErrUserNotFound
		}
		return user, err
	}

	return user, nil
}

// FindByToken find a User
func (u *Users) FindByToken(token *uuid.UUID) (user User, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "role", "email", "stripe_id", "active", "github_access_token", "scope", "free_events", "cost_per_event", "total_events", "paid_events", "token", "created_at", "updated_at", "free_tasks"
		FROM public.users
		WHERE "token" = $1`

	DBLog(sqlstr, token)
	row := u.DB.QueryRow(sqlstr, token)
	err = row.Scan(&user.ID, &user.Role, &user.Email, &user.StripeID, &user.Active, &user.GithubAccessToken, &user.Scope, &user.FreeEvents, &user.CostPerEvent, &user.TotalEvents, &user.PaidEvents, &user.Token, &user.CreatedAt, &user.UpdatedAt, &user.FreeTasks)
	if err != nil {
		if err == pgx.ErrNoRows {
			return user, ErrUserNotFound
		}
		return user, err
	}

	return user, nil
}
