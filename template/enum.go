package template

import (
	"fmt"

	gen "github.com/matthewmueller/go-gen"
	"github.com/matthewmueller/pogo/database"
)

// Enum struct
type Enum struct {
	Package string
	Schema  *database.Schema
	Enum    *database.Enum
}

// Generate the base template
func (e *Enum) Generate() (string, error) {
	type V map[string]interface{}

	template := gen.MustCreate("many-to-many")
	lines := ""

	values := ""
	for _, value := range e.Enum.Values {
		values += template(`
			// {{.Name}}{{.Label}} is the '{{.label}}' {{.Name}}.
			{{.Name}}{{.Label}} = {{.Name}}("{{.label}}")
		`, V{
			"Name":  gen.Pascal(e.Enum.Name),
			"Label": gen.Pascal(value.Label),
			"label": value.Label,
		})
	}

	// enum
	lines += template(`
		package enum

		// GENERATED BY POGO. DO NOT EDIT.

		{{/*************************************************************************/}}
		{{/* Our enum type */}}
		{{/*************************************************************************/}}

		// {{.Name}} is the "{{.enum}}" enum type from "{{.schema}}".
		type {{.Name}} string

		{{/*************************************************************************/}}
		{{/* Our enum type */}}
		{{/*************************************************************************/}}

		const (
			{{.values}}
		)

		{{/*************************************************************************/}}
		{{/* Satisfy the sql/driver.Valuer interface */}}
		{{/*************************************************************************/}}

		// Value satisfies the sql/driver.Valuer interface for {{.Name}}.
		func ({{.name}} {{.Name}}) Value() (driver.Value, error) {
			return string({{.name}}), nil
		}

		{{/*************************************************************************/}}
		{{/* Satisfy the pgtypes.EncodeBinary interface */}}
		{{/*************************************************************************/}}

		// Satisfy the pgtypes.EncodeBinary interface for {{.Name}}.
		func ({{.name}} {{.Name}}) EncodeBinary(_ *pgtype.ConnInfo, b []byte) ([]byte, error) {
			return append(b, []byte({{.name}})...), nil
		}	
		`, V{
		"enum":   e.Enum.Name,
		"Name":   gen.Pascal(e.Enum.Name),
		"name":   gen.Camel(e.Enum.Name),
		"schema": e.Schema.Name,
		"values": values,
	})

	out, err := gen.Format(lines)
	if err != nil {
		fmt.Println(lines)
		return "", err
	}

	return out, nil
}
