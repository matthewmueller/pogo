package answer

import (
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/pogo/test/jack/pogo"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrAnswerNotFound returned if the answers is not found
var ErrAnswerNotFound = errors.New("answer not found")

// Answer result data for "jack"."answers"
type Answer struct {
	ID         int    `json:"id,omitempty"`
	QuestionID int    `json:"question_id,omitempty"`
	TeammateID int    `json:"teammate_id,omitempty"`
	Answer     string `json:"answer,omitempty"`
}

// New "jack"."answers" input
func New() *Input {
	return &Input{}
}

// Input data for "jack"."answers"
type Input struct {
	id         *int
	questionID *int
	teammateID *int
	answer     *string
}

// ID sets the "id"
func (a *Input) ID(id int) *Input {
	a.id = &id
	return a
}

// QuestionID sets the "question_id"
func (a *Input) QuestionID(questionID int) *Input {
	a.questionID = &questionID
	return a
}

// TeammateID sets the "teammate_id"
func (a *Input) TeammateID(teammateID int) *Input {
	a.teammateID = &teammateID
	return a
}

// Answer sets the "answer"
func (a *Input) Answer(answer string) *Input {
	a.answer = &answer
	return a
}

// MarshalJSON marshals the "answer" into JSON
func (a *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(a)
}

// UnmarshalJSON unmarshals json to a "answer"
func (a *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, a)
}

func (a *Input) String() string {
	return "answers"
}

func (a *Input) columns() map[string]interface{} {
	columns := make(map[string]interface{})

	if a.id != nil {
		columns["id"] = *a.id
	}

	if a.questionID != nil {
		columns["question_id"] = *a.questionID
	}

	if a.teammateID != nil {
		columns["teammate_id"] = *a.teammateID
	}

	if a.answer != nil {
		columns["answer"] = *a.answer
	}

	return columns
}

// NewFilter creates a new filter
func NewFilter() *Filter {
	return &Filter{}
}

// Filter filters for "jack"."answers"
type Filter struct {
	formats []string
	values  []interface{}
}

var _ pogo.Condition = (*Filter)(nil)

// Clause fn
func (f *Filter) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "WHERE",
		Format: strings.Join(f.formats, " AND "),
		Params: f.values,
	}
}

// And filter
// func (f *Filter) And(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " AND "))
//   return f
// }

// Or filter
// func (f *Filter) Or(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " OR "))
//   return f
// }

// ID id equals
func (f *Filter) ID(v int) *Filter {
	f.formats = append(f.formats, `id = %s`)
	f.values = append(f.values, v)
	return f
}

// IDNot id doesn't equal
func (f *Filter) IDNot(v int) *Filter {
	f.formats = append(f.formats, `id != %s`)
	f.values = append(f.values, v)
	return f
}

// IDLt id is less than
func (f *Filter) IDLt(v int) *Filter {
	f.formats = append(f.formats, `id < %s`)
	f.values = append(f.values, v)
	return f
}

// IDLte id is less than or equal
func (f *Filter) IDLte(v int) *Filter {
	f.formats = append(f.formats, `id <= %s`)
	f.values = append(f.values, v)
	return f
}

// IDGt id is greater than
func (f *Filter) IDGt(v int) *Filter {
	f.formats = append(f.formats, `id > %s`)
	f.values = append(f.values, v)
	return f
}

// IDGte id is greater than or equal
func (f *Filter) IDGte(v int) *Filter {
	f.formats = append(f.formats, `id >= %s`)
	f.values = append(f.values, v)
	return f
}

// IDIn id is in
func (f *Filter) IDIn(v int) *Filter {
	f.formats = append(f.formats, `id IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// IDNotIn id is not in
func (f *Filter) IDNotIn(v int) *Filter {
	f.formats = append(f.formats, `id NOT IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// QuestionID question_id equals
func (f *Filter) QuestionID(v int) *Filter {
	f.formats = append(f.formats, `question_id = %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDNot question_id doesn't equal
func (f *Filter) QuestionIDNot(v int) *Filter {
	f.formats = append(f.formats, `question_id != %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDLt question_id is less than
func (f *Filter) QuestionIDLt(v int) *Filter {
	f.formats = append(f.formats, `question_id < %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDLte question_id is less than or equal
func (f *Filter) QuestionIDLte(v int) *Filter {
	f.formats = append(f.formats, `question_id <= %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDGt question_id is greater than
func (f *Filter) QuestionIDGt(v int) *Filter {
	f.formats = append(f.formats, `question_id > %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDGte question_id is greater than or equal
func (f *Filter) QuestionIDGte(v int) *Filter {
	f.formats = append(f.formats, `question_id >= %s`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDIn question_id is in
func (f *Filter) QuestionIDIn(v int) *Filter {
	f.formats = append(f.formats, `question_id IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// QuestionIDNotIn question_id is not in
func (f *Filter) QuestionIDNotIn(v int) *Filter {
	f.formats = append(f.formats, `question_id NOT IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// TeammateID teammate_id equals
func (f *Filter) TeammateID(v int) *Filter {
	f.formats = append(f.formats, `teammate_id = %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDNot teammate_id doesn't equal
func (f *Filter) TeammateIDNot(v int) *Filter {
	f.formats = append(f.formats, `teammate_id != %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDLt teammate_id is less than
func (f *Filter) TeammateIDLt(v int) *Filter {
	f.formats = append(f.formats, `teammate_id < %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDLte teammate_id is less than or equal
func (f *Filter) TeammateIDLte(v int) *Filter {
	f.formats = append(f.formats, `teammate_id <= %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDGt teammate_id is greater than
func (f *Filter) TeammateIDGt(v int) *Filter {
	f.formats = append(f.formats, `teammate_id > %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDGte teammate_id is greater than or equal
func (f *Filter) TeammateIDGte(v int) *Filter {
	f.formats = append(f.formats, `teammate_id >= %s`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDIn teammate_id is in
func (f *Filter) TeammateIDIn(v int) *Filter {
	f.formats = append(f.formats, `teammate_id IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// TeammateIDNotIn teammate_id is not in
func (f *Filter) TeammateIDNotIn(v int) *Filter {
	f.formats = append(f.formats, `teammate_id NOT IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// Answer answer equals
func (f *Filter) Answer(v string) *Filter {
	f.formats = append(f.formats, `answer = %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerNot answer doesn't equal
func (f *Filter) AnswerNot(v string) *Filter {
	f.formats = append(f.formats, `answer != %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerContains answer contains
func (f *Filter) AnswerContains(v string) *Filter {
	f.formats = append(f.formats, `answer LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// AnswerNotContains answer doesn't contain
func (f *Filter) AnswerNotContains(v string) *Filter {
	f.formats = append(f.formats, `answer NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// AnswerStartsWith answer starts with
func (f *Filter) AnswerStartsWith(v string) *Filter {
	f.formats = append(f.formats, `answer LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// AnswerNotStartsWith answer doesn't start with
func (f *Filter) AnswerNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `answer NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// AnswerEndsWith answer ends with
func (f *Filter) AnswerEndsWith(v string) *Filter {
	f.formats = append(f.formats, `answer LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerNotEndsWith answer doesn't end with
func (f *Filter) AnswerNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `answer NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerLt answer is less than
func (f *Filter) AnswerLt(v string) *Filter {
	f.formats = append(f.formats, `answer < %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerLte answer is less than or equal
func (f *Filter) AnswerLte(v string) *Filter {
	f.formats = append(f.formats, `answer <= %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerGt answer is greater than
func (f *Filter) AnswerGt(v string) *Filter {
	f.formats = append(f.formats, `answer > %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerGte answer is greater than or equal
func (f *Filter) AnswerGte(v string) *Filter {
	f.formats = append(f.formats, `answer >= %s`)
	f.values = append(f.values, v)
	return f
}

// AnswerIn answer is in
func (f *Filter) AnswerIn(v ...string) *Filter {
	var rs []string
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`answer IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// AnswerNotIn answer is not in
func (f *Filter) AnswerNotIn(v string) *Filter {
	f.formats = append(f.formats, `answer NOT IN (%s)`)
	f.values = append(f.values, v)
	return f
}

// OrderBy specificies the ORDERBy BY <order>
type OrderBy string

const (
	// Asc sorts by ascending order
	ASC OrderBy = "ASC"

	// Desc sorts by descending order
	DESC OrderBy = "DESC"
)

// NewOrder fn
func NewOrder() *Order {
	return &Order{}
}

// Order orders the given fields
type Order struct {
	formats []string
}

// Clause fn
func (o *Order) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "ORDER BY",
		Format: strings.Join(o.formats, ", "),
	}
}

// ID sorts `id` by an expression
func (o *Order) ID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"id" %s`, order))
	return o
}

// QuestionID sorts `question_id` by an expression
func (o *Order) QuestionID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"question_id" %s`, order))
	return o
}

// TeammateID sorts `teammate_id` by an expression
func (o *Order) TeammateID(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"teammate_id" %s`, order))
	return o
}

// Answer sorts `answer` by an expression
func (o *Order) Answer(order OrderBy) *Order {
	o.formats = append(o.formats, fmt.Sprintf(`"answer" %s`, order))
	return o
}

// Insert a "answers" into the "jack"."answers"
func Insert(db pogo.DB, answer *Input) (*Answer, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(answer.columns(), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
    INSERT INTO "jack"."answers" (` + strings.Join(_c, ", ") + `)
    VALUES (` + strings.Join(_i, ", ") + `)
    RETURNING "id", "question_id", "teammate_id", "answer"
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _answer Answer
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		return nil, e
	}

	return &_answer, nil
}

// Find a `Answer` by some conditions.
func Find(db pogo.DB, conds ...pogo.Condition) (*Answer, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "question_id", "teammate_id", "answer" ` +
		`FROM "jack"."answers" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _answer Answer
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrAnswerNotFound
		}
		return nil, e
	}

	return &_answer, nil
}

// FindByID a `Answer` by some conditions.
func FindByID(db pogo.DB, id int) (*Answer, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "question_id", "teammate_id", "answer"
    FROM "jack"."answers"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, &id)
	}

	var _answer Answer
	row := db.QueryRow(sqlstr, &id)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrAnswerNotFound
		}
		return nil, e
	}

	return &_answer, nil
}

// FindMany finds many "jack"."answers" by a condition
func FindMany(db pogo.DB, conds ...pogo.Condition) ([]*Answer, error) {
	var answers []*Answer

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return answers, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "id", "question_id", "teammate_id", "answer" ` +
		`FROM "jack"."answers" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return answers, err
	}
	defer rows.Close()

	for rows.Next() {
		var _answer Answer
		if e := rows.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
			if e == pgx.ErrNoRows {
				return answers, ErrAnswerNotFound
			}
			return answers, err
		}
		answers = append(answers, &_answer)
	}
	if rows.Err() != nil {
		return answers, rows.Err()
	}

	return answers, nil
}

// UpdateByID a "answer" in "jack"."answers" by its "id"
func UpdateByID(db pogo.DB, id int, answer *Input) (*Answer, error) {
	fields := answer.columns()

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// sql query
	sqlstr := `UPDATE "jack"."answers" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "question_id", "teammate_id", "answer"`

	// setup query
	values := append([]interface{}{&id}, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _answer Answer
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrAnswerNotFound
		}
		return nil, e
	}

	return &_answer, nil
}

// Delete `Answer`s by some conditions. Returns the first result.
func Delete(db pogo.DB, conds ...pogo.Condition) (*Answer, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."answers" ` +
		_s + ` ` +
		`RETURNING "id", "question_id", "teammate_id", "answer"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _answer Answer
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrAnswerNotFound
		}
		return nil, e
	}

	return &_answer, nil
}

// DeleteMany `Answer`s by some conditions, returning all results.
func DeleteMany(db pogo.DB, conds ...pogo.Condition) ([]*Answer, error) {
	var answers []*Answer

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return answers, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "jack"."answers" ` +
		_s + ` ` +
		`RETURNING "id", "question_id", "teammate_id", "answer"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return answers, err
	}
	defer rows.Close()

	for rows.Next() {
		var _answer Answer
		if e := rows.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
			if e == pgx.ErrNoRows {
				return answers, ErrAnswerNotFound
			}
			return answers, err
		}
		answers = append(answers, &_answer)
	}
	if rows.Err() != nil {
		return answers, rows.Err()
	}

	return answers, nil
}

// DeleteByID a "answer" from the "jack"."answers" table
func DeleteByID(db pogo.DB, id int) (*Answer, error) {
	// sql delete query
	sqlstr := `DELETE FROM "jack"."answers" ` +
		`WHERE "id" = $1 ` +
		`RETURNING "id", "question_id", "teammate_id", "answer"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	// run the query
	var _answer Answer
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_answer.ID, &_answer.QuestionID, &_answer.TeammateID, &_answer.Answer); e != nil {
		if e == pgx.ErrNoRows {
			return nil, ErrAnswerNotFound
		}
		return nil, e
	}

	return &_answer, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
