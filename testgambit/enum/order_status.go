package enum

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// OrderStatus is the `order_status` enum type from `1`.
type OrderStatus uint16

const (

	// OrderStatusOpen is the 'OPEN' OrderStatus.
	OrderStatusOpen = OrderStatus(1)

	// OrderStatusDone is the 'DONE' OrderStatus.
	OrderStatusDone = OrderStatus(2)
)

// String returns the string value of the `OrderStatus`
func (orderstatus OrderStatus) String() string {
	var enumVal string

	switch orderstatus {

	case OrderStatusOpen:
		enumVal = "OPEN"

	case OrderStatusDone:
		enumVal = "DONE"

	}

	return enumVal
}

// MarshalText marshals OrderStatus into text.
func (orderstatus OrderStatus) MarshalText() ([]byte, error) {
	return []byte(orderstatus.String()), nil
}

// UnmarshalText unmarshals OrderStatus from text.
func (orderstatus *OrderStatus) UnmarshalText(text []byte) error {
	switch string(text) {

	case "OPEN":
		*orderstatus = OrderStatusOpen

	case "DONE":
		*orderstatus = OrderStatusDone

	default:
		return errors.New("invalid OrderStatus")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for OrderStatus.
func (orderstatus OrderStatus) Value() (driver.Value, error) {
	return orderstatus.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for OrderStatus.
func (orderstatus *OrderStatus) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid OrderStatus")
	}

	return orderstatus.UnmarshalText(buf)
}

// ScanPgx into PGX
func (orderstatus *OrderStatus) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return orderstatus.UnmarshalText(vr.ReadBytes(vr.Len()))
}
