package enum

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// OrderSide is the `order_side` enum type from `1`.
type OrderSide uint16

const (

	// OrderSideBuy is the 'BUY' OrderSide.
	OrderSideBuy = OrderSide(1)

	// OrderSideSell is the 'SELL' OrderSide.
	OrderSideSell = OrderSide(2)
)

// String returns the string value of the `OrderSide`
func (orderside OrderSide) String() string {
	var enumVal string

	switch orderside {

	case OrderSideBuy:
		enumVal = "BUY"

	case OrderSideSell:
		enumVal = "SELL"

	}

	return enumVal
}

// MarshalText marshals OrderSide into text.
func (orderside OrderSide) MarshalText() ([]byte, error) {
	return []byte(orderside.String()), nil
}

// UnmarshalText unmarshals OrderSide from text.
func (orderside *OrderSide) UnmarshalText(text []byte) error {
	switch string(text) {

	case "BUY":
		*orderside = OrderSideBuy

	case "SELL":
		*orderside = OrderSideSell

	default:
		return errors.New("invalid OrderSide")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for OrderSide.
func (orderside OrderSide) Value() (driver.Value, error) {
	return orderside.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for OrderSide.
func (orderside *OrderSide) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid OrderSide")
	}

	return orderside.UnmarshalText(buf)
}

// ScanPgx into PGX
func (orderside *OrderSide) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return orderside.UnmarshalText(vr.ReadBytes(vr.Len()))
}
