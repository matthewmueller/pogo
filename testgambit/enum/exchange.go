package enum

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// Exchange is the `exchange` enum type from `1`.
type Exchange uint16

const (

	// ExchangeGdax is the 'GDAX' Exchange.
	ExchangeGdax = Exchange(1)
)

// String returns the string value of the `Exchange`
func (exchange Exchange) String() string {
	var enumVal string

	switch exchange {

	case ExchangeGdax:
		enumVal = "GDAX"

	}

	return enumVal
}

// MarshalText marshals Exchange into text.
func (exchange Exchange) MarshalText() ([]byte, error) {
	return []byte(exchange.String()), nil
}

// UnmarshalText unmarshals Exchange from text.
func (exchange *Exchange) UnmarshalText(text []byte) error {
	switch string(text) {

	case "GDAX":
		*exchange = ExchangeGdax

	default:
		return errors.New("invalid Exchange")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Exchange.
func (exchange Exchange) Value() (driver.Value, error) {
	return exchange.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Exchange.
func (exchange *Exchange) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Exchange")
	}

	return exchange.UnmarshalText(buf)
}

// ScanPgx into PGX
func (exchange *Exchange) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return exchange.UnmarshalText(vr.ReadBytes(vr.Len()))
}
