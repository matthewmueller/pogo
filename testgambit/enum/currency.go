package enum

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// Currency is the `currency` enum type from `1`.
type Currency uint16

const (

	// CurrencyUsdBtc is the 'USD-BTC' Currency.
	CurrencyUsdBtc = Currency(1)

	// CurrencyBtcUsd is the 'BTC-USD' Currency.
	CurrencyBtcUsd = Currency(2)

	// CurrencyUsdEth is the 'USD-ETH' Currency.
	CurrencyUsdEth = Currency(3)

	// CurrencyEthUsd is the 'ETH-USD' Currency.
	CurrencyEthUsd = Currency(4)
)

// String returns the string value of the `Currency`
func (currency Currency) String() string {
	var enumVal string

	switch currency {

	case CurrencyUsdBtc:
		enumVal = "USD-BTC"

	case CurrencyBtcUsd:
		enumVal = "BTC-USD"

	case CurrencyUsdEth:
		enumVal = "USD-ETH"

	case CurrencyEthUsd:
		enumVal = "ETH-USD"

	}

	return enumVal
}

// MarshalText marshals Currency into text.
func (currency Currency) MarshalText() ([]byte, error) {
	return []byte(currency.String()), nil
}

// UnmarshalText unmarshals Currency from text.
func (currency *Currency) UnmarshalText(text []byte) error {
	switch string(text) {

	case "USD-BTC":
		*currency = CurrencyUsdBtc

	case "BTC-USD":
		*currency = CurrencyBtcUsd

	case "USD-ETH":
		*currency = CurrencyUsdEth

	case "ETH-USD":
		*currency = CurrencyEthUsd

	default:
		return errors.New("invalid Currency")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Currency.
func (currency Currency) Value() (driver.Value, error) {
	return currency.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Currency.
func (currency *Currency) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Currency")
	}

	return currency.UnmarshalText(buf)
}

// ScanPgx into PGX
func (currency *Currency) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return currency.UnmarshalText(vr.ReadBytes(vr.Len()))
}
