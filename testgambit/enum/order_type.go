package enum

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// OrderType is the `order_type` enum type from `1`.
type OrderType uint16

const (

	// OrderTypeLimit is the 'LIMIT' OrderType.
	OrderTypeLimit = OrderType(1)
)

// String returns the string value of the `OrderType`
func (ordertype OrderType) String() string {
	var enumVal string

	switch ordertype {

	case OrderTypeLimit:
		enumVal = "LIMIT"

	}

	return enumVal
}

// MarshalText marshals OrderType into text.
func (ordertype OrderType) MarshalText() ([]byte, error) {
	return []byte(ordertype.String()), nil
}

// UnmarshalText unmarshals OrderType from text.
func (ordertype *OrderType) UnmarshalText(text []byte) error {
	switch string(text) {

	case "LIMIT":
		*ordertype = OrderTypeLimit

	default:
		return errors.New("invalid OrderType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for OrderType.
func (ordertype OrderType) Value() (driver.Value, error) {
	return ordertype.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for OrderType.
func (ordertype *OrderType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid OrderType")
	}

	return ordertype.UnmarshalText(buf)
}

// ScanPgx into PGX
func (ordertype *OrderType) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return ordertype.UnmarshalText(vr.ReadBytes(vr.Len()))
}
