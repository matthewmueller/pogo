package {{$.Package}}

import (
	"github.com/jackc/pgx"

	{{- range $table := $.Schema.Tables }}
	{{$table.Model | camel | lower}} "{{ import ($table.Model | camel | lower) }}"
	{{- end }}
)

// GENERATED BY POGO. DO NOT EDIT.

// DB is the common interface for database operations that can be used with
// types from schema `{{ .Schema.Name }}`. Note that this is 
// also copied into each of the table packages.
//
// This should work with database/sql.DB and database/sql.Tx.
type DB interface {
	Exec(string, ...interface{}) (pgx.CommandTag, error)
	Query(string, ...interface{}) (*pgx.Rows, error)
	QueryRow(string, ...interface{}) *pgx.Row
}

// opts is a private struct for holding our options.
type opts struct {
	Log func(log string, v ...interface{})
}

// Option function.
type Option func(*opts)

// New Client with all the models setup.
func New(db DB, options ...Option) *Client {
	var opts opts
	for _, o := range options {
		o(&opts)
	}

	return &Client{
		{{- range $table := $.Schema.Tables }}
		{{- $User := $table.Model | pascal }}
		{{- $user := $table.Model | camel | lower }}
		{{ $User }}: &{{$user}}.Model{
			DB:  db,
			Log: opts.Log,
		},
		{{- end }}
	}
}

// WithLogger option.
func WithLogger(log func(msg string, v ...interface{})) Option {
	return func(opts *opts) {
		opts.Log = log
	}
}

// Client contains all our models
type Client struct {
	{{- range $table := $.Schema.Tables }}
	{{- $User := $table.Model | pascal }}
	{{- $user := $table.Model | camel | lower }}
	{{ $User }} *{{$user}}.Model
	{{- end }}
}
