// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/many.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x61\x6b\xdb\x30\x14\xfc\x3c\xfd\x8a\x23\x04\x6a\x87\x4c\xfe\x3e\xe8\x87\x76\xf1\x4a\x61\xc4\x63\x09\x85\x31\xc6\x90\x9d\xe7\x54\xcc\x96\x3d\xc9\x0e\x04\x4d\xff\x7d\xd8\x72\x16\x1b\x02\x65\xd0\x16\x9a\x4f\x41\xba\x77\xef\xde\xdd\x93\xad\x8d\x16\x78\x10\x5a\x8a\xb4\x20\x83\x45\xe4\x1c\xb3\x16\xf3\x4f\xba\x95\x0d\x3e\x5c\x83\xc7\xaa\x2d\xf9\x5a\x94\x84\x3f\xa8\x85\xc9\x44\x81\x01\x93\x5f\xc4\x64\xa2\xa4\x1e\xc2\x6a\x91\xfd\x12\x7b\x02\xa9\xb6\x64\x2c\x8a\x70\x17\xaf\xe3\xaf\x37\xdb\x78\x85\xdb\x6f\xf8\x92\xdc\x25\x1c\xab\x04\xeb\x64\x8b\x78\x75\xbf\xe5\x8c\x75\x6a\x9e\xeb\xe7\x27\x89\x16\x48\x5a\xdd\x4b\x40\x73\xac\x09\xff\xce\x9f\xb3\x4f\x37\x9c\xb5\xde\x34\xe7\x20\x0d\x9a\x47\xc2\xcc\xda\xf9\xd9\x1a\xe7\x66\x23\x19\xb9\xae\x4a\x0f\xd8\x64\x8f\x54\x8a\x13\x84\xb3\xfe\x7a\x44\x66\x1a\x2d\xd5\xfe\x0d\x7b\x93\x55\xca\x34\x08\x18\x60\xed\x7b\x68\xa1\xf6\x84\xf9\x41\x14\xdd\xe6\x0c\xfe\x3c\x88\xa2\x25\xd3\x2d\x0d\xd0\xc1\x30\xbf\xa9\xeb\x82\x7a\xc4\x41\x14\xfc\xb3\x48\xa9\x98\xec\xdf\x09\x27\x2e\xe0\x86\xeb\x49\x26\xd6\x7a\xca\x73\x3a\x57\xd6\xfa\x6a\xe7\xae\x46\x40\x3e\x50\x5f\x28\xbc\x1e\x1d\x07\xb3\x73\xf9\x2c\x1c\x66\x23\xb5\xeb\x9a\x87\x2f\x14\xd6\x46\x34\xd2\xe4\xc7\x5e\xbd\xf9\x5d\x44\x3b\x2d\x0f\xa4\xbd\x79\x1a\x52\x35\xa4\x73\x91\xbd\xe0\x8a\xf7\x9d\x60\x7a\x19\x92\xcc\x93\x42\xf2\x4a\x4f\x9c\xcd\x5b\x95\x21\xb0\xd6\x7f\x39\x9c\x1b\x5d\x86\x9e\x3c\x08\x11\x8c\xd9\x96\x20\xad\x2b\x1d\xc2\x32\x40\x53\xd3\x6a\x35\x3c\x88\x11\x4d\xb8\x84\x92\x05\x73\xaf\x60\x7b\xbd\xef\x1e\x8a\xe1\xb1\xca\xaa\x1d\xdd\x4a\x25\xf4\xf1\x35\x9c\x9f\xf4\xdb\x4c\x02\x78\x42\xd2\x7f\x65\x30\xe6\x08\x7e\x62\xe1\xb9\xf9\xc7\x4a\xa9\x7b\x95\x57\x4b\xa4\xf8\xfe\x23\x3d\x36\x14\x22\xf0\x7f\x2e\x05\x24\xea\x9a\xd4\x2e\x48\x97\x03\x78\x1c\x15\xe7\xfc\x14\xd7\xbb\xbf\x01\x00\x00\xff\xff\x3b\x56\x37\x75\x7c\x06\x00\x00")

func enumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_enumGotmpl,
		"enum.gotmpl",
	)
}

func enumGotmpl() (*asset, error) {
	bytes, err := enumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xb6\x9a\x4c\x4b\x39\x0a\xd5\xb3\x3b\x3a\x38\x11\xe3\x3a\xe3\xc8\x8e\x24\x27\xd3\xf1\x64\x6c\x98\x5c\xc9\x68\x48\x80\x01\xc0\x28\x1a\x9a\xef\xde\xc1\x0f\x29\x50\x96\x6d\xd5\x49\x4f\xbd\x91\xdc\xdd\x0f\xfb\xf3\xed\x2e\x58\x55\xc3\x03\xf8\x48\x04\x25\x37\x19\x4a\x38\x18\xd6\x75\x50\x55\xf0\xe2\x42\xa2\x80\xc3\x11\x44\x73\x2d\x88\xde\xf3\x14\x33\x70\xb2\x72\x97\xec\x0e\x24\x65\xcb\x32\x23\x02\xee\x20\x21\x79\x57\x5d\x7a\xfa\x13\x92\x23\xdc\x41\x91\x95\x82\x64\xbe\x72\x50\x90\xe4\x0b\x59\x22\x54\x95\x33\xba\x83\x8c\xaf\x50\x68\xd9\x70\x08\xc7\xf1\x24\x9e\x1e\xcd\xe3\x31\xbc\xfe\x0b\xce\xcf\x8e\xcf\x22\x18\x9f\xc1\xe4\x6c\x0e\xf1\xf8\x64\x1e\x19\x9d\x58\x88\xaa\x32\xde\xd7\xf5\x84\xab\xb7\xbc\x64\x29\x08\x54\xa5\x60\x98\x02\x5d\x80\xba\xd5\xf8\x9e\x2b\x75\x0d\x54\x02\xe3\x0a\x16\x5a\x39\xf8\x46\xc4\x6e\x94\x11\xa0\x10\x5c\xc8\x68\x82\xab\xb0\xb7\x8d\xd1\x02\xf4\xfa\xc6\x91\xd6\xfe\x84\x15\xa5\x82\xdc\x24\x69\xc1\x05\xf4\xaa\xea\x45\x34\x4b\x6e\x31\x27\xce\xb6\x17\x99\x6f\x3e\x5c\x2f\x50\xeb\x02\xb7\x41\xa4\x12\x65\xa2\xa0\x0a\x00\xaa\xea\x15\x08\xc2\x96\x08\x2f\x12\x9e\x79\xd9\x7d\xc3\xb3\x32\x67\x52\xe7\x53\x6b\x19\x71\x93\xf2\x26\xd3\x70\xd0\x08\x8e\xf9\x5c\x9f\xe3\x94\x5f\x01\xb2\x54\xbf\xd4\xdd\x10\x7e\xd4\xfb\xe7\x38\xee\xfb\x5d\x10\x99\x90\xac\xae\x75\x3c\x74\xe1\x42\xe2\x6a\x52\x66\x3a\x1a\xa7\x6b\x43\xd1\xaf\x80\x99\xd4\x31\x1d\xec\x90\xd8\xf8\x76\x04\x3b\xc1\xd5\x9e\xc1\xc1\xd1\xf9\x49\xb0\x28\x59\xa2\x6d\xc2\xbe\x4e\x66\xa7\x4a\x3a\x4a\xcb\x38\xf8\xb5\x2b\xaa\xcc\x61\x55\xf5\x64\x02\x74\x79\xe2\x9c\x50\x2b\xee\x64\xa1\x11\xe3\xb6\xb8\x6d\x23\x5b\x39\x63\xae\x53\x8f\x4a\x1a\xd2\xeb\x40\xd0\x7e\xec\x59\xf7\x43\xd7\x67\x96\x10\xbe\xa3\x7d\x0f\x21\xdc\xd8\xc1\x56\x42\x77\xc7\xde\xa2\x46\x9e\xe5\xc8\xe4\xc2\xbd\x6d\x12\xd4\xea\x06\x3a\xaa\xb6\x24\x3a\x86\xf7\x44\xc8\x5b\x92\xbd\x9b\x9d\x4d\x20\xb7\xcf\x9b\x40\xac\x51\x0f\x28\x53\x1c\xb4\xca\xd3\x11\x79\x78\x61\x1f\xc2\xcb\xcf\x37\x6b\x85\x03\xdb\xd3\x7d\xbf\x68\x7f\x4b\xce\x22\xa7\xbd\x01\xec\x3b\x9e\x5c\xb0\xdc\x73\xac\x64\xad\x6b\xda\x0c\x14\x07\xe2\x3b\xf8\xb4\x5b\x1d\xbc\x30\x25\x8a\x80\x75\xad\x6f\x5d\xbb\xe7\x59\x6b\x60\x94\x07\xd0\xf5\xf0\xc9\xf3\x66\x4a\x50\xb6\x0c\xfb\xba\x27\x29\x5b\xfa\xf0\xbe\xdf\x0d\xd4\x12\x95\xe3\xe5\x63\xa0\x39\x29\x2e\x2d\xde\x67\xca\x14\x8a\x05\x49\xb0\xaa\x0d\x76\xe2\x58\x7d\x38\x82\x9c\x7c\xc1\x70\xb7\x6a\x3f\xb0\xd3\x6a\xbf\x91\xd6\x72\x7f\xd7\x70\x0b\x40\xcf\x88\x9d\x24\xfc\x65\x04\x8c\x66\xc6\xad\xd6\xb1\xcb\x9e\x37\x6b\xea\xba\xf7\x19\x46\x26\xbe\x7b\xd6\x01\x80\x3b\xbf\x21\x69\x9b\x38\x07\xe5\x18\xf2\xe9\x16\x05\xbe\xc9\x48\x29\x51\x6f\x16\xd2\x4c\x3f\xc5\xe1\x96\xb0\x34\x43\x58\x69\x0d\x48\x8c\x8a\xb4\xb3\xd2\x37\xf2\xa6\x65\xc2\x59\x4a\x15\xe5\xcc\x95\x2b\x00\x28\x88\x20\xb9\xd4\x11\x5c\xfa\x19\xf4\x0f\x07\x59\x60\x42\x17\x14\x6d\xc3\xb4\x20\xd2\xd6\xd4\xe8\x84\xdb\xd0\x83\x06\x39\x8a\x22\xbf\x32\x70\xe0\xfb\xe6\x0f\x37\xef\x7b\x93\x52\x07\x79\xb8\x79\x1c\x18\x89\x85\x3e\xdc\x3c\x0e\x4c\x3a\xad\xcf\x27\x4c\xa2\x50\xdd\xc6\xb1\x9d\xbd\xe7\xb6\x31\x51\x59\x94\x30\xbd\xd1\xb5\x8f\xce\xed\x55\xa2\xae\xa3\xf1\x6b\xaf\x47\xec\x94\xba\xc7\xdf\x70\xf3\xa5\x33\x11\x86\x43\xdd\x00\x40\xb2\xcc\x24\x92\x71\xf6\x4a\x13\x68\x41\x31\x4b\x25\x10\x96\x42\x21\xb0\x20\x02\xb5\x38\x37\x0b\x52\xeb\x7d\x2d\x51\xac\x03\x80\xab\x64\x00\x57\x74\x00\x57\xdf\x34\x59\xbb\x6e\xcd\x32\x9a\x60\xb8\xab\xbd\xac\x4f\x03\xf8\xdd\x34\xc5\x70\x08\xf2\x6b\x06\xd4\xe6\xc8\x20\x0f\xa0\x10\x34\x27\x62\x0d\x5f\x70\x0d\x85\xe0\xdf\x68\x8a\x29\xdc\xac\x41\xe2\xd7\x12\x59\x82\x01\x68\x23\xa9\xcc\x35\xed\x3a\x00\x38\x99\xcc\xe2\xe9\x1c\x4e\x26\xf3\x33\xd8\x27\xa7\x10\x5e\xc3\x4b\x47\x0c\x19\xbd\xe3\x94\x85\x3a\x98\xde\x00\x7a\x7d\x78\x09\xd7\xfd\x00\xe0\xe3\xd1\xe9\x45\x3c\xdb\xa5\x49\xb7\x34\xa7\xf1\xfc\x62\x3a\x39\x99\x1c\xc3\xe6\x9c\xd9\x87\xd3\xa9\xe1\x91\xe9\xac\x6b\xbb\x37\xbc\xfc\x9c\xf2\x65\x68\x63\xd0\xf9\x8b\xa2\xa8\xc9\x86\x28\x59\x27\xc9\xfa\xbe\xb6\x19\x4d\x6d\x1d\x35\x4f\xf9\x4a\xc7\x9f\xde\x44\x1f\xb4\xee\x94\xaf\xb6\x11\xcd\xa8\x40\xad\x24\xf8\x2a\x9a\x25\x84\x85\x1b\x0f\x8f\xb9\xfe\x50\xd7\xfd\x3f\x00\xbb\xa3\xc3\x35\x00\xa3\xd9\x00\xd0\x10\xb9\xbb\xf2\x4b\xc7\x24\x46\x33\xb7\xf0\xe9\x62\x33\xcc\xf2\x82\x4b\xaa\xb0\x59\xe4\x49\x21\x3b\xb3\xce\x13\x0f\x87\xf0\x96\xb2\xd4\x75\xc6\x85\xeb\x8c\x9b\x35\x50\x25\xcd\x2e\x2e\x64\x34\x46\x99\x08\x5a\xe8\x56\xab\x6b\xdb\x09\xda\xe6\xc1\x3e\xd0\x36\xc7\xfc\xdc\x34\xa1\xde\xe0\x8f\x50\x5f\xf3\x4e\x62\x86\xc9\xf3\x79\x07\x30\x8b\x4f\xe3\x37\xf3\x6e\xe1\x67\x06\xd4\xd4\x08\xe0\xed\xf4\xec\xfd\x8e\x46\x8f\xee\xb7\xb9\xd6\xfe\xf4\x67\x3c\x8d\x9b\x38\x66\x1f\x4e\xcd\x0c\xda\x83\x42\x6d\xe4\x1f\x89\xd0\x71\xff\x4c\x32\xdd\xc3\x7e\x26\xad\x8c\xd1\x68\x04\xc5\xf2\x7b\x14\x0b\x31\xe1\x53\xbe\x92\x4e\xd6\x25\xdd\xae\xff\x13\xa3\x56\x3f\x83\x9f\xde\x46\xfb\x11\xa6\x5e\x14\x29\x51\xf8\x6f\xb9\x6a\xad\xf6\x64\xeb\xf3\x07\xb9\x9b\xd8\x87\xa3\x9d\x17\x1a\x6b\xec\x28\x91\x72\xf6\x9b\x82\xd2\x46\xa3\xb9\xb1\xe0\x02\xe9\x92\x69\xd2\xcb\xad\x1f\x98\x42\x36\x97\x13\xc3\x91\x14\x33\x54\x18\xda\xc3\x06\x3a\x11\x0d\x77\xfb\xdd\x5f\x0e\x7b\x92\xb7\x3b\x40\xea\x75\x20\xf7\xda\x19\x0d\xbc\x4b\xcf\xa4\xcc\x5b\x1f\xfc\x8d\xd1\x50\xda\x6b\xc8\x8b\xf3\xf1\xd1\x3c\xde\xf7\x37\x67\x16\xcf\xcd\x70\x37\x94\x7a\x64\x15\xc0\xe8\x21\xb5\xed\x3d\xf0\x58\xfb\x3e\xb9\x25\xae\x9b\xd8\x50\x95\xc5\x56\xd3\x66\x25\x9a\xe2\x76\x6e\x44\x55\xfd\x78\xb5\x9c\xd9\x08\x48\x51\x20\x4b\x43\xfb\xae\xf3\xda\xb9\x52\xda\x86\xf6\x8a\xf7\xb0\x65\xbb\x55\x1e\x9e\x43\x56\xf5\x67\xaf\x33\x0f\xf5\x7f\x39\x7b\xc6\xa6\xf1\xf6\x9f\x3d\x91\x1d\x3e\xd6\x6c\xef\x55\xb9\xf9\x1f\xdb\x6a\xb1\x84\x33\xa9\x9a\x46\x6b\x16\xdf\x38\x3e\x8d\xe7\xf1\x43\xeb\x6d\xe7\x3d\xf6\x3f\x5a\x70\x8d\x9b\x74\x01\x57\x03\xcb\x8d\xf4\x26\x8a\xbf\x63\xf2\xa0\xf5\xf3\xf8\xb1\x1f\x35\xb6\x59\xb1\xc5\x84\x7f\x02\x00\x00\xff\xff\xb2\x7a\x6b\x85\x92\x14\x00\x00")

func manyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_manyGotmpl,
		"many.gotmpl",
	)
}

func manyGotmpl() (*asset, error) {
	bytes, err := manyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "many.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\x9b\x48\x12\x7f\x5e\x7d\x8a\x3e\x55\x2a\x41\x59\x05\x65\x5f\x73\xa5\x87\xc4\x22\x3e\xef\x39\x92\x63\xc9\xd9\xbb\x72\xa5\xe2\xb1\x68\xc9\x9c\xd1\x40\x66\xc0\xb2\x8a\xf0\xdd\xaf\xe6\x0f\x30\x20\x24\x21\xd9\xce\x5e\x6e\xf3\x06\x4c\x77\xd3\x7f\x7e\xdd\xd3\x3d\x90\x24\xbd\x97\xf0\x89\x30\x8f\x5c\xfb\xc8\xe1\x65\x2f\x4d\x5b\x49\x02\xcf\x2e\x38\x32\x78\xd3\x07\x7b\x22\x16\xec\x21\x59\x20\x7c\x03\xee\xd1\x79\xec\x13\x06\xdf\x20\x24\x7c\x4a\x7c\xd0\xe4\xf1\x2e\xf2\x29\x59\x60\x89\x9a\xaf\x93\x87\x7e\xcc\x88\x6f\x12\xb7\x42\x32\xbd\x25\x73\x84\x24\xd1\x4c\xdf\xc0\x0f\x96\xc8\xc4\x5a\xaf\x07\xc7\xce\xd0\x39\x7f\x3b\x71\x06\xf0\xee\xdf\x70\x36\x3a\x1e\xd9\x30\x18\xc1\x70\x34\x01\x67\x70\x32\xb1\x25\x8d\xc3\x58\x92\x48\x7b\xd2\x74\x18\x44\xef\x83\x98\xba\xc0\x30\x8a\x19\x45\x17\xbc\x19\x44\x37\xb9\xfc\x34\x05\x8f\x03\x0d\x22\x98\x09\xb2\xd6\x1d\x61\xf5\xfc\x7d\x40\xc6\x02\xc6\xed\x21\x2e\xad\x76\xc1\x9d\xb3\xb6\x3b\xf2\xe5\x39\xe7\x09\x0d\xe3\x08\x16\x81\x8b\x3e\xcc\x02\x06\x2f\x92\xe4\x99\x3d\x9e\xde\xe0\x82\x48\xf3\xd3\xd4\x16\x4f\x0a\x7f\xa4\xe9\x8b\x56\xb4\x0a\xb1\x2a\x82\x47\x2c\x9e\x46\x90\xb4\x00\x92\xe4\x15\x30\x42\xe7\x08\xcf\xa6\x81\x6f\xf8\xf3\x28\xf0\xe3\x05\xe5\xc2\x83\x82\x4a\x2e\x67\x4e\xce\x7c\x0b\x2f\xb3\x85\xe3\x60\x22\xde\xa3\x89\x5f\x01\x52\x57\xdc\xa4\x65\x03\x0c\xdd\xdb\xbb\x75\x6f\x57\x74\x3f\x44\x6d\x53\xeb\x1c\x6d\xc2\x1c\x6f\xa6\x2d\x0a\xa2\x61\xec\x8b\xa7\x9a\x58\x59\x22\x6e\x01\x7d\x2e\x4c\x7a\x59\xb3\xa2\xcc\xab\xb1\x75\x88\xcb\x46\xb6\xc1\xdb\xb3\x93\xd6\x2c\xa6\x53\xc1\x61\x75\x84\x27\x4b\x21\x12\x46\x2a\x80\xc1\xf3\xf2\x52\x22\x5f\x95\x24\x3b\xed\x17\xb1\x71\x16\xc4\x53\xcb\x55\x27\xc8\x65\xac\x2e\xe7\x59\xa3\xc2\x26\xd9\x85\xe7\x31\xe2\x12\xe3\xc2\x34\x54\x0f\xdb\x4a\x7d\xab\x00\x6e\xc5\x86\x8e\x21\xc1\x2a\xf8\xa0\xe2\xce\x7a\xdb\x73\xa9\xb6\xc1\xd9\x97\xbe\xd0\x77\x85\x83\x72\xda\x96\xb0\x2a\x0f\x88\xb0\xe1\x03\x61\xfc\x86\xf8\xbf\x8f\x47\x43\x58\xa8\xeb\xc2\x10\xc5\xd4\x06\x8f\x46\x01\x08\x92\xdd\x16\x19\xf2\xac\x0e\x58\x97\x9f\xaf\x57\x11\x76\x55\x22\x77\xcc\xa0\xfd\x87\x07\xd4\xd6\xd4\x85\xc0\x8e\x46\xc9\x05\x5d\x18\x8a\xc5\x34\x57\x4d\xb0\x41\x14\x00\x31\x15\xdc\xad\x56\x49\x9e\xe5\x92\x88\x80\x52\xad\xa3\x54\x5b\xd3\x2c\x67\x90\xc4\x5d\x28\x6b\xb8\xf3\x7d\xe3\x88\x79\x74\x6e\x75\x44\x4a\x7a\x74\x6e\x8a\x37\xf5\xce\x44\xcd\x31\xd2\xb8\xdc\x26\x74\x41\xc2\x4b\x25\xef\xb3\x47\x23\x64\x33\x32\xc5\x24\x95\xb2\xa7\x1a\xd5\x6f\xfa\xb0\x20\xb7\x68\xd5\x93\x76\x5a\xaa\x54\x35\xab\x67\x39\xf6\xeb\x2a\x5b\x0b\x44\x85\xa8\x05\xe1\xdf\xfa\x40\x3d\x5f\xaa\x95\x2b\x76\xd9\x36\x4a\x4d\x9a\xb6\x3f\x43\x5f\xda\xb7\xc6\xdd\x02\xd0\xef\xcf\x40\x9a\x3b\x4e\x8b\xd2\x08\xf9\xe3\x06\x19\x1e\xf9\x24\xe6\x28\xb6\x13\x92\x15\xbf\x28\x80\x1b\x42\x5d\x1f\x61\x29\x28\x60\x2a\x49\xb8\x2a\x95\x26\x93\x51\x2c\xa7\x01\x75\xbd\xc8\x0b\xa8\x0e\x57\x0b\x20\x24\x8c\x2c\xb8\xb0\xe0\xd2\xf4\xa0\xf9\x72\xe0\x21\x4e\xbd\x99\x87\x2a\x61\x72\x21\x5c\xc5\x54\xd2\x58\x55\xd1\xdd\x4c\xb2\x6d\xdb\x66\x64\xe0\xa5\xa9\x9b\x59\xdc\x8c\xe7\x99\x4b\xb5\xc8\x37\xc5\x65\x57\xae\x28\xd1\x6f\x8a\xcb\xae\x74\xa7\xd2\xf9\x84\x72\x64\x51\x39\x71\x54\x66\x67\xe9\xbe\x73\xbb\x91\x76\x29\x39\x96\x7b\x2d\xa2\x6f\x9f\xa9\xde\x21\x4d\xed\xc1\x3b\x23\x4b\x54\x9d\x5a\x43\xb0\x55\x3c\x29\xd5\x84\x5e\x4f\xa4\x00\x10\xdf\x97\xca\xd0\x80\xbe\x12\x10\xca\x50\x4d\xa8\x0b\x21\xc3\x90\x30\x14\xeb\x0b\xb9\x41\x0a\xc2\xaf\x31\xb2\x55\x0b\xe0\xcb\xb4\x0b\x5f\xbc\x2e\x7c\xb9\x13\x78\x2d\xeb\x35\xf6\xbd\x29\x5a\x75\x19\xa6\x94\xea\xc2\x6b\x99\x17\xbd\x1e\xf0\xaf\x3e\x78\xca\x4d\x52\x72\x17\x42\xe6\x2d\x08\x5b\xc1\x2d\xae\x20\x64\xc1\x9d\xe7\xa2\x0b\xd7\x2b\xe0\xf8\x35\x46\x3a\xc5\x16\x08\x26\x1e\xc9\xbe\xec\x4a\x06\xe1\x64\x38\x76\xce\x27\x70\x32\x9c\x8c\x9a\x6d\x74\xd6\x15\xfc\xaa\xd1\xc1\xed\xdf\x03\x8f\x5a\xc2\x9c\x76\x17\xda\x1d\xf8\x15\xae\x3a\x52\xea\xa7\xb7\xa7\x17\xce\xb8\x8e\xd6\x5b\xa3\x3d\x77\x26\x17\xe7\xc3\x93\xe1\x31\x14\x2f\x1b\x7f\x3c\x3d\x97\x80\x92\x29\x76\xa5\x36\x10\xc3\x4b\xa7\xc1\xdc\x52\x96\x08\x2f\xda\xb6\x2d\x7d\x22\x5a\xb3\xa2\x20\xe5\xb1\x13\xe8\x0c\x96\xc2\x64\xf7\xda\xfe\x28\x3c\x75\x1e\x2c\xab\xec\xb2\x40\xa0\x20\x62\xc1\xd2\x1e\x4f\x09\xb5\x0a\x75\x8e\x03\xf1\x20\x4d\x3b\x7f\x07\x2c\x17\x0c\x0d\x7b\xea\xf9\x5d\x40\x09\xdf\xf2\x46\x1f\x6b\xf4\x50\xcf\xd7\xdb\xbc\x37\xcb\x4a\xd8\x99\x8a\xd6\x3f\x71\x95\xed\xdf\xe1\xad\x51\xe1\xd6\x97\x8b\x12\x17\xde\xd6\xed\xf0\xef\x3d\xea\xea\x8c\xb9\xd0\x19\x73\xbd\x92\xb7\x9a\x3e\xcf\x0a\x41\x29\x72\x22\x0c\xe6\x41\x96\x0a\x59\x41\x54\xf1\xda\x8a\x7e\x81\x3c\x8e\x3e\x4e\x1f\x82\xbc\xb1\x73\xea\x1c\x4d\x20\x49\x8a\x98\x8f\xa5\x4c\x19\x31\x80\xf7\xe7\xa3\x0f\xcd\x12\x5d\x50\xff\xf1\x0f\xe7\xdc\xa9\xd8\x0a\x7d\x78\xf6\x9b\xc6\x8f\xb4\xd4\x84\x8d\xd1\x7a\x1c\x0e\x9e\x92\x90\x03\x21\x24\x99\xfa\x7d\x08\xe7\xf7\xb6\xc3\xd8\x30\x38\x0f\x96\x5c\xaf\x95\x01\x56\x37\x76\x48\xb2\xf4\x00\x2c\x1a\x7b\x56\xb1\xc7\x7a\xee\xbd\x81\xc0\x13\xea\xe2\x3d\x72\x03\x5d\xef\x56\x49\x22\x88\xec\xe3\xe0\x03\x46\x37\x81\x9b\xa6\x30\x53\xa8\x2b\x7c\x77\xbd\x02\x4d\x35\x40\x3e\x65\x5e\x28\x4a\x7e\x9a\x16\xc8\xab\x91\xb2\xb1\x40\x2b\xb2\x33\xb9\x3f\x88\xe6\xf2\xbb\xa1\xf2\xd9\x23\xc2\x52\xdb\x31\xfe\x78\x2a\xb7\xc7\x06\x45\x2d\xb7\xfc\x13\x61\xfc\x21\x08\x5d\x13\x04\xc2\x6b\xbb\x40\xaa\xb1\xcc\xd8\x3a\x54\x19\x6b\x06\xd6\xbd\xd0\xca\xd8\x3e\x78\xd5\x60\x1c\x51\x54\xe0\x0b\x28\x96\xe1\x47\x8a\x56\xa3\x40\xdd\x88\x62\x3d\xca\x54\xe7\x65\x76\x34\x4f\x0d\xb3\xed\xa5\x6f\x1f\x84\x29\x7c\x89\x6d\x56\x5a\x61\x17\x76\x6f\x43\x97\xa2\x55\x4d\xd7\x83\x36\xcf\x35\x41\x4f\x5e\x03\x1f\xb5\x08\xfe\x92\x63\xe9\x03\xa1\x2b\x05\xa6\x85\xb8\x32\x9a\xce\x17\x5c\x21\x6a\xee\xdd\x21\xad\xc3\x95\x60\xdd\x03\x58\xd9\xb1\x55\x9a\xc2\xe5\xe7\x0a\xca\xfe\x1a\x48\x63\xc1\x92\x77\xb3\x2a\x94\xa1\x6a\x17\xa4\xaa\xa5\xa8\x7c\x56\xc0\xb5\x03\xf5\x3c\xe6\xe2\x0c\x99\x7c\x8f\x7d\xe4\x07\x1c\x2d\xf9\x5e\xd1\x86\xcb\x67\x43\xbc\x8f\xac\x8e\x16\xb4\x19\xf7\x25\x2c\xf3\xe6\x60\xde\x05\xe7\x5a\xe5\x37\xc2\x3a\x03\xf6\x16\x93\x33\x12\x03\x5a\x7d\x20\x61\x88\xd4\xb5\x4c\xea\xe7\xc6\xb1\x80\xe2\xf1\x66\xca\x36\x87\x31\xab\xb3\xd3\xc1\x05\x69\x96\x58\xbd\x1e\x20\xe5\x31\x43\x58\x62\xc6\x41\x28\xe0\x22\x8c\x56\x40\x18\x23\x2b\x45\xc4\x48\x74\x83\x62\x08\x22\x32\x35\x45\x90\xa9\x60\xd1\xa7\x16\x8a\xc8\x9b\x81\x8f\xd4\xd0\xb8\x23\x7c\xf8\x3a\xcb\x86\x5f\xb4\x7c\x79\x62\x50\x4e\x9d\xd7\x1d\x95\xd0\x92\xce\xcc\x78\x53\xfb\xef\xd2\x82\x5f\x84\x2e\x89\x70\x6d\x6c\x6d\x36\x5a\x5d\xaf\xc0\x8b\x78\x6d\xc3\xae\xe4\x6e\xec\x92\x8c\xb3\xb8\xf0\x36\x3f\x8a\x3b\x7c\xc2\x9d\x79\xe8\xbb\xf2\x7c\x66\xf3\x24\xaa\xe3\xef\x06\xf4\x45\x04\xb1\xb2\x5b\x4c\xb9\x46\x8d\x92\xa9\xe8\x63\x84\x96\x12\xd8\xad\xd8\x96\xc9\x30\xa6\x65\xe0\x62\x00\xe6\x8d\xa6\xe4\x4c\xe8\x6f\xe6\x44\x9c\x0d\xd9\x46\x1d\xbc\x38\x1b\xbc\x9d\x38\xcd\x62\x30\x76\x26\x72\x6c\xd5\x39\xb7\x71\xd0\x95\xeb\x57\x1d\xe8\x6f\xa6\xf6\xd6\xa8\x77\x4e\x2a\x3b\xa7\xe1\xab\xcc\x52\x8c\xe2\x30\xb7\xf5\x8e\xf8\x31\xca\x70\xe9\xac\x2f\x9d\x02\x25\xc6\x94\x92\x1a\x03\xef\xe6\xaa\xad\xe4\x65\xf5\x5a\xe4\x6f\x4c\x4b\x27\x18\x07\x35\x0b\x86\xd4\x1f\xab\x4d\x68\x32\x2b\x5d\x50\xef\x6b\x9c\xcf\x4a\x2a\x5d\xb7\x4f\x4b\xda\x65\x46\x7a\x1f\x3e\x17\xfd\x39\x99\x7e\x8b\x2b\x5e\xfe\x78\x23\xb4\xd2\x42\xd2\xb4\x36\xfb\x8b\xd4\x2f\x7d\x6d\x79\x94\x3a\xa0\xdd\x32\x8c\x17\xb9\x0e\x4f\x55\x19\xb6\x1c\x80\x99\x25\x61\xcb\xd9\x17\x64\x34\x57\x1b\x66\xc4\x82\x60\xaf\x9a\x50\x4e\xd3\xac\x2e\x94\x0b\x42\xba\x3d\x6a\x9a\x2d\xaf\x26\xea\x5e\xf8\xb7\xb4\xe5\xa9\x36\xc2\x08\xe2\x66\xce\xbf\x44\xcd\x79\xaa\x92\x93\xd7\x13\x39\xa4\x88\x26\x6c\x9f\x8e\x62\xc3\xe4\x52\x48\x6c\x3a\xbb\x34\xa8\x31\x7b\xcc\x36\x07\xa6\xfa\xb6\x83\x71\xd1\x3c\x9a\xd3\x43\xe7\xc7\x49\xfe\x9a\xb1\x4a\xd0\x3d\x71\x09\xd8\x94\xad\x35\x23\xd8\x63\x27\x76\xa6\xde\xf6\x59\x70\x2d\x7b\x7f\x4e\x81\x3f\xa7\xc0\x1f\x60\x0a\x1c\xc8\xb6\xa7\x32\x05\xce\x58\xb0\x68\xfc\xf1\x12\x22\x71\xa7\x4a\xb5\x92\xb6\xe7\xec\x67\xfe\x29\xb0\xb9\x04\x0e\x9c\x53\x67\xe2\x34\x3f\x07\xda\x3c\xbc\xec\x3c\xce\x36\xbf\xb5\x54\x8a\x80\x37\x83\x2f\x5d\x95\x63\xee\xb5\xed\xdc\xe3\xb4\x8e\xf1\xb0\x9d\xb9\xd9\xa6\x5c\xdd\x8f\x0f\x6c\xfb\x55\xa4\xea\xda\x7e\xd5\x08\xf3\xba\x1f\x41\x36\x32\x35\xfe\x26\xb2\x16\x69\xf5\xb6\x47\x0c\xf8\x5a\x73\xba\xff\xd7\x8b\xed\x41\x2e\x91\xff\xa9\x91\xce\xc3\x28\xbb\x2d\xed\xc9\xfa\x43\x61\x91\xcc\xb5\xcd\x55\x21\xa0\xf9\xc1\xf0\x5a\x10\x1f\x72\xf2\x7b\x60\x98\x1f\xe3\x74\x77\x4b\x9c\xab\xe4\x9b\xbe\xa6\xd7\xc7\xe8\x01\x35\x5b\x76\xd0\xf2\x47\x89\xea\xbf\x62\xb5\x47\x6e\x76\xd6\x22\xff\x5f\xff\x3a\x52\x53\x1d\x1e\xfd\x67\x10\xdd\xc0\x5e\x35\xfc\x1f\x24\x23\x1f\x0d\xe1\x68\x34\x7c\x7f\x7a\x72\x34\x01\xab\x72\x64\x98\xd1\x0c\x46\xa0\x1b\xf8\xac\x37\xdf\xd5\x97\x83\xf3\xaf\xa3\xd3\x8b\x81\x33\xb0\x37\x11\xe7\x04\x15\x7d\x76\x76\xdf\xcd\xfe\x4f\xa9\x6c\x7b\xff\xf3\xbf\xab\x1c\x70\xec\x25\x32\x66\xcb\xb1\x97\xf1\x6b\x8a\x99\x63\xfb\x6c\x7e\x3f\xd3\xee\xfb\xa4\x5d\xb1\xe5\x17\x87\x69\x3f\x73\xef\xa0\xdc\x7b\xfe\x5c\x5d\xd7\xb5\x2f\x07\x66\xe4\x7f\x03\x00\x00\xff\xff\x5d\x8c\x36\x77\xa4\x31\x00\x00")

func modelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_modelGotmpl,
		"model.gotmpl",
	)
}

func modelGotmpl() (*asset, error) {
	bytes, err := modelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\xe2\xc1\x28\x5a\x7b\x6d\x48\xe8\x75\x81\x1c\x36\x95\x91\x06\x58\xd8\xde\xc4\x29\x50\x04\x01\x4c\x53\x23\x99\x88\xc4\x51\x48\x4a\x4e\x6a\xf8\xbf\x17\x94\x3f\x36\xd9\x22\xdd\x4b\xa4\x13\x31\x9c\x37\x7c\xf3\xf8\x86\xda\xed\x92\x4f\x1f\xf5\x25\xfb\xbd\x08\xf5\xf0\x97\xb4\x5a\xae\x4b\x72\x38\xc7\x3e\xf2\x0c\x21\x3e\xbc\x64\x47\x7b\xde\x58\x2c\xa4\x7a\x94\x05\xf5\x44\xbc\x3e\x56\xdf\xed\x10\x9f\x4e\x0a\xf1\x5e\xda\x59\x70\xc1\xa8\xa4\x7d\x24\xdb\x53\x3b\x49\x82\xab\xe9\x6c\x7a\xf3\x65\x39\x4d\x71\xf9\x37\x16\xf3\xab\x79\x8c\x74\x8e\xd9\x7c\x89\x69\x7a\xbd\x8c\x7b\x6a\x2d\x95\x5e\xae\xa5\x23\x68\xe3\xc9\xe6\x52\x11\xdc\x86\x9b\x32\xc3\x96\xed\x23\xb6\xda\x6f\x90\x1d\x73\x12\xf7\x54\xc6\xe9\x25\x7e\x7d\x1b\x59\x3e\xf7\x27\x4a\x7a\x09\xed\xe0\x37\x04\xc5\x55\xc5\xe6\x15\xcd\x9c\xed\x99\x07\xb8\x26\x2b\xbd\x66\x13\x92\xa5\x87\x92\x06\x6b\x42\xe3\x28\xeb\x7a\x08\xb5\xfc\x4b\x4d\x0e\xb9\xe5\x0a\x4e\x6d\xa8\x92\x58\x05\xf7\xdc\x76\xeb\x78\x26\xab\xe0\xa0\x55\x2c\x92\x24\x64\x2f\x37\xda\xfd\x5c\x0a\x69\xb2\x1f\xc5\x88\x45\x38\xa8\x63\x7e\xe6\xba\x13\xd1\xf4\x99\xd4\xd0\x79\xab\x4d\x31\x41\x1c\xc7\xe7\xcd\xdd\x7e\x84\x61\x5d\x3c\xc7\x7f\x70\x55\x49\x93\x2d\x65\x31\x01\x59\xcb\x76\x24\xa2\x6f\x0d\xd9\x97\xf7\x61\x9f\x02\xee\x86\xb7\xee\x07\xc4\x0d\x6f\xdf\x05\x9d\x30\xa2\xb7\x69\x69\xd6\xa5\x56\x50\x8d\xf3\x5c\xe9\x7f\xc2\xf3\x85\x92\x8b\x42\x9b\xe2\x95\x24\xbd\x59\xe6\x2b\x17\xa8\x2d\xb7\x3a\xa3\x83\x73\x4a\x2e\x90\x37\x46\x1d\xdc\xb0\x7e\x41\x41\x26\xb8\x85\x32\x3c\x35\x64\x35\xb9\x58\xb4\xd2\x76\xc0\x8b\x2e\xf3\x5d\xed\x76\x3d\x6b\xc6\xf5\xc1\xc3\xc1\xdb\x4d\xed\xc8\x7a\x87\xe1\x72\x9e\xce\x3f\xa3\x92\x8f\x04\x1f\x4c\x29\x0d\xc8\x34\xd5\xa8\x27\x09\x15\x1b\xe7\x31\x14\x40\x92\xe0\xae\x23\x91\xf2\x8c\xfd\x26\xdc\x5f\xca\x30\xc7\xa5\xce\x83\xba\x96\x7e\x73\x90\x50\x6c\xf2\x52\x2b\x2f\xf0\x1f\xc8\x05\x06\x87\x77\xec\xcf\xeb\xd9\xd5\xe0\x6d\xd9\xbb\x3a\x93\x9e\xb0\x20\x9b\xb3\xad\x42\x67\xcd\x21\xb2\xdd\x90\xf9\xff\xf2\x47\xe8\xa1\xfa\xdd\x22\xfd\xb2\x9c\x0e\xc4\xa8\xdf\xeb\xd9\x50\x59\x93\xed\x2c\x12\xee\x09\x9e\xe1\x4a\xad\x08\xdc\x58\xe4\x9a\xca\xcc\x05\x87\x33\x6e\xbf\x7d\x45\x6e\x35\x99\xac\x7c\x81\x36\x75\xe3\xfb\xfa\x81\x27\x09\x6e\x3b\x0a\x8a\x4d\xdb\xf9\x25\x70\x51\x5c\x36\x95\x39\x92\x71\x5c\xd1\xe1\x2a\xc2\x34\xb8\xa7\x12\x99\xd5\x2d\xd9\xee\x91\x6c\x4c\x46\xd6\x79\x69\x32\xd1\xcd\x48\x57\x6c\x78\xc2\x57\xb2\xbe\x3f\xcc\xc2\xc3\xab\x39\x98\x80\xf3\xdc\x91\x0f\xe5\x47\x18\x2a\xdc\x3f\x9c\x06\x46\xbf\x5a\xb7\xb8\x7f\x78\x3b\x3d\x22\x32\xf8\x7c\x71\x42\x8f\xf1\xbb\x88\x82\xd3\x15\x97\x13\xb4\xb2\x0c\x7b\x56\x9a\x82\xce\xfc\x77\x22\x8a\x14\x2e\x20\xeb\x9a\x4c\x36\x54\x13\xac\x06\xab\xb1\xe2\x72\xbc\x1a\xac\x46\x22\x8a\xf4\xf7\x4d\x3d\xc1\xe0\x97\xc1\xd8\x79\x1b\xa4\x88\xaf\x3d\xcb\xa1\x19\x85\xa4\xf6\x7b\x52\xdb\x1d\x14\x82\x66\x3c\x16\xd1\x5e\x44\x96\x7c\x63\x0d\xd4\x04\x7a\x82\x56\xec\xc5\xbf\x01\x00\x00\xff\xff\xa5\xd7\xa5\x26\xc8\x09\x00\x00")

func pogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_pogoGotmpl,
		"pogo.gotmpl",
	)
}

func pogoGotmpl() (*asset, error) {
	bytes, err := pogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.gotmpl": enumGotmpl,
	"many.gotmpl": manyGotmpl,
	"model.gotmpl": modelGotmpl,
	"pogo.gotmpl": pogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.gotmpl": &bintree{enumGotmpl, map[string]*bintree{}},
	"many.gotmpl": &bintree{manyGotmpl, map[string]*bintree{}},
	"model.gotmpl": &bintree{modelGotmpl, map[string]*bintree{}},
	"pogo.gotmpl": &bintree{pogoGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

