// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xe9\x73\xdb\xb8\x92\xff\x4c\xfe\x15\xfd\x58\x79\x79\x54\xac\xa1\x26\xfb\xd1\xbb\xda\xaa\xd8\x96\x67\xfd\xd6\x91\xbc\x3e\xde\xec\x54\x2a\x25\x31\x24\x64\x73\x4c\x01\x0a\x40\xc9\x56\xa9\xf8\xbf\xbf\x6a\x00\x24\xc1\x43\x97\xaf\x24\x13\xe7\x4b\x64\x1c\x8d\x46\x1f\xbf\x6e\x34\x20\x4d\xfd\xe0\xd6\xbf\x26\xb0\x5c\xbe\xf1\xce\xfc\xe4\xc6\x3b\x53\x0d\x69\x6a\xdb\xd1\x64\xca\x78\x02\xae\x0d\xe0\x04\x8c\x26\xe4\x3e\x71\xf0\x33\xa1\x01\x0b\x23\x7a\xdd\xf9\x53\x30\xea\xd8\x96\x43\x38\x67\x5c\xe0\x27\x91\xf0\x88\x5e\xcb\x8f\x49\x34\x21\x8e\x6d\x5b\xce\x75\x94\xdc\xcc\xbe\x78\x01\x9b\x74\xfe\xf4\x83\xdb\xa0\x33\xbd\xbe\x77\xec\x96\x6d\x77\x3a\xf0\x5b\xaf\xdf\x3b\xff\x70\xd9\x3b\x82\x83\x3f\xe0\x6c\xf0\xdb\xc0\x83\xa3\x01\xf4\x07\x97\xd0\x3b\x3a\xb9\xf4\xe4\x98\x1e\xe7\xc8\xdd\xa5\xff\x25\x26\xde\x99\x2f\x02\x3f\x4e\xd3\x3e\x4b\x8e\xd9\x8c\x86\xc0\x49\x32\xe3\x94\x84\x10\x8d\x21\xb9\x51\x1b\x51\x43\xfb\xfe\x84\xa4\x29\x44\x02\x28\x4b\x60\x8c\xa3\xed\xb9\xcf\x37\xd0\xeb\x82\xda\x8d\xd7\x27\x77\xae\x53\x0c\x3c\xf4\x27\x24\x4e\xd3\x82\x96\xa3\x76\x50\x27\x05\x9c\x88\x59\x9c\x40\xe8\x27\x3e\x8c\x19\x07\x49\xe5\x22\xb8\x21\x13\x5f\x33\xe5\x78\x4e\x95\x4f\xc7\x4e\x16\x53\xd2\x44\x4e\x24\x7c\x16\x24\xb0\xb4\x01\x96\xcb\x5f\x80\xfb\xf4\x9a\xc0\x9b\x80\xc5\xb0\xdf\x85\x9c\x3d\x16\xcf\x26\x54\x40\x9a\xca\x61\xd8\x5d\x50\x58\x2e\x51\x3a\xb2\xad\xcf\x92\xfe\x2c\x8e\x21\x4d\xf5\xa0\x4b\x5c\x35\x63\x0f\x5b\x81\xc4\x82\x40\x9a\xbe\x5b\x3d\x80\x86\x90\xa6\x30\x42\xf5\xef\x3b\x7a\xd8\x05\xf5\x6f\x49\x9a\xb6\xd9\x24\x4a\xc8\x64\x9a\x2c\x9c\x91\x66\x58\x0d\xb7\x53\x5b\x4a\x7f\x08\x53\x76\xcd\xbc\x73\x76\x07\x5d\x70\xdf\xd5\xf7\xdb\x72\x69\x14\x2b\xd9\x1e\x91\x80\x85\x04\xa2\xc9\x34\x26\x13\x42\x13\x91\xcf\xb5\xc7\x33\x1a\x80\x5b\xcc\xbe\xb8\x61\x3c\x49\x53\x68\x22\xa8\xe9\xb8\x75\x65\x46\x34\x21\x7c\xec\x07\x64\x99\xb6\x94\xde\xa5\x98\x87\xb5\x91\x6d\x60\xb7\x28\xee\x5a\x87\xd7\xb8\x05\x1b\x50\xe0\x7f\x63\xb7\x92\x1c\x68\x23\x85\xf1\x24\xf1\x7a\xb8\xca\xd8\x1d\xd5\x99\x09\x25\x97\xfb\xe0\xfc\xfd\xd2\xc9\xac\xd6\x07\xa7\x81\xbe\x33\x6a\xd7\x39\xc1\x45\x51\xf9\xef\xea\xdc\x43\xd7\x94\x8b\x16\x95\x9d\xb3\x45\xa3\x18\xb5\xd3\xe9\x40\x9f\xdc\x6d\x69\xad\x10\xd1\xe9\x2c\x51\x6a\x40\x4f\x69\xc1\xbb\x13\x6c\x91\x1b\xd6\x74\xdf\xca\x96\x65\xaa\x89\xab\xfe\x07\x79\x85\x9a\xfa\x10\x47\x50\x56\x2f\xe5\x00\xca\x3c\xa0\x6e\xd5\xd9\xe0\x5f\x0a\x37\x99\xc5\x31\x92\x53\x3d\x00\x54\xff\x9d\x4d\x57\x9a\x90\x14\x37\x91\xd4\xe6\xbf\xc6\x17\x4e\xa8\x20\x3c\x91\xcb\xa1\x4b\xc8\xcd\x66\x5e\xb0\x5c\x6e\xde\xa7\x42\xa1\x92\xc7\x0b\x92\x08\x09\x87\x99\x7b\x66\xe2\x5c\xe9\x37\x6a\xd5\x2a\x21\x57\xff\x9d\x19\x52\x33\x26\x94\x94\x5f\xa3\xed\x55\x68\x74\xe1\x6d\xb9\xa5\xb0\x98\xba\x91\xa6\x28\x82\x66\xbd\xa0\xbd\xae\x54\xcb\x5d\x14\xc7\x28\x05\x29\x84\x51\xd6\x8f\x52\x80\x34\x1d\x41\xc2\xa0\x7f\x75\x7a\x8a\x74\x47\x65\x66\x46\xd2\xf5\x66\x71\xbc\x51\x54\x2b\x17\xaf\x0a\x6d\xa5\x85\x6c\x90\xdb\x6a\xa3\xdb\x51\x84\x86\xe5\x19\x1f\x51\x80\x1f\x7d\x2e\x6e\xfc\xf8\x9f\x17\x83\x3e\x4c\xd4\xe7\xc2\x6e\xca\x20\x82\x2e\x9f\x30\xc0\xa1\x1b\x45\x63\x90\x75\x5b\xe0\x7e\xfa\xfc\x65\x91\x90\xb6\x42\xd8\x96\x09\x11\x18\x42\x3c\x3d\xba\x4e\xaf\xa5\x91\xe3\x8a\x4e\x0c\x3e\x67\x34\xe7\x14\xa7\xa3\x2e\xfd\x26\x7e\x37\x72\x59\x22\xeb\x4a\x60\x52\x9c\x9a\xb1\xc0\x64\x34\x9f\x20\x07\xb7\xeb\xb2\x96\x0c\x6f\x5a\xf6\x42\xe6\x48\x6e\x0b\x54\xb2\x64\xae\xd2\x80\x7f\x5b\x10\x0c\x14\x14\xb8\x2d\x98\xf8\xd3\x4f\x8a\xea\x67\x23\xb4\xc9\x15\xf4\x20\x84\x90\x89\x7f\x4b\xdc\xe6\xa1\x2d\x5b\xa1\xe6\x16\xd8\xba\x1e\x30\x65\x00\xdc\xc5\xa4\xff\xd6\xc5\x38\xa4\xe3\x25\xfe\xd3\x0c\x7f\xaa\x20\xd8\xe7\xc6\x60\xb6\x9a\xb0\xa6\x57\x70\x9c\xe3\xf1\x0a\x16\x2b\xce\x5b\xe1\x6b\x37\xae\x6a\x4e\xaa\x18\xc9\x73\x28\xbb\x50\xbd\x26\x9c\xc7\x4a\x0c\x09\xb5\xcc\xa7\x88\x14\x1b\x8d\x42\x0d\x75\xc3\x2f\x6a\xe6\xd1\x41\x0b\xdc\x2c\x7b\x6a\xf2\xc4\x7c\xfc\x2a\xb3\x56\xe9\xc1\x71\x14\x27\x84\x43\xc0\x89\x9f\x10\x01\x3e\x50\x72\x07\x63\xd9\x98\x27\x03\x6a\x0c\xa6\x04\x7a\xb4\x99\x13\xa8\xa6\x3c\x29\xd0\x23\x14\x05\xb1\x73\x62\xa0\xa7\xe7\x99\x81\x35\x66\x7c\xe2\x27\x02\x3e\x7d\x56\xc6\x6d\x5b\x73\x3f\x9e\x11\x01\xf0\xc9\xb4\x73\x1b\xb4\x8b\xeb\xff\x2b\x11\xf9\x90\xd1\x30\x4a\x22\x46\x65\x40\x56\x8b\x18\x79\xe9\x61\xec\xcf\x04\x81\x31\xd5\x5a\x18\x67\x3b\x6d\xe9\x2e\xdc\xbb\x22\xa4\x46\x2e\x6d\x2b\xdb\xbf\xd1\xbc\xb4\x2d\x0b\x43\xc2\x3e\x00\x38\xbf\xff\x4f\xef\xbc\xe7\xb4\x6d\xcb\x3a\x96\x5b\xd8\xd7\xf0\x20\xbc\x7f\xb2\x88\xba\x63\x4f\xef\xac\x0d\x0e\x7c\xe8\x1f\x81\xd3\xc2\xb1\x67\x3e\xf7\x27\x62\x1f\xc6\x9e\xda\x66\x5b\xda\x98\xcc\x31\xf7\x01\xc6\x9e\xdc\x5c\xdb\xb6\x32\x71\x7f\xa0\x61\xa6\xad\x4e\x07\x6a\xdc\x7f\xa0\xa1\x9b\xa9\xc2\xf3\xbc\xbc\xbd\x50\x64\xa7\x03\x00\x28\xa9\x40\x6e\xc1\x10\xb4\xec\x41\xfd\x0d\xdb\x7a\x09\x84\x0e\x05\x24\x19\x4d\x3d\x1f\x60\x08\x5d\x83\x0f\xfc\xd7\xe9\xe4\x24\xbb\xe0\x4f\xa7\x84\x86\xae\x6e\x68\x6b\x51\x68\xd6\x0a\xed\xb8\xad\x56\x4b\xcd\x4f\xf5\xf2\x5e\x8d\x46\xde\xd4\x2e\x0b\x34\x6f\xcd\xc4\xa9\x29\x65\xa9\x3a\xfe\xa5\x64\x36\xe0\xeb\x44\x36\xe0\x3f\xa1\xc4\x06\xe7\x2b\x05\x56\x04\x8f\x62\x4b\x99\xeb\x1e\xeb\x4d\xc9\x3c\xa4\x18\x46\xe2\x50\x8e\xd2\xcc\x1e\x63\x83\x28\x65\xd2\x32\xc3\xd5\x43\x8d\x98\x51\xb4\x1d\x11\x11\xf0\x68\x2a\x5d\x36\x4d\xeb\x6e\xd9\x30\xdb\x9d\x1b\xad\x0d\x99\x99\x81\x5d\x59\xa0\x53\x63\x2f\xa6\x9c\xf8\x3a\x86\xa0\x5e\xb9\xa1\x52\x19\x53\x62\x42\xdd\x79\x0b\xba\x5d\xf8\x55\xc7\x8d\xdc\x7b\x4d\x29\xe7\x0e\x3d\x1a\xfb\xb1\x20\xa3\x56\xe9\xa8\x28\x4f\x73\x08\x67\x5a\x4e\x73\x04\x11\x8b\x1b\x14\x38\xaa\xe2\xef\xc2\x69\xa1\x7b\x6f\x5a\x03\x8f\x9e\x17\x53\x1e\xd1\x44\x9e\x3d\xb3\xbd\x28\xac\xc1\x94\xb8\xa2\x6c\x24\x6e\x8c\xcb\xf7\x3c\x42\x03\xca\xad\x36\x2a\x0c\x76\x9e\x6f\x55\x03\xae\xc1\x85\xc6\x26\x43\xde\x87\x8c\xf0\x80\x80\x13\x39\x50\x9c\x5c\x65\x74\x56\xc5\x87\x9a\xd0\xcb\xf9\x45\x34\x86\x39\xca\xb7\x88\xcc\x1b\x24\x5c\xac\x8c\x84\x8a\x5d\x37\xc8\xbc\x92\x25\x6c\x4d\xd8\x24\x6a\xed\x26\x85\x79\x26\x05\x63\x65\x2b\x67\x6a\x5d\xfe\x3e\xe0\x21\xe1\x07\x0b\x10\x53\x12\x44\xe3\x28\x88\x88\x4a\xdf\x07\xe7\x47\xbd\xf3\x83\x05\x1c\xfc\x01\xff\xc5\x70\xcc\x7f\xab\x78\x99\x8f\x57\xe6\x6a\x07\x8c\x8a\x04\x5c\xdb\xc2\xd8\x70\x71\x08\x82\xf1\x44\xc0\x97\x05\xf8\x22\x20\x34\xc4\xf4\x54\x4e\xb7\x2d\xec\xcd\x66\x77\xc1\xf9\x70\x71\xe8\xd8\x72\xda\x51\xcf\x9c\x17\x92\xea\x44\xd9\x6f\xcc\xc4\xbf\xb3\xf2\x5f\x9f\xdc\xc9\x9e\x3c\x94\x66\x0d\x18\x40\x55\x8f\x11\x3a\x65\xc3\xb2\x7a\x7a\x2e\xc7\x6a\x39\xc6\x08\xd5\x8a\x88\x64\x45\x49\xe6\x3a\x9a\x13\x0a\x52\xfe\xc2\x90\xc9\xba\x14\x22\x6d\x0c\xfa\x4c\x73\xf8\x88\x98\x2f\xb5\x04\x07\x7f\xac\x0e\xfb\xcc\x08\xfb\x6d\x15\xf3\xf5\x99\xb8\x0e\x9f\x1a\x64\x07\x6a\xaf\xab\x51\x53\xe9\xca\x74\x89\xec\x54\x8c\x7a\xa7\x40\xee\xa7\x9c\x08\x11\xb1\xfa\x4e\x9b\x60\x54\xca\x36\x53\xb0\xa9\x36\x56\xf7\x1c\xb6\x13\x20\x49\xca\xad\x56\x2e\x47\x66\xd7\xec\x5f\xe7\xc9\x7e\xc3\xc9\x49\x1d\x57\xf3\xb3\xec\xe6\x84\x52\x6e\xb6\x96\x36\x37\x54\xda\xf2\x1c\xbb\xa9\xf6\x57\xca\xad\x3b\x1d\xb8\x26\x09\xf8\x71\x2c\x19\xa1\x8c\xfe\x82\x90\x95\x9d\xc5\x7c\x1a\xc2\x94\x93\xa9\xcf\x09\xf6\x4f\x24\xac\xe2\xc0\xaf\x33\xc2\x17\x36\xc0\x30\x68\xc3\x30\x6a\xc3\x70\x8e\x1a\x16\x71\x14\x34\x54\x31\xbd\xfc\xfc\xd7\x86\x5f\xe5\x01\xae\xd3\x01\xf1\x35\x86\x48\x09\x47\x12\x6b\xc3\x94\x47\x13\x9f\x2f\xe0\x96\x2c\x60\xca\xd9\x3c\x0a\x49\x88\x1a\x17\xe4\xeb\x8c\xd0\x80\xd8\x80\x93\x44\x22\x23\xf6\x48\xe2\xe2\x49\xff\xa2\x77\x7e\x09\x27\xfd\xcb\xc1\xb6\x65\x41\x77\x04\x7b\x65\x13\xc6\x3d\x48\xdb\x85\x3d\xd0\x78\xfb\xaf\x0f\xa7\x57\xbd\x8b\xa6\xb1\x51\x6d\xec\x79\xef\xf2\xea\xbc\x7f\xd2\xff\xcd\xd0\xc3\xb9\xb4\x87\x88\x5e\x4b\x84\x1e\xe9\x2d\xc7\xec\x5a\xed\x15\xc3\xc3\x1d\xf9\xc7\x9c\x14\xfb\xf4\xb1\xf7\x9a\x70\x15\x3b\xa4\x6a\x4f\xd9\x75\xf9\x70\x97\xb5\xba\x4a\x0c\x28\x75\xcf\xf3\x54\x70\xd2\xa1\xbe\xa1\xb4\x5a\xb7\x00\x3c\xec\xb0\x3b\x94\x62\xf8\xc5\xfb\x3f\x64\xe8\x9c\xdd\xd5\x89\x46\x63\x20\x32\x7c\xb2\x3b\xef\x22\xf0\xa9\x79\x96\x0b\x7c\x9a\xa6\xad\xff\x04\x52\xe6\xb0\xa8\xd7\xb6\x81\x64\x7c\x65\x20\xd3\x54\xb4\x2e\x2a\xbb\xca\xae\x3f\xfa\x74\xf1\xc4\xae\x82\x24\x57\xb8\xcb\x59\x3c\xe3\x7e\x9c\x09\x0a\xb3\xe3\xcc\x6f\x3e\x7d\x5e\xef\x39\xd6\x70\x15\x95\xfd\x2e\x34\x4e\x5e\xea\x64\x69\xd8\xe4\xaf\x79\x92\xb2\x8a\x2a\xa2\x72\x93\xfc\x08\x97\xde\xd0\x78\x36\xce\xcb\xee\x96\x85\xaa\xe4\xbc\xd0\x95\x65\x65\x90\xb5\x6a\x1f\x92\xb4\x6d\x59\x69\x79\xe1\x32\x57\x39\x6c\xae\xa6\x52\x67\x5a\x66\x83\x9b\x97\xd7\x96\xb1\x5c\x76\xde\xc1\x71\x44\xd1\x43\xd0\x68\x31\x02\xc8\xb2\x29\x1b\x43\x90\x05\x56\x01\xef\x3a\x2a\x9c\xe8\x91\xa3\xba\xfc\x65\xf0\x10\x6c\x42\x8c\x69\x9e\xb2\x13\x9c\x54\xb2\x10\x1c\x21\x4f\x4b\xe5\xf8\xbd\x05\x9e\x0e\x05\x3a\x50\xae\x97\xf2\x7c\xe1\x4a\xc2\xd2\xbd\x1a\x54\x52\x72\x1e\x14\x7e\x6a\x40\xa5\x20\x31\x09\x1e\x08\x95\x17\xbd\xd3\xde\xe1\x25\x2c\x97\x99\xf7\x4a\x5a\x69\x0a\x23\xd8\x93\x6e\x3b\x3a\x3e\x1f\x7c\xdc\x16\x40\xb3\x49\x43\xf1\xd3\xc0\x9a\x9c\xd2\xed\xc2\xf4\xfa\xde\xeb\x71\xde\x67\xe7\xec\x4e\xe4\x15\x37\x53\x6f\x6b\xaf\x6e\xed\xa2\xce\xf7\x50\xa0\xcc\xdd\xe1\x60\x01\x67\xda\x08\xfe\x97\x2c\x94\xfd\xab\x5b\xd4\x6c\x71\xd5\x8b\x9d\xaa\xeb\xcd\x54\x5e\x10\x36\x76\x6b\xcf\x39\x58\x2c\x97\x6f\xa6\xb7\xc5\x2d\xcd\x43\x3c\xa9\x4a\xa4\x8a\xbd\xd3\x5b\x53\x87\xd3\xdb\xfa\x5d\xcd\x36\x59\xcb\x63\x7d\x42\x6a\x61\x95\x63\xc8\xce\x1d\x7c\x42\x8e\x97\xf5\x31\x39\x61\x7a\x9b\x3b\x4b\x17\xde\xbc\x7f\xce\x0c\xe0\x6d\x49\xa0\x4f\xed\x33\x75\xea\x3f\xb2\xf3\x18\x45\x6d\xd3\x8d\xae\x68\xf4\x75\x46\x74\xca\x9b\x3b\x92\x3e\xbc\x44\xe1\xbd\xe1\x34\x27\x34\x24\xf7\x44\x64\xc7\xdc\x68\x0c\x2e\x66\xc8\x38\xca\x3b\x11\x9a\x90\x4b\x59\x92\x35\x69\x2f\x6b\xb5\xaa\x4e\x86\xdd\x1f\x49\x72\xc3\xc2\x34\x85\xb1\x0a\x5a\x75\x7d\x7d\x59\x80\x1e\x6b\x94\x8f\xb2\xea\x51\x23\xad\xaa\xb3\x61\x9f\x2a\xc1\x7e\x63\x0f\x7b\xf3\x74\x2e\xa6\xb7\xf5\xfb\x0d\xe1\xe4\x79\xf3\x6b\xbd\xd2\xbf\x7c\x1e\x21\x2f\xe2\xe9\x3d\xac\x79\x05\x9d\x3d\xac\x76\x32\xed\x89\x66\xfe\x90\xb9\x1a\xe7\xdb\x39\xdb\xc3\xbc\x8d\xf3\x5d\xfc\xcd\x28\x0a\xd5\x5d\x4f\xa6\xfa\x32\x9d\xcb\xc3\x48\x29\x8d\x93\xfd\xe8\x1a\x02\x26\xf9\xa9\x60\x73\x7a\x52\xa6\x58\xb8\x4a\xed\x18\xb0\x3a\xc9\xdb\x94\xfc\xc3\xca\x34\x7d\x4d\xf2\xff\x34\xc9\xe1\xfa\x6c\xfd\x35\x61\xb4\x95\xbb\x89\x5c\xc8\x99\xd3\x35\xe7\x81\x55\x07\xda\x46\xca\xca\x2f\x42\x32\x26\x5c\x2e\xe5\x1d\xc6\x4c\x10\x57\xd6\x35\x64\x35\x1c\xdb\xfa\xe4\x3e\x71\x5b\x9a\xea\x2e\x58\x51\x0a\xb1\x62\xdb\x18\xbb\x29\xca\x6e\xde\xd9\x66\x34\xc8\xf0\x60\x5b\x29\x15\x57\xda\x1b\x0e\x8f\x2b\xe9\x34\x60\x4b\x56\x89\x8f\xc6\x4a\x3e\x3d\xce\xdd\xd6\x6e\x3a\x2c\xe6\x55\xa0\x6c\xab\xa3\xe8\xd5\x34\xf4\x13\x02\x13\x3f\x09\x6e\x22\x7a\x2d\xa9\x55\x30\xa7\xad\x09\x62\xf7\xfb\xec\xad\x65\x86\x6c\x7a\x7e\x83\x9b\x48\x4a\x11\x7d\x18\xce\x35\xad\xa9\xb0\x4f\x2d\xb8\x55\xbd\xf0\xfb\x3a\xf8\xaa\x0a\x78\xf3\x9b\xc6\xbc\xa0\xa8\x11\xc5\xa8\x51\xaa\x22\xa4\x28\xd5\x26\xff\xa3\x28\x4e\x2a\xaa\x6d\x79\x05\x36\x9c\xcb\xab\xa2\xe1\xdc\x28\x64\xcc\xe5\x78\xc9\xa9\xc6\x52\x92\xcc\xa6\x92\xf0\x4c\xa9\x4e\x57\xe6\x2d\xe9\xd5\x33\xe3\x1e\x1f\x9d\x3f\x6a\x43\x50\x54\x73\x86\x81\x2a\xdc\xcc\x8c\x05\x66\x6d\x08\xf6\xf0\x60\xe0\xec\x0d\xa3\x4f\xd1\xe7\x56\x01\xdb\x5a\x0e\x3e\xd5\x57\xff\xd1\x18\x28\xcb\x96\x95\xcf\x19\x21\x12\x39\x54\x16\x57\x79\xc3\x59\xe9\x2e\xaf\x22\xce\xd2\x53\xe1\xf2\x0b\x6a\x4f\x19\xc7\x3e\x2e\xa3\xe8\x67\xc4\x1d\xed\x1c\x96\x8e\x26\xaa\xde\x6b\x19\x31\xe2\xea\xec\xe8\xc3\x65\x6f\x5b\x6b\xbd\xe8\x5d\xca\x38\x60\x59\xe5\x72\xea\xcc\x28\xa7\xea\x01\x43\x61\xfc\x31\xda\x50\x5d\x7d\xa1\xd2\x2a\x2a\x67\x46\x4b\x95\xef\x1f\xaa\x2c\xf1\x32\x75\x89\xa7\xc1\x46\x99\xf7\x29\xa3\x17\x4f\x83\x93\x45\x99\xc2\x5c\xde\x8f\x63\xcd\x80\x30\x91\x72\x4d\xb9\x78\x7b\xb4\xfc\x8e\x33\xc8\x57\x94\xfd\x46\x28\x8b\x86\xf5\x8a\xb4\xaf\xc9\xfb\x6b\xf2\xfe\x8d\x93\xf7\x27\x2f\x9d\x67\x64\x6b\xc5\xf3\xe6\x37\xea\x3b\x44\xae\x28\x11\x95\x8a\xb2\x19\xaa\x1e\x5b\x69\x7f\xd4\xcb\x81\x5d\x02\x47\xc8\xe8\x3f\x92\x0c\x62\x11\xe4\x8d\x72\x84\x74\xc7\x98\x24\x45\xd0\x28\x6f\x78\xcb\xe0\x53\x8f\x3d\xef\x7f\xa2\xd8\x52\xb5\x84\x17\x88\x33\x3a\x6a\xe8\x70\x03\x1b\x83\xcd\x68\xe5\xfd\xc8\x8e\x01\x48\xa9\xb3\x48\xc3\xe5\x2b\xb6\xfd\x5c\x3d\xa5\x57\xd4\xcb\xf2\x0d\x46\x9a\x47\x90\x67\x8a\x65\x8a\x9b\x97\x39\x39\x94\xd6\xfa\xa1\x4f\x0f\xd5\xea\x70\x0e\xd3\x33\x75\xa3\x12\xe9\x6b\x97\xb5\x77\x33\xea\xf6\x45\xd4\x21\x79\xfd\x55\x4b\x2e\xeb\x2a\xae\xee\x7c\xab\xf2\xd8\x77\x58\x7e\x18\x66\xd6\x9c\x68\xe7\x6d\x03\x9b\x13\xce\x23\xf9\x5a\x91\xdc\x47\x22\xc1\x0f\xb7\x64\x21\xa4\x4d\x72\x22\x08\x4d\x30\xa2\xa0\x79\xa9\xef\x3b\x42\x03\x17\x0d\x10\x5d\xff\x06\x0d\xee\xa9\xf8\xfa\x8c\xb7\xfe\x6b\x76\xad\xd2\x17\x44\xf4\x23\x32\x64\x22\xfb\x92\xc8\x23\xe3\x03\x6e\xb1\xfc\x25\x4a\x83\xbd\x34\x6d\x8c\x19\x45\xc0\x28\x3d\x53\x7d\x60\xf4\x58\x2e\x63\x42\x2b\xcb\xfe\x6c\x01\xc5\x74\x81\x35\x11\x25\xbf\x72\xc8\x00\xee\xd1\x67\x17\x64\x79\x43\x40\x91\xb7\x10\x4d\xf7\x81\x45\xef\x4e\xf1\xa4\x0c\xd0\x59\x4c\x29\x07\x93\xb4\xf9\x7b\xbd\x55\xd3\xac\x3e\xac\x2e\x9e\x55\x97\x5c\xa8\xfa\x8e\x7b\xd5\xb4\xd7\x88\xf5\x43\xbc\x24\xd8\xee\x7d\xda\x91\x84\xad\xc6\x57\x35\xa2\xe9\x59\x0d\x28\x83\x55\x2f\xc3\xc7\x11\x17\x89\xae\x59\xe9\x07\x37\x8a\xde\xf7\xfe\x78\x4d\x81\x75\x13\x3e\x1c\xf5\x4e\x7b\x97\xbd\x5d\x1e\x02\x18\xd7\x89\x65\x30\xf8\x3e\xea\x17\x3f\x54\x59\xf8\xc5\x5e\xab\xed\xe2\x1c\xb2\xfe\xbb\xad\x83\xac\x28\xe8\x96\xbc\xe3\x67\xbb\xf9\xff\x89\xbc\xed\xb5\x5a\xf8\x5a\x2d\x7c\x9e\x6a\xe1\x23\xca\x81\x0a\x75\xb6\x2c\x07\x8e\x39\x9b\xec\xf0\xc5\x06\x30\xbe\x5b\xdf\xbc\xce\xf3\x3d\xb7\x7d\x16\x5c\xd9\x50\x16\xfa\xa6\x58\xd3\xfc\xb6\xf6\xf9\xf2\xe3\xbf\xee\x6b\xdb\x6d\x4a\x36\x86\x39\x97\x4a\x36\xca\xec\xc4\xba\x9f\x50\x59\x31\xf5\x89\x1f\xc3\x3e\xa7\xfd\x3f\xf2\x0c\xfb\x92\x2f\x5f\x9f\xd5\xfe\x1b\x16\xfd\x8b\x38\xc1\x63\xaf\x98\x04\xe1\x49\x2d\xa6\xa8\x2f\x50\x8a\xf2\xf7\x34\x94\x89\x8d\xda\xaa\x4c\x84\x99\x31\xea\x0a\xe5\xae\x7f\x4c\xca\xa0\x30\x02\x3f\xe6\xc4\x0f\x17\xaa\xbc\x98\x25\xce\xcd\xcb\xbd\xe0\xfd\x92\xf5\x64\x05\x51\x6b\xab\x7a\xa8\x57\xd9\x69\x05\x8a\x6d\x6b\xcb\x72\xa6\xd5\x5c\x6b\xb4\xd6\x95\x1a\x7f\xd5\xf3\x76\x2b\x2b\x0e\xb7\x2f\x2b\xf6\xfe\xff\xf0\xf4\xea\xa8\x77\xe4\x39\x7b\xc1\x37\xae\x2d\x36\x99\xd5\x03\x4b\x8b\xcf\xf0\xdd\x5f\x8d\xbb\xa3\x2d\xbf\xfe\x9b\x0d\x1f\xf4\xe1\x70\xd0\x3f\x3e\x3d\x39\xbc\x04\xd7\x4c\x64\xf2\x11\x47\x03\xd0\x95\xd0\x2d\xef\xcb\xbe\x9b\x13\x96\x46\xfb\xef\xe2\xd5\xdb\xdb\xb7\xea\x73\x13\xac\xbf\x54\x96\x62\x98\x70\x29\x4b\x79\x18\x12\x17\xa5\xe3\xd3\x48\x24\xdb\xc0\xf1\x9a\xfc\x06\x5e\xef\xa5\x1a\xef\xa5\xbe\xd1\x8f\x1b\xfc\x50\x90\x55\x35\xc4\x15\xc8\xb5\x91\x9b\x2e\xb8\x45\xb8\x59\x35\xb8\x88\x47\x65\xa6\x5e\x11\xef\x65\x11\x0f\x0d\x15\x8d\x1a\x02\x46\xe7\x12\xbd\xd8\x8c\xe7\xee\x21\x7f\x72\x41\xb0\x09\x49\x6e\x32\xe4\x92\xa7\x20\x1e\xcd\x09\x87\xc0\xa7\x30\xa3\x21\xe1\x22\xf1\x69\xa8\x60\x4a\x79\x48\x36\xbf\xf9\xf7\x1b\xdb\xc0\xc6\x63\x41\x10\x1d\x10\x7f\x82\x3c\xab\x69\x43\x64\x7c\x9e\x97\xaf\xde\x64\x4a\x48\x51\x6c\x7a\xf6\x1e\xbc\x57\x69\x50\xc0\x62\x79\xb1\x54\xa4\x42\xd9\xfa\x98\x0f\x05\xc6\x0f\x8f\xb5\x61\xe4\x8c\xf6\x02\x16\xef\x8d\x9c\x91\xfc\x51\x84\xa2\x13\x7d\xe4\x8d\xb3\x27\x12\x8e\xa2\xf0\x4e\x12\xe6\xbb\xb4\x85\x83\x8c\x57\xab\x73\xb9\x10\x36\xd2\xbd\x3d\xf3\x47\x0c\x82\x36\x44\x6d\x98\xdb\xa9\xfd\xef\x00\x00\x00\xff\xff\xb8\xcf\xf8\x48\xad\x5c\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0x46, 0x76, 0xc8, 0xca, 0xbb, 0xad, 0x87, 0x50, 0xc1, 0x15, 0x5d, 0xa8, 0x50, 0x61, 0x7e, 0xfe, 0xa7, 0xc8, 0x3e, 0xd9, 0xde, 0x5, 0xe3, 0xc1, 0xf6, 0xe1, 0x78, 0xc9, 0xe4, 0x5d, 0x2b}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\xd0\x07\xb9\x35\xe8\x3d\x07\xc8\x80\x3a\xf6\xb2\x0c\x5d\xec\xb9\x1e\x86\x62\x18\x56\x5a\x3a\x49\x5c\x24\x52\x25\xa9\x38\x86\xe1\xff\x7d\x38\x52\x92\x7f\xb4\x09\xd6\xc7\x3c\xd9\x3a\xde\x7d\x77\xdf\x77\xfc\x71\x8d\x48\x1f\x44\x81\xb0\xdf\xbf\xe1\x4b\xe1\x4a\xbe\x0c\x86\xc3\x81\x31\x59\x37\xda\x38\x48\x58\x14\x17\xd2\x95\xed\x86\xa7\xba\x9e\xfc\x2b\xd2\x87\x74\xd2\x14\x4f\x31\x1b\x31\x36\x99\xc0\xed\xfc\x7e\xbe\x7a\xbf\x9e\xcf\x60\xfa\x09\x96\x8b\xdb\x05\x87\xd9\x02\xee\x17\x6b\x98\xcf\xee\xd6\xdc\xfb\xcc\xa6\x20\x2d\xb8\x12\x21\xd5\x75\xad\x15\x48\xe5\xd0\xe4\x22\x45\xc8\xb5\x81\x4c\x38\xb1\x11\x16\x41\x37\x68\x84\x93\x5a\x91\xb3\x70\x90\x0a\x05\x1b\x84\xd6\x62\x06\x5b\xe9\x4a\xc2\x72\xbb\x06\x2d\xe4\x46\xd7\x60\xd3\x12\x6b\x01\x9f\xf7\x7b\xe0\x1f\xfd\x7f\x7e\x2f\x6a\x84\xc3\xe1\x33\x87\x7b\xed\x30\xa0\xb8\x52\x5a\x90\x96\x82\x45\x65\x35\xa4\xba\x91\x98\x51\x0d\x1a\x50\xa4\x25\xe8\xdc\xd7\xe6\xc4\xa6\x42\xe8\x24\xb1\x9c\x4d\x26\x14\xb2\xa6\x68\x5b\xea\xb6\xca\x60\xab\xcd\x83\x2f\x64\x28\x79\x62\xbf\x54\x7c\x36\x05\xa1\xb2\x73\xdb\xfa\x89\x33\x2a\xd5\x73\x1f\xd8\xee\x59\x34\x7f\xc2\x34\xb1\xce\x48\x55\x8c\x81\x73\x3e\x2c\xee\x0f\x23\x48\x9a\xe2\x89\xdf\xe8\xba\x16\x2a\x5b\x8b\x62\x0c\x68\x8c\x36\x23\x16\xfd\xde\xa2\xd9\x3d\x1f\xf6\x96\xe2\x56\x7a\x6b\x2f\x22\x56\x7a\xfb\x6c\x50\x1f\xc3\x0e\xbe\x47\x1f\x74\x01\x79\xab\x52\x92\x9f\xc3\xe2\x11\x8d\x91\x19\x06\xf1\x3c\x65\x92\xa8\xd2\x45\x81\x86\x04\xdb\xe9\xd6\x40\x5a\x6a\x99\x22\x7b\x14\xc6\x87\x5f\x7b\x80\x67\x13\xee\x43\xa2\x1b\xad\x32\xd9\x35\xb9\x35\xca\x82\x80\x4a\x5a\x47\xa0\xe9\x71\x89\xba\x43\xde\xf6\x4b\x05\x69\x25\x5a\x8b\xd6\x8b\xdc\x08\x23\x6a\xcb\x28\xd1\x09\x52\x42\x91\x96\x32\x0e\xb6\x11\x24\x14\xdb\x17\x13\xe2\xe0\xaf\xbf\x4f\x4a\xf2\x62\x75\x82\x51\x6b\x88\xc7\xb6\x44\x83\xe4\x17\x02\x83\xb1\x30\xba\x6d\x36\xbb\x4b\xb3\x36\x19\x9a\xaf\xcd\x95\xac\xa5\xbb\x34\x92\x82\x52\x39\xc6\x22\xda\xf1\xff\x8c\x3d\x57\xb8\xba\x06\x23\x54\x81\x10\xea\xdf\xb3\x28\x0a\x64\x69\x85\x6c\xfc\xc6\x7f\x26\x23\x16\x45\x32\xef\x94\xe0\x73\x2a\x19\x7e\xb8\x06\x25\x2b\x1f\x14\x19\x24\x2d\x49\xad\x9e\xea\xf8\xcc\x99\x45\xd1\x81\x45\x91\xdd\x4a\x97\x96\xfd\xca\x9a\xf6\xa7\xcf\x49\x87\x2f\xfe\xf3\x97\xf9\x6a\x1e\x5f\x11\x1c\x55\x6c\x30\xbf\xd0\x8b\x56\xba\xea\x7d\x8e\x93\xf2\x03\xe0\x32\x88\xec\x2b\x8a\xa4\x2b\xdf\xbd\xf3\xff\x3c\xd2\x35\x88\xa6\x41\x95\x25\xf4\x35\x86\xf8\x4d\xfc\xce\x3a\x93\x6a\xf5\xc8\xef\x9c\x16\x89\x74\xe5\x68\xe4\xdd\xbb\x56\x0d\x01\x3d\x1f\xff\xeb\x5d\x7c\x25\x5d\xa7\x06\xb7\xf0\x3d\x86\xbc\x76\xfc\x63\x63\xa4\x72\x79\xd2\xd5\xf5\xb3\x36\xb5\x70\x63\x4f\x89\x73\xee\xf3\x04\xce\xb7\xab\xc5\x1f\x4b\x98\x7e\x7a\x3d\xb4\x87\xbd\x38\x38\xf6\x96\xef\xa4\xbe\x58\xcd\xe6\xab\x57\x45\x7d\x38\x6f\x83\x63\x6f\xf9\x4e\xea\x1f\xee\x7e\xbb\x5b\xbf\x1e\xde\xdd\x85\x32\xb8\x85\xef\xff\xcd\x39\xc3\x5c\xb4\x95\xbb\x7a\xee\x9e\x20\x18\x7f\x49\xe4\x49\xdc\xaa\x07\xa5\xb7\xea\x78\x13\xfb\xf7\x36\x1e\x85\xfb\xe3\xc0\x58\x34\x99\x40\xd3\x3a\xc0\x47\x34\x3b\x57\x4a\x55\x80\xd3\x05\xba\x12\x4d\x77\x29\xb6\xee\xe4\xea\x93\x39\x54\xa8\xba\xb3\x39\x82\x9f\xe0\x47\xaf\x19\x39\x1d\x9b\xd8\xba\x71\x77\xfb\x80\x97\x4a\xaa\xc2\xf2\x5f\xb5\x54\xc3\x99\x8e\xe1\xfd\xfd\x0c\x62\xa2\x73\x18\x40\xfb\x7d\xff\x22\x6c\x7f\xc0\x2f\x91\x8f\x87\x26\x1e\x5f\x02\xf7\xbb\xea\x45\xe0\xfe\xf8\x5c\x02\x1f\xb7\xe4\xd7\xc0\xa1\x71\x2f\xc2\xfa\xad\x79\x89\xd9\x37\xfc\x88\xc8\x86\x4e\x9e\xe5\xf6\x10\x10\x8f\x8e\xcd\x55\xb2\x62\x17\xef\xee\x71\x1e\x09\x13\xca\x37\x16\xa8\xba\xfe\xe5\x81\xb7\xe1\x5f\x0f\x13\xde\x27\xeb\x4c\x9b\xba\x0e\xe0\xd4\x44\xa1\xfe\x61\x01\xe8\x37\x41\xd8\x94\xc3\xe7\xf2\x1b\x4f\x31\x8b\xc2\x9b\x16\x5e\xe3\x2e\xd5\x9d\xb2\x68\xc2\x54\xd6\x4d\x82\xd2\x5b\xfa\xe1\x8d\x26\x92\xd9\x74\x18\xd2\x24\x8d\x12\x74\xcc\x50\x49\x54\x34\x5b\x76\xe3\x8c\x1f\x32\xad\xac\x9b\x0a\xc9\x39\x80\x9c\x0c\x9b\x81\xc5\x49\xb6\x33\x1d\x82\x3d\xc9\x36\x30\x9b\x8e\x20\x59\xe9\xed\x30\x64\x85\x32\x57\x7a\x7b\x12\x21\xaa\x4a\x6f\x2d\xcd\x47\xe0\x34\x34\x6d\x55\xd1\x91\xf0\x93\x6b\x89\x60\x1b\x4c\x65\x2e\x53\xa8\x75\x86\x15\x8d\x39\x20\xa0\x40\x85\x46\xa6\xb0\x15\xbb\x50\xca\x39\xe2\x9e\x45\x33\x4c\x75\x86\xc9\x23\x9c\x0d\x54\xbd\x56\xff\x05\x00\x00\xff\xff\x51\xce\x6a\xc5\xc6\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xe7, 0xc, 0xcf, 0x12, 0xd4, 0xb0, 0xd, 0x9c, 0x49, 0xca, 0x67, 0xee, 0x60, 0xcf, 0xb5, 0xa6, 0x9f, 0xb6, 0xea, 0x5e, 0xd0, 0x80, 0x61, 0xde, 0xa, 0xc8, 0x3c, 0xa6, 0x3f, 0x3f, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
