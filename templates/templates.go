// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/many.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x61\x6b\xdb\x30\x14\xfc\x3c\xfd\x8a\x23\x04\x6a\x87\x4c\xfe\x3e\xe8\x87\x76\xf1\x4a\x61\xc4\x63\x09\x85\x31\xc6\x90\x9d\xe7\x54\xcc\x96\x3d\xc9\x0e\x04\x4d\xff\x7d\xd8\x72\x16\x1b\x02\x65\xd0\x16\x9a\x4f\x41\xba\x77\xef\xde\xdd\x93\xad\x8d\x16\x78\x10\x5a\x8a\xb4\x20\x83\x45\xe4\x1c\xb3\x16\xf3\x4f\xba\x95\x0d\x3e\x5c\x83\xc7\xaa\x2d\xf9\x5a\x94\x84\x3f\xa8\x85\xc9\x44\x81\x01\x93\x5f\xc4\x64\xa2\xa4\x1e\xc2\x6a\x91\xfd\x12\x7b\x02\xa9\xb6\x64\x2c\x8a\x70\x17\xaf\xe3\xaf\x37\xdb\x78\x85\xdb\x6f\xf8\x92\xdc\x25\x1c\xab\x04\xeb\x64\x8b\x78\x75\xbf\xe5\x8c\x75\x6a\x9e\xeb\xe7\x27\x89\x16\x48\x5a\xdd\x4b\x40\x73\xac\x09\xff\xce\x9f\xb3\x4f\x37\x9c\xb5\xde\x34\xe7\x20\x0d\x9a\x47\xc2\xcc\xda\xf9\xd9\x1a\xe7\x66\x23\x19\xb9\xae\x4a\x0f\xd8\x64\x8f\x54\x8a\x13\x84\xb3\xfe\x7a\x44\x66\x1a\x2d\xd5\xfe\x0d\x7b\x93\x55\xca\x34\x08\x18\x60\xed\x7b\x68\xa1\xf6\x84\xf9\x41\x14\xdd\xe6\x0c\xfe\x3c\x88\xa2\x25\xd3\x2d\x0d\xd0\xc1\x30\xbf\xa9\xeb\x82\x7a\xc4\x41\x14\xfc\xb3\x48\xa9\x98\xec\xdf\x09\x27\x2e\xe0\x86\xeb\x49\x26\xd6\x7a\xca\x73\x3a\x57\xd6\xfa\x6a\xe7\xae\x46\x40\x3e\x50\x5f\x28\xbc\x1e\x1d\x07\xb3\x73\xf9\x2c\x1c\x66\x23\xb5\xeb\x9a\x87\x2f\x14\xd6\x46\x34\xd2\xe4\xc7\x5e\xbd\xf9\x5d\x44\x3b\x2d\x0f\xa4\xbd\x79\x1a\x52\x35\xa4\x73\x91\xbd\xe0\x8a\xf7\x9d\x60\x7a\x19\x92\xcc\x93\x42\xf2\x4a\x4f\x9c\xcd\x5b\x95\x21\xb0\xd6\x7f\x39\x9c\x1b\x5d\x86\x9e\x3c\x08\x11\x8c\xd9\x96\x20\xad\x2b\x1d\xc2\x32\x40\x53\xd3\x6a\x35\x3c\x88\x11\x4d\xb8\x84\x92\x05\x73\xaf\x60\x7b\xbd\xef\x1e\x8a\xe1\xb1\xca\xaa\x1d\xdd\x4a\x25\xf4\xf1\x35\x9c\x9f\xf4\xdb\x4c\x02\x78\x42\xd2\x7f\x65\x30\xe6\x08\x7e\x62\xe1\xb9\xf9\xc7\x4a\xa9\x7b\x95\x57\x4b\xa4\xf8\xfe\x23\x3d\x36\x14\x22\xf0\x7f\x2e\x05\x24\xea\x9a\xd4\x2e\x48\x97\x03\x78\x1c\x15\xe7\xfc\x14\xd7\xbb\xbf\x01\x00\x00\xff\xff\x3b\x56\x37\x75\x7c\x06\x00\x00")

func enumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_enumGotmpl,
		"enum.gotmpl",
	)
}

func enumGotmpl() (*asset, error) {
	bytes, err := enumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xb6\x9a\x4c\x4b\x39\x0a\xd5\xb3\x3b\x3a\x38\x11\xe3\x3a\xe3\xc8\x8e\x24\x27\xd3\xf1\x64\x6c\x98\x5c\xc9\x68\x48\x80\x01\xc0\x28\x1a\x9a\xef\xde\xc1\x0f\x29\x50\x96\x6d\xd5\x49\x4f\xbd\x91\xdc\xdd\x0f\xfb\xf3\xed\x2e\x58\x55\xc3\x03\xf8\x48\x04\x25\x37\x19\x4a\x38\x18\xd6\x75\x50\x55\xf0\xe2\x42\xa2\x80\xc3\x11\x44\x73\x2d\x88\xde\xf3\x14\x33\x70\xb2\x72\x97\xec\x0e\x24\x65\xcb\x32\x23\x02\xee\x20\x21\x79\x57\x5d\x7a\xfa\x13\x92\x23\xdc\x41\x91\x95\x82\x64\xbe\x72\x50\x90\xe4\x0b\x59\x22\x54\x95\x33\xba\x83\x8c\xaf\x50\x68\xd9\x70\x08\xc7\xf1\x24\x9e\x1e\xcd\xe3\x31\xbc\xfe\x0b\xce\xcf\x8e\xcf\x22\x18\x9f\xc1\xe4\x6c\x0e\xf1\xf8\x64\x1e\x19\x9d\x58\x88\xaa\x32\xde\xd7\xf5\x84\xab\xb7\xbc\x64\x29\x08\x54\xa5\x60\x98\x02\x5d\x80\xba\xd5\xf8\x9e\x2b\x75\x0d\x54\x02\xe3\x0a\x16\x5a\x39\xf8\x46\xc4\x6e\x94\x11\xa0\x10\x5c\xc8\x68\x82\xab\xb0\xb7\x8d\xd1\x02\xf4\xfa\xc6\x91\xd6\xfe\x84\x15\xa5\x82\xdc\x24\x69\xc1\x05\xf4\xaa\xea\x45\x34\x4b\x6e\x31\x27\xce\xb6\x17\x99\x6f\x3e\x5c\x2f\x50\xeb\x02\xb7\x41\xa4\x12\x65\xa2\xa0\x0a\x00\xaa\xea\x15\x08\xc2\x96\x08\x2f\x12\x9e\x79\xd9\x7d\xc3\xb3\x32\x67\x52\xe7\x53\x6b\x19\x71\x93\xf2\x26\xd3\x70\xd0\x08\x8e\xf9\x5c\x9f\xe3\x94\x5f\x01\xb2\x54\xbf\xd4\xdd\x10\x7e\xd4\xfb\xe7\x38\xee\xfb\x5d\x10\x99\x90\xac\xae\x75\x3c\x74\xe1\x42\xe2\x6a\x52\x66\x3a\x1a\xa7\x6b\x43\xd1\xaf\x80\x99\xd4\x31\x1d\xec\x90\xd8\xf8\x76\x04\x3b\xc1\xd5\x9e\xc1\xc1\xd1\xf9\x49\xb0\x28\x59\xa2\x6d\xc2\xbe\x4e\x66\xa7\x4a\x3a\x4a\xcb\x38\xf8\xb5\x2b\xaa\xcc\x61\x55\xf5\x64\x02\x74\x79\xe2\x9c\x50\x2b\xee\x64\xa1\x11\xe3\xb6\xb8\x6d\x23\x5b\x39\x63\xae\x53\x8f\x4a\x1a\xd2\xeb\x40\xd0\x7e\xec\x59\xf7\x43\xd7\x67\x96\x10\xbe\xa3\x7d\x0f\x21\xdc\xd8\xc1\x56\x42\x77\xc7\xde\xa2\x46\x9e\xe5\xc8\xe4\xc2\xbd\x6d\x12\xd4\xea\x06\x3a\xaa\xb6\x24\x3a\x86\xf7\x44\xc8\x5b\x92\xbd\x9b\x9d\x4d\x20\xb7\xcf\x9b\x40\xac\x51\x0f\x28\x53\x1c\xb4\xca\xd3\x11\x79\x78\x61\x1f\xc2\xcb\xcf\x37\x6b\x85\x03\xdb\xd3\x7d\xbf\x68\x7f\x4b\xce\x22\xa7\xbd\x01\xec\x3b\x9e\x5c\xb0\xdc\x73\xac\x64\xad\x6b\xda\x0c\x14\x07\xe2\x3b\xf8\xb4\x5b\x1d\xbc\x30\x25\x8a\x80\x75\xad\x6f\x5d\xbb\xe7\x59\x6b\x60\x94\x07\xd0\xf5\xf0\xc9\xf3\x66\x4a\x50\xb6\x0c\xfb\xba\x27\x29\x5b\xfa\xf0\xbe\xdf\x0d\xd4\x12\x95\xe3\xe5\x63\xa0\x39\x29\x2e\x2d\xde\x67\xca\x14\x8a\x05\x49\xb0\xaa\x0d\x76\xe2\x58\x7d\x38\x82\x9c\x7c\xc1\x70\xb7\x6a\x3f\xb0\xd3\x6a\xbf\x91\xd6\x72\x7f\xd7\x70\x0b\x40\xcf\x88\x9d\x24\xfc\x65\x04\x8c\x66\xc6\xad\xd6\xb1\xcb\x9e\x37\x6b\xea\xba\xf7\x19\x46\x26\xbe\x7b\xd6\x01\x80\x3b\xbf\x21\x69\x9b\x38\x07\xe5\x18\xf2\xe9\x16\x05\xbe\xc9\x48\x29\x51\x6f\x16\xd2\x4c\x3f\xc5\xe1\x96\xb0\x34\x43\x58\x69\x0d\x48\x8c\x8a\xb4\xb3\xd2\x37\xf2\xa6\x65\xc2\x59\x4a\x15\xe5\xcc\x95\x2b\x00\x28\x88\x20\xb9\xd4\x11\x5c\xfa\x19\xf4\x0f\x07\x59\x60\x42\x17\x14\x6d\xc3\xb4\x20\xd2\xd6\xd4\xe8\x84\xdb\xd0\x83\x06\x39\x8a\x22\xbf\x32\x70\xe0\xfb\xe6\x0f\x37\xef\x7b\x93\x52\x07\x79\xb8\x79\x1c\x18\x89\x85\x3e\xdc\x3c\x0e\x4c\x3a\xad\xcf\x27\x4c\xa2\x50\xdd\xc6\xb1\x9d\xbd\xe7\xb6\x31\x51\x59\x94\x30\xbd\xd1\xb5\x8f\xce\xed\x55\xa2\xae\xa3\xf1\x6b\xaf\x47\xec\x94\xba\xc7\xdf\x70\xf3\xa5\x33\x11\x86\x43\xdd\x00\x40\xb2\xcc\x24\x92\x71\xf6\x4a\x13\x68\x41\x31\x4b\x25\x10\x96\x42\x21\xb0\x20\x02\xb5\x38\x37\x0b\x52\xeb\x7d\x2d\x51\xac\x03\x80\xab\x64\x00\x57\x74\x00\x57\xdf\x34\x59\xbb\x6e\xcd\x32\x9a\x60\xb8\xab\xbd\xac\x4f\x03\xf8\xdd\x34\xc5\x70\x08\xf2\x6b\x06\xd4\xe6\xc8\x20\x0f\xa0\x10\x34\x27\x62\x0d\x5f\x70\x0d\x85\xe0\xdf\x68\x8a\x29\xdc\xac\x41\xe2\xd7\x12\x59\x82\x01\x68\x23\xa9\xcc\x35\xed\x3a\x00\x38\x99\xcc\xe2\xe9\x1c\x4e\x26\xf3\xb3\x7d\xb7\x5c\x78\x0d\x2f\x1d\x35\x64\xf4\x8e\x53\x16\xea\x70\x7a\x03\xe8\xf5\xe1\x25\x5c\xf7\x03\x80\x8f\x47\xa7\x17\xf1\x6c\x97\x26\xdd\xd2\x9c\xc6\xf3\x8b\xe9\xe4\x64\x72\x0c\x9b\x83\x66\x1f\x4e\xa7\x86\x49\xa6\xb7\xae\xed\xe6\xf0\x32\x74\xca\x97\xa1\x8d\x42\x67\x30\x8a\xa2\x26\x1f\xa2\x64\x9d\x34\xeb\x1b\xdb\x66\x38\xb5\x95\xd4\x4c\xe5\x2b\x9d\x81\xf4\x26\xfa\xa0\x75\xa7\x7c\xb5\x8d\x68\x86\x05\x6a\x25\xc1\x57\xd1\x2c\x21\x2c\xdc\x78\x78\xcc\xf5\x87\xba\xee\xff\x01\xd8\x1d\x1e\xae\x05\x18\xcd\x06\x80\x86\xca\xdd\xa5\x5f\x3a\x2e\x31\x9a\xb9\x95\x4f\x17\x9b\x71\x96\x17\x5c\x52\x85\xcd\x2a\x4f\x0a\xd9\x99\x76\x9e\x78\x38\x84\xb7\x94\xa5\xae\x37\x2e\x5c\x6f\xdc\xac\x81\x2a\x69\xb6\x71\x21\xa3\x31\xca\x44\xd0\x42\x37\x5b\x5d\xdb\x5e\xd0\x36\x0f\x76\x82\xb6\x39\xe6\xe7\xa6\x0d\xf5\x0e\x7f\x84\xfc\x9a\x79\x12\x33\x4c\x9e\xcf\x3c\x80\x59\x7c\x1a\xbf\x99\x77\x0b\x3f\x33\xa0\xa6\x46\x00\x6f\xa7\x67\xef\x77\xb0\x32\xba\xdf\xe8\x5a\xfb\xd3\x9f\xf1\x34\x6e\xe2\x98\x7d\x38\x35\x53\x68\x0f\x0a\xb5\x91\x7f\x24\x42\xc7\xfd\x33\xc9\x74\x0f\xfb\x99\xb4\x32\x46\xa3\x11\x14\xcb\xef\x51\x2c\xc4\x84\x4f\xf9\x4a\x3a\x59\x97\x74\xbb\xfe\x50\x8c\x5a\xfd\x0c\x7e\x7a\x3b\xed\x47\x98\x7a\x51\xa4\x44\xe1\xbf\xe5\xaa\xb5\xda\x93\xad\xcf\x1f\xe5\x6e\x66\x1f\x8e\x76\x5e\x69\xac\xb1\xa3\x44\xca\xd9\x6f\x0a\x4a\x1b\x8d\xe6\xc6\x82\x0b\xa4\x4b\xa6\x49\x2f\xb7\x7e\x61\x0a\xd9\x5c\x4f\x0c\x47\x52\xcc\x50\x61\x68\x0f\x1b\xe8\x44\x34\xdc\xed\x77\x7f\x3a\xec\x49\xde\xf6\x00\xa9\x17\x82\xdc\x6b\x6b\x34\xf0\x2e\x3d\x93\x32\x6f\x7d\xf0\x77\x46\x43\x69\xaf\x21\x2f\xce\xc7\x47\xf3\x78\xdf\x15\x30\x8b\xe7\x66\xb8\x1b\x4a\x3d\xb2\x0a\x60\xf4\x90\xda\xf6\x1e\x78\xac\x7d\x9f\xdc\x12\xd7\x4d\x6c\xa8\xca\x62\xab\x69\xb3\x12\x4d\x71\x3b\x77\xa2\xaa\x7e\xbc\x5a\xce\x6c\x04\xa4\x28\x90\xa5\xa1\x7d\xd7\x79\xed\x5c\x2a\x6d\x43\x7b\xc5\x7b\xd8\xb2\xdd\x2a\x0f\xcf\x21\xab\xfa\xb3\xd7\x99\x87\xfa\xbf\x9c\x3d\x63\xd3\x78\xfb\xcf\x9e\xc8\x0e\x1f\x6b\xb6\xf7\xaa\xdc\xfc\x91\x6d\xb5\x58\xc2\x99\x54\x4d\xa3\x35\x8b\x6f\x1c\x9f\xc6\xf3\xf8\xa1\xf5\xb6\xf3\x26\xfb\x1f\x2d\xb8\xc6\x4d\xba\x80\xab\x81\xe5\x46\x7a\x13\xc5\xdf\x31\x79\xd0\xfa\x79\xfc\xd8\x8f\x1a\xdb\xac\xd8\x62\xc2\x3f\x01\x00\x00\xff\xff\x5b\xef\x1c\x78\x94\x14\x00\x00")

func manyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_manyGotmpl,
		"many.gotmpl",
	)
}

func manyGotmpl() (*asset, error) {
	bytes, err := manyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "many.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xda\x48\x12\x7f\x5e\x3e\x45\x1f\x95\xca\x0a\x2f\x2b\xb2\xaf\xb9\xe2\x21\x31\x8a\xcf\x7b\x0e\x38\x06\x67\xef\xca\x95\x8a\xc7\x52\x83\x75\x16\x23\x65\x46\x32\xa6\x14\x7d\xf7\xab\xf9\x23\x69\x04\x02\x04\xb6\xb3\x97\xdb\xbc\x01\xd3\xd3\xea\x3f\xbf\xfe\x4d\xf7\xa0\x34\xed\x1d\xc1\x47\xc2\x7c\x72\x13\x20\x87\xa3\x5e\x96\xb5\xd2\x14\x5e\x5c\x72\x64\xf0\xba\x0f\xf6\x44\x2c\xd8\x43\x32\x47\xf8\x0a\xdc\xa7\xb3\x24\x20\x0c\xbe\x42\x44\xb8\x4b\x02\xd0\xe2\xc9\x2e\x71\x97\xcc\xb1\x22\xcd\xd7\xc5\xa3\x20\x61\x24\x30\x85\x5b\x11\x71\xef\xc8\x0c\x21\x4d\xf5\xa6\xaf\x10\x84\x0b\x64\x62\xad\xd7\x83\x13\x67\xe8\x5c\xbc\x99\x38\x03\x78\xfb\x6f\x38\x1f\x9d\x8c\x6c\x18\x8c\x60\x38\x9a\x80\x33\x38\x9d\xd8\x52\xc6\x61\x2c\x4d\xa5\x3f\x59\x36\x0c\xe3\x77\x61\x42\x3d\x60\x18\x27\x8c\xa2\x07\xfe\x14\xe2\x5b\xa1\xdf\x30\x25\xcb\xc0\xe7\x40\xc3\x18\xa6\x42\xb8\x75\x4f\x58\xbd\x96\x3e\x20\x63\x21\xe3\xf6\x10\x17\x56\x7b\x55\x47\xa1\xa0\xdd\x91\x86\x14\xfb\x4f\x69\x94\xc4\x30\x0f\x3d\x0c\x60\x1a\x32\x68\xa7\xe9\x0b\x7b\xec\xde\xe2\x9c\xe8\xbd\x6d\x5b\xfe\x66\xaa\x6b\xb7\xe2\x65\x84\xab\x4a\x78\xcc\x12\x37\x86\xb4\x05\x90\xa6\xbf\x02\x23\x74\x86\xf0\xc2\x0d\x03\x23\xba\xc7\x61\x90\xcc\x29\x17\xf1\x14\x52\x72\x39\x0f\x79\x1e\x69\x38\xca\x17\x4e\xc2\x89\x78\x8e\x16\xfe\x15\x90\x7a\xe2\x4b\x56\x75\xe1\xb1\xd6\x1f\x62\xb8\x69\xb7\x42\x5f\x96\x09\x7f\xfc\xa9\x76\x29\x8c\x87\x49\x20\xbc\xd1\xb2\xca\x15\xf1\x15\x30\xe0\xc2\xa7\xa3\x9a\x15\xe5\x5f\x8d\xb3\x43\x5c\x34\x74\x0e\xde\x9c\x9f\xb6\xa6\x09\x75\xc5\x1e\xab\x23\x82\x59\xc9\x92\xf0\x52\x21\x0e\x5e\x56\x97\x52\xf9\xb0\x34\xdd\x19\x00\x91\x1e\x67\x4e\x7c\xb5\x5c\x89\x42\xbe\x8c\xab\xcb\x45\x19\xa9\xcc\xc9\xed\x22\xf4\x18\x73\x09\x7a\xe1\x08\xaa\x1f\xdb\xca\x7c\x4b\xd7\x99\x02\x84\x69\x68\xc7\xd0\x60\x95\xfb\x60\x25\xa0\xf5\xbe\x17\x5a\x6d\x63\x67\x5f\xc6\x42\x7f\x2b\x03\x54\xc8\xb6\x84\x57\x45\x4a\x84\x0f\xef\x09\xe3\xb7\x24\xf8\x7d\x3c\x1a\xc2\x5c\x7d\x2e\x1d\x51\x9b\xda\xe0\xd3\x38\x04\x21\xb2\xdb\x23\x43\x9f\xd5\x01\xeb\xea\xd3\xcd\x32\xc6\xae\xaa\xe9\x8e\x99\xb4\xff\xf0\x90\xda\x5a\xba\x54\xd8\xd1\x38\xb9\xa4\x73\xc3\xb0\x84\x16\xa6\x89\x6d\x10\x87\x40\x4c\x03\x77\x9b\x55\xd1\x67\x79\x24\x26\xa0\x4c\xeb\x28\xd3\xd6\x2c\x2b\x36\x48\xe1\x2e\x54\x2d\xdc\xf9\xbc\x71\xcc\x7c\x3a\xb3\x3a\xa2\x26\x7d\x3a\x33\xd5\x9b\x76\xe7\xaa\x66\x18\x6b\x5c\x6e\x53\x3a\x27\xd1\x95\xd2\xf7\xc9\xa7\x31\xb2\x29\x71\x31\xcd\xa4\x6e\x57\xa3\xfa\x75\x1f\xe6\xe4\x0e\xad\x7a\xd1\x4e\x4b\xb1\x55\x33\x4a\x2b\xb0\x5f\x47\x6e\x2d\x10\x1c\x51\x0b\xc2\xbf\xf5\x81\xfa\x81\x34\xab\x30\xec\xaa\x6d\x70\x4d\x96\xb5\x3f\x41\x5f\xfa\xb7\xb6\xbb\x05\xa0\x9f\x9f\x83\xb4\x08\x9c\x56\xa5\x11\xf2\xc7\x2d\x32\x3c\x0e\x48\xc2\x51\x9c\x2c\x24\x67\xbf\x38\x84\x5b\x42\xbd\x00\x61\x21\x24\xc0\x95\x22\x5c\x71\xa5\xb9\xc9\x60\x4b\x37\xa4\x9e\x1f\xfb\x21\xd5\xe9\x6a\x01\x44\x84\x91\x39\x17\x1e\x5c\x99\x11\x34\x1f\x0e\x3c\x42\xd7\x9f\xfa\xa8\x0a\xa6\x50\xc2\x55\x4e\xa5\x8c\xb5\xaa\xba\x9b\x6b\xb6\x6d\xdb\xcc\x0c\x1c\x99\xb6\x99\xe4\x66\xfc\x9e\x87\x54\xab\x7c\x5d\x7e\xec\xca\x15\xa5\xfa\x75\xf9\xb1\x2b\xc3\xa9\x6c\x3e\xa5\x1c\x59\x5c\x2d\x1c\x55\xd9\x79\xb9\x37\x38\x71\xa4\x67\x4a\x93\xe5\xdd\x88\xfc\xdb\xe7\xaa\x9d\xc8\x32\x7b\xf0\xd6\xa8\x13\xc5\x54\x6b\x18\xb6\xca\x5f\x2a\xac\xd0\xeb\x89\x22\x00\x12\x04\xd2\x1c\x1a\xd2\x5f\x05\x88\x72\x5c\x13\xea\x41\xc4\x30\x22\x0c\xc5\xfa\x5c\x9e\x92\x42\xf0\x4b\x82\x6c\xd9\x02\xf8\xec\x76\xe1\xb3\xdf\x85\xcf\xf7\x02\xb1\x55\xbb\xc6\x81\xef\xa2\x55\x57\x63\xca\xa8\x2e\xbc\x92\x95\xd1\xeb\x01\xff\x12\x80\xaf\x02\x25\x35\x77\x21\x62\xfe\x9c\xb0\x25\xdc\xe1\x12\x22\x16\xde\xfb\x1e\x7a\x70\xb3\x04\x8e\x5f\x12\xa4\x2e\xb6\x40\x6c\xe2\xb1\x6c\xd5\xae\x65\x1a\x4e\x87\x63\xe7\x62\x02\xa7\xc3\xc9\xa8\xe9\x61\x67\x5d\xc3\x2f\x1a\x21\xdc\xfe\x3d\xf4\xa9\x25\x1c\x6a\x77\xa1\xdd\x81\x5f\xe0\xba\x23\xf5\x7e\x7c\x73\x76\xe9\x8c\xeb\x64\xfd\x35\xd9\x0b\x67\x72\x79\x31\x3c\x1d\x9e\x40\xf9\xb0\xf1\x87\xb3\x0b\x09\x2a\x59\x66\xd7\xea\x10\x31\xe2\x74\x16\xce\x2c\xe5\x8b\x88\xa3\x6d\xdb\x32\x2a\xa2\x53\x2b\x49\xa9\xc8\x9e\x40\x68\xb8\x10\x4e\x7b\x37\xf6\x07\x11\xab\x8b\x70\xb1\xba\x5d\x92\x04\x0a\x21\x16\x2e\xec\xb1\x4b\xa8\x55\x9a\x73\x12\x8a\x1f\xb2\xac\xf3\x77\xc0\x2a\x69\x68\xe8\x53\x3f\xe8\x02\x4a\x08\x57\x0f\xfb\x44\xe3\x87\xfa\x81\x3e\xea\xfd\x69\x4e\x63\xe7\x2a\x5f\xff\xc4\x65\x7e\x86\x47\x77\x06\xcb\xad\x2f\x97\x34\x17\xdd\xd5\x9d\xf2\xef\x7c\xea\xe9\xaa\xb9\xd4\x55\x73\xb3\x94\x5f\xb5\x7c\x51\x17\x42\x52\x54\x45\x14\xce\xc2\xbc\x18\x72\x52\x54\xf9\xda\x8a\x7f\x81\x3d\x8e\x01\xba\x8f\xc1\xde\xd8\x39\x73\x8e\x27\x65\xef\x3d\xfe\x70\x36\x96\x3a\x65\xc6\x00\xde\x5d\x8c\xde\x37\x2d\x76\x21\xff\xc7\x3f\x9c\x0b\x67\xc5\x5b\xe8\xc3\x8b\xdf\x34\x82\xa4\xaf\x26\x70\x8c\x06\xe4\x70\xf8\x54\x94\x1c\x08\x22\xb9\xa9\xdf\x87\x68\xf6\x60\x3b\x8c\x0d\xc3\x8b\x70\xc1\xf5\x5a\x15\x62\x75\x73\x88\x14\xcb\x0e\x40\xa3\x71\x72\x95\x27\xad\xef\x3d\x18\x18\x3c\xa5\x1e\x3e\x20\x37\xf0\xf5\x76\x99\xa6\x42\xc8\x3e\x09\xdf\x63\x7c\x1b\x7a\x59\x06\x53\x85\xbb\x32\x76\x37\x4b\xd0\x52\x03\xe4\x2e\xf3\x23\x41\xfc\x59\x56\x62\xaf\x46\xcb\x46\x92\x56\x62\xe7\xf2\x94\x10\x2d\xe6\x37\xc3\xe5\x8b\x27\x05\xa6\xf6\x64\xfc\xe1\x4c\x1e\x93\x0d\x88\xad\xf0\xfd\x23\x61\xfc\x31\x18\x5d\x53\x04\x22\x6e\xbb\x60\xaa\xd1\xcc\xd8\x3a\x58\x19\x6b\x06\xd7\xbd\xf0\xca\xd8\x3e\x88\xd5\x70\x1c\x51\x54\xf0\x0b\x29\x56\x01\x48\xca\x96\xa3\xc4\xdd\x88\x62\x3d\xce\x54\x07\x66\x76\x36\xcf\x0d\xb4\xed\xf4\xb7\x1f\xc6\x14\xc2\xc4\x61\x2b\xfd\xb0\x4b\xcf\xb7\xe1\x4b\xc9\xaa\xf6\xeb\x51\x47\xe8\x9a\xa2\x67\xe7\xc1\x27\x25\xc2\x9f\x0a\x34\xbd\x27\x74\xa9\xe0\x34\x17\x9f\x8c\xf6\xf3\x67\xae\x30\x35\xf3\xef\x91\xd6\x21\x4b\x6c\xdd\x03\x5a\xf9\x8d\x56\x96\xc1\xd5\xa7\x15\x9c\xfd\x55\xb0\xc6\xc2\x05\xef\xe6\x4c\x94\xe3\x6a\x17\xa8\x56\xe9\xa8\x7a\x6f\xc0\x75\x08\xf5\x6c\xe6\xe1\x14\x99\x7c\x8e\x7d\x1c\x84\x1c\x2d\xf9\x5c\xd1\x90\xcb\xdf\x86\xf8\x10\x5b\x1d\xad\x68\x33\xf2\x2b\x68\xe6\xcd\xe1\xbc\x0b\xd0\xb5\xc6\x6f\x04\x76\x0e\xed\x2d\x2e\xe7\x22\x06\xb8\xfa\x40\xa2\x08\xa9\x67\x99\xd2\x2f\x8d\x2b\x02\xb5\xc7\x9f\x2a\xdf\x1c\xc6\xac\xce\xce\x00\x97\xa2\x79\x69\xf5\x7a\x80\x94\x27\x0c\x61\x81\xf9\x0e\x42\x01\xe7\x51\xbc\x04\xc2\x18\x59\x2a\x21\x46\xe2\x5b\x14\xe3\x10\x91\xc5\x29\x92\x4c\xc5\x16\x7d\x83\xa1\x84\xfc\x29\x04\x48\x0d\x8b\x3b\x22\x86\xaf\xf2\x7a\xf8\x49\xeb\x97\xb7\x07\xd5\xe2\x79\xd5\x51\x25\x2d\xe5\xcc\x9a\x37\xad\xff\x26\xad\xf8\x65\xe4\x91\x18\xd7\x46\xd8\xa6\x43\xd6\xcd\x12\xfc\x98\xd7\xb6\xee\x4a\xf3\xc6\x6e\xc9\xb8\x99\x8b\xee\x8a\x8b\xb9\xc3\xa7\xdd\xa9\x8f\x81\x27\x6f\x6b\x36\x4f\xa5\x1a\x01\x5e\x48\x7f\x8e\x21\x51\x9e\x8b\x89\xd7\xe0\x29\x59\x8c\x01\xc6\x68\x29\x85\xdd\x15\xdf\x72\x1d\xc6\xe4\x0c\x5c\x0c\xc3\xbc\xd1\xc4\x9c\x2b\xfd\xcd\x9c\x8e\xf3\x81\xdb\xe0\xc2\xcb\xf3\xc1\x9b\x89\xd3\x34\x0b\x63\x67\x22\x47\x58\x5d\x77\x1b\x87\x5e\xb9\x7e\xdd\x81\xfe\x66\x69\x7f\x4d\x7a\xe7\xcc\xb2\x73\x32\xbe\xce\x7d\xc5\x38\x89\x0a\x6f\xef\x49\x90\xa0\x4c\x98\xae\xfc\xca\xad\x50\x6a\xcc\x2b\x99\x31\xfc\x6e\x66\x6e\xa5\x2f\xe7\x6c\x51\xc3\x09\xad\xdc\x67\x1c\xd4\x32\x18\x5a\xbf\xaf\x66\xa1\xc9\xd4\x74\x49\xfd\x2f\x49\x31\x35\xa9\x82\xdd\x3e\x37\xe9\x90\x19\x05\x7e\xf8\x84\xf4\xe7\xd4\xfa\x1d\x2e\x79\xf5\xdf\x1c\x61\x95\x56\x92\x65\xb5\xf5\x5f\x16\x7f\xe5\xff\x97\x27\x61\x02\x1d\x96\x61\x32\x2f\x6c\x78\x3e\x6e\xd8\x72\x1d\x66\x92\xc2\x96\x9b\x30\xc8\x65\xae\x37\x4c\x8b\xa5\xc0\x5e\xac\x50\x2d\xd4\x9c\x19\xaa\x94\x90\x6d\xcf\x9b\xde\x56\xf0\x89\xfa\x2e\x22\x5c\x39\xf8\x54\x33\x61\xa4\x71\xf3\xce\xbf\x04\xeb\x3c\x17\xe9\x14\x8c\x22\x87\x15\xd1\x8a\xed\xd7\x57\x6c\x98\x61\x4a\x9d\x4d\xa7\x98\x06\x3c\xb3\xc7\x94\x73\x60\xb9\x6f\xbb\x2a\x17\x4d\xa4\x39\x45\x74\xbe\x27\x02\xa8\x19\xb0\x84\xdc\x33\xd3\xc0\xa6\x8a\xad\x19\xc6\x9e\xba\xb8\x73\xf3\xb6\x4f\x85\x6b\x15\xfc\x63\x1e\xfc\x31\x0f\x7e\x07\xf3\xe0\x40\x36\x3f\x2b\xf3\xe0\x94\x85\xf3\x3d\xfe\xd2\x84\x58\x7c\x53\x74\xad\xf4\xed\x39\x05\x9a\x6f\x10\x6c\xa6\xc1\x81\x73\xe6\x4c\x9c\x7d\x6e\x85\x36\x8f\x31\x3b\x2f\xb8\xcd\xff\x5f\x56\x88\xc0\x9f\xc2\xe7\xae\xaa\x33\xef\xc6\x76\x1e\xd0\xad\xdb\x78\xd8\x09\xdd\xec\x70\x5e\x3d\x97\x0f\x1c\x00\x54\xae\xea\x06\x00\xd5\x12\xf3\xba\x57\x44\x36\x6e\x6a\xfc\x3f\xc9\x5a\xae\xd5\xd3\x9e\x34\xe5\x6b\x6d\xea\xfe\xff\x68\x6c\x4f\x73\x45\xfc\x4f\xcd\x75\x91\x48\xd9\x77\xe9\x58\xd6\x5f\x13\x8b\x92\xae\x6d\xb2\x4a\x05\xcd\xaf\x8a\xd7\xd2\xf8\x98\xbb\xe0\x83\x13\xfd\x14\xf7\xbd\x5b\x32\xbd\x2a\xbe\xe9\x7f\xf6\xfa\x2c\x3d\x82\xbb\x65\x37\x2d\x5f\xa2\x58\x7d\x93\xac\xf6\x0a\xce\xce\x9b\xe5\xff\xeb\xd7\x4a\x6a\x18\xe2\x19\x5e\x14\xd1\xad\xec\x75\xc3\x77\x45\x72\xf1\xd1\x10\x8e\x47\xc3\x77\x67\xa7\xc7\x13\xb0\x56\x2e\x11\x73\x99\xc1\x08\x74\x33\x9f\x77\xe9\xbb\x3a\x74\x70\xfe\x75\x7c\x76\x39\x70\x06\xf6\x26\xe1\x42\x60\xc5\x9e\x9d\x7d\x78\xb3\x77\x57\x56\x0e\xbf\xff\xf9\x57\x59\x0e\xb8\x06\x13\x35\xb3\xe5\x1a\xcc\x78\x6d\xc5\xac\xb2\x7d\x8e\xc0\x1f\x85\xf7\xad\x0a\xaf\x3c\xf8\xcb\xeb\xb5\x1f\xd5\x77\x50\xf5\xbd\x7c\xa9\x3e\xd7\x35\x31\x07\xd6\xe4\x7f\x03\x00\x00\xff\xff\x68\xb9\xdd\x9c\xd7\x31\x00\x00")

func modelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_modelGotmpl,
		"model.gotmpl",
	)
}

func modelGotmpl() (*asset, error) {
	bytes, err := modelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\xe2\xc1\x28\x5a\x7b\x6d\x48\xe8\x75\x81\x1c\x36\x95\x91\x06\x58\xd8\xde\xc4\x29\x50\x04\x01\x4c\x53\x23\x99\x88\xc4\x51\x48\x4a\x4e\x6a\xf8\xbf\x17\x94\x3f\x36\xd9\x22\xdd\x4b\xa4\x13\x31\x9c\x37\x7c\xf3\xf8\x86\xda\xed\x92\x4f\x1f\xf5\x25\xfb\xbd\x08\xf5\xf0\x97\xb4\x5a\xae\x4b\x72\x38\xc7\x3e\xf2\x0c\x21\x3e\xbc\x64\x47\x7b\xde\x58\x2c\xa4\x7a\x94\x05\xf5\x44\xbc\x3e\x56\xdf\xed\x10\x9f\x4e\x0a\xf1\x5e\xda\x59\x70\xc1\xa8\xa4\x7d\x24\xdb\x53\x3b\x49\x82\xab\xe9\x6c\x7a\xf3\x65\x39\x4d\x71\xf9\x37\x16\xf3\xab\x79\x8c\x74\x8e\xd9\x7c\x89\x69\x7a\xbd\x8c\x7b\x6a\x2d\x95\x5e\xae\xa5\x23\x68\xe3\xc9\xe6\x52\x11\xdc\x86\x9b\x32\xc3\x96\xed\x23\xb6\xda\x6f\x90\x1d\x73\x12\xf7\x54\xc6\xe9\x25\x7e\x7d\x1b\x59\x3e\xf7\x27\x4a\x7a\x09\xed\xe0\x37\x04\xc5\x55\xc5\xe6\x15\xcd\x9c\xed\x99\x07\xb8\x26\x2b\xbd\x66\x13\x92\xa5\x87\x92\x06\x6b\x42\xe3\x28\xeb\x7a\x08\xb5\xfc\x4b\x4d\x0e\xb9\xe5\x0a\x4e\x6d\xa8\x92\x58\x05\xf7\xdc\x76\xeb\x78\x26\xab\xe0\xa0\x55\x2c\x92\x24\x64\x2f\x37\xda\xfd\x5c\x0a\x69\xb2\x1f\xc5\x88\x45\x38\xa8\x63\x7e\xe6\xba\x13\xd1\xf4\x99\xd4\xd0\x79\xab\x4d\x31\x41\x1c\xc7\xe7\xcd\xdd\x7e\x84\x61\x5d\x3c\xc7\x7f\x70\x55\x49\x93\x2d\x65\x31\x01\x59\xcb\x76\x24\xa2\x6f\x0d\xd9\x97\xf7\x61\x9f\x02\xee\x86\xb7\xee\x07\xc4\x0d\x6f\xdf\x05\x9d\x30\xa2\xb7\x69\x69\xd6\xa5\x56\x50\x8d\xf3\x5c\xe9\x7f\xc2\xf3\x85\x92\x8b\x42\x9b\xe2\x95\x24\xbd\x59\xe6\x2b\x17\xa8\x2d\xb7\x3a\xa3\x83\x73\x4a\x2e\x90\x37\x46\x1d\xdc\xb0\x7e\x41\x41\x26\xb8\x85\x32\x3c\x35\x64\x35\xb9\x58\xb4\xd2\x76\xc0\x8b\x2e\xf3\x5d\xed\x76\x3d\x6b\xc6\xf5\xc1\xc3\xc1\xdb\x4d\xed\xc8\x7a\x87\xe1\x72\x9e\xce\x3f\xa3\x92\x8f\x04\x1f\x4c\x29\x0d\xc8\x34\xd5\xa8\x27\x09\x15\x1b\xe7\x31\x14\x40\x92\xe0\xae\x23\x91\xf2\x8c\xfd\x26\xdc\x5f\xca\x30\xc7\xa5\xce\x83\xba\x96\x7e\x73\x90\x50\x6c\xf2\x52\x2b\x2f\xf0\x1f\xc8\x05\x06\x87\x77\xec\xcf\xeb\xd9\xd5\xe0\x6d\xd9\xbb\x3a\x93\x9e\xb0\x20\x9b\xb3\xad\x42\x67\xcd\x21\xb2\xdd\x90\xf9\xff\xf2\x47\xe8\xa1\xfa\xdd\x22\xfd\xb2\x9c\x0e\xc4\xa8\xdf\xeb\xd9\x50\x59\x93\xed\x2c\x12\xee\x09\x9e\xe1\x4a\xad\x08\xdc\x58\xe4\x9a\xca\xcc\x05\x87\x33\x6e\xbf\x7d\x45\x6e\x35\x99\xac\x7c\x81\x36\x75\xe3\xfb\xfa\x81\x27\x09\x6e\x3b\x0a\x8a\x4d\xdb\xf9\x25\x70\x51\x5c\x36\x95\x39\x92\x71\x5c\xd1\xe1\x2a\xc2\x34\xb8\xa7\x12\x99\xd5\x2d\xd9\xee\x91\x6c\x4c\x46\xd6\x79\x69\x32\xd1\xcd\x48\x57\x6c\x78\xc2\x57\xb2\xbe\x3f\xcc\xc2\xc3\xab\x39\x98\x80\xf3\xdc\x91\x0f\xe5\x47\x18\x2a\xdc\x3f\x9c\x06\x46\xbf\x5a\xb7\xb8\x7f\x78\x3b\x3d\x22\x32\xf8\x7c\x71\x42\x8f\xf1\xbb\x88\x82\xd3\x15\x97\x13\xb4\xb2\x0c\x7b\x56\x9a\x82\xce\xfc\x77\x22\x8a\x14\x2e\x20\xeb\x9a\x4c\x36\x54\x13\xac\x06\xab\xb1\xe2\x72\xbc\x1a\xac\x46\x22\x8a\xf4\xf7\x4d\x3d\xc1\xe0\x97\xc1\xd8\x79\x1b\xa4\x88\xaf\x3d\xcb\xa1\x19\x85\xa4\xf6\x7b\x52\xdb\x1d\x14\x82\x66\x3c\x16\xd1\x5e\x44\x96\x7c\x63\x0d\xd4\x04\x7a\x82\x56\xec\xc5\xbf\x01\x00\x00\xff\xff\xa5\xd7\xa5\x26\xc8\x09\x00\x00")

func pogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_pogoGotmpl,
		"pogo.gotmpl",
	)
}

func pogoGotmpl() (*asset, error) {
	bytes, err := pogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.gotmpl": enumGotmpl,
	"many.gotmpl": manyGotmpl,
	"model.gotmpl": modelGotmpl,
	"pogo.gotmpl": pogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.gotmpl": &bintree{enumGotmpl, map[string]*bintree{}},
	"many.gotmpl": &bintree{manyGotmpl, map[string]*bintree{}},
	"model.gotmpl": &bintree{modelGotmpl, map[string]*bintree{}},
	"pogo.gotmpl": &bintree{pogoGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

