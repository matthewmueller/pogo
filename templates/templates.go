// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xe9\x73\xdb\xb8\x92\xff\x4c\xfe\x15\xfd\x58\x79\x79\x54\xac\xa1\x26\xfb\xd1\xbb\xda\xaa\xd8\x96\x67\xfd\xd6\x91\xbc\x3e\xde\xec\x54\x2a\x25\x31\x24\x64\x73\x4c\x01\x0a\x40\xc9\x56\xa9\xf8\xbf\xbf\x6a\x00\x24\xc1\x43\x97\xaf\x24\x13\xe7\x4b\x64\x1c\x8d\x46\x1f\xbf\x6e\x34\x20\x4d\xfd\xe0\xd6\xbf\x26\xb0\x5c\xbe\xf1\xce\xfc\xe4\xc6\x3b\x53\x0d\x69\x6a\xdb\xd1\x64\xca\x78\x02\xae\x0d\xe0\x04\x8c\x26\xe4\x3e\x71\xf0\x33\xa1\x01\x0b\x23\x7a\xdd\xf9\x53\x30\xea\xd8\x96\x43\x38\x67\x5c\xe0\x27\x91\xf0\x88\x5e\xcb\x8f\x49\x34\x21\x8e\x6d\x5b\xce\x75\x94\xdc\xcc\xbe\x78\x01\x9b\x74\xfe\xf4\x83\xdb\xa0\x33\xbd\xbe\x77\xec\x96\x6d\x77\x3a\xf0\x5b\xaf\xdf\x3b\xff\x70\xd9\x3b\x82\x83\x3f\xe0\x6c\xf0\xdb\xc0\x83\xa3\x01\xf4\x07\x97\xd0\x3b\x3a\xb9\xf4\xe4\x98\x1e\xe7\xc8\xdd\xa5\xff\x25\x26\xde\x99\x2f\x02\x3f\x4e\xd3\x3e\x4b\x8e\xd9\x8c\x86\xc0\x49\x32\xe3\x94\x84\x10\x8d\x21\xb9\x51\x1b\x51\x43\xfb\xfe\x84\xa4\x29\x44\x02\x28\x4b\x60\x8c\xa3\xed\xb9\xcf\x37\xd0\xeb\x82\xda\x8d\xd7\x27\x77\xae\x53\x0c\x3c\xf4\x27\x24\x4e\xd3\x82\x96\xa3\x76\x50\x27\x05\x9c\x88\x59\x9c\x40\xe8\x27\x3e\x8c\x19\x07\x49\xe5\x22\xb8\x21\x13\x5f\x33\xe5\x78\x4e\x95\x4f\xc7\x4e\x16\x53\xd2\x44\x4e\x24\x7c\x16\x24\xb0\xb4\x01\x96\xcb\x5f\x80\xfb\xf4\x9a\xc0\x9b\x80\xc5\xb0\xdf\x85\x9c\x3d\x16\xcf\x26\x54\x40\x9a\xca\x61\xd8\x5d\x50\x58\x2e\x51\x3a\xb2\xad\xcf\x92\xfe\x2c\x8e\x21\x4d\xf5\xa0\x4b\x5c\x35\x63\x0f\x5b\x81\xc4\x82\x40\x9a\xbe\x5b\x3d\x80\x86\x90\xa6\x30\x42\xf5\xef\x3b\x7a\xd8\x05\xf5\x6f\x49\x9a\xb6\xd9\x24\x4a\xc8\x64\x9a\x2c\x9c\x91\x66\x58\x0d\xb7\x53\x5b\x4a\x7f\x08\x53\x76\xcd\xbc\x73\x76\x07\x5d\x70\xdf\xd5\xf7\xdb\x72\x69\x14\x2b\xd9\x1e\x91\x80\x85\x04\xa2\xc9\x34\x26\x13\x42\x13\x91\xcf\xb5\xc7\x33\x1a\x80\x5b\xcc\xbe\xb8\x61\x3c\x49\x53\x68\x22\xa8\xe9\xb8\x75\x65\x46\x34\x21\x7c\xec\x07\x64\x99\xb6\x94\xde\xa5\x98\x87\xb5\x91\x6d\x60\xb7\x28\xee\x5a\x87\xd7\xb8\x05\x1b\x50\xe0\x7f\x63\xb7\x92\x1c\x68\x23\x85\xf1\x24\xf1\x7a\xb8\xca\xd8\x1d\xd5\x99\x09\x25\x97\xfb\xe0\xfc\xfd\xd2\xc9\xac\xd6\x07\xa7\x81\xbe\x33\x6a\xd7\x39\xc1\x45\x51\xf9\xef\xea\xdc\x43\xd7\x94\x8b\x16\x95\x9d\xb3\x45\xa3\x18\xb5\xd3\xe9\x40\x9f\xdc\x6d\x69\xad\x10\xd1\xe9\x2c\x51\x6a\x40\x4f\x69\xc1\xbb\x13\x6c\x91\x1b\xd6\x74\xdf\xca\x96\x65\xaa\x89\xab\xfe\x07\x79\x85\x9a\xfa\x10\x47\x50\x56\x2f\xe5\x00\xca\x3c\xa0\x6e\xd5\xd9\xe0\x5f\x0a\x37\x99\xc5\x31\x92\x53\x3d\x00\x54\xff\x9d\x4d\x57\x9a\x90\x14\x37\x91\xd4\xe6\xbf\xc6\x17\x4e\xa8\x20\x3c\x91\xcb\xa1\x4b\xc8\xcd\x66\x5e\xb0\x5c\x6e\xde\xa7\x42\xa1\x92\xc7\x0b\x92\x08\x09\x87\x99\x7b\x66\xe2\x5c\xe9\x37\x6a\xd5\x2a\x21\x57\xff\x9d\x19\x52\x33\x26\x94\x94\x5f\xa3\xed\x55\x68\x74\xe1\x6d\xb9\xa5\xb0\x98\xba\x91\xa6\x28\x82\x66\xbd\xa0\xbd\xae\x54\xcb\x5d\x14\xc7\x28\x05\x29\x84\x51\xd6\x8f\x52\x80\x34\x1d\x41\xc2\xa0\x7f\x75\x7a\x8a\x74\x47\x65\x66\x46\xd2\xf5\x66\x71\xbc\x51\x54\x2b\x17\xaf\x0a\x6d\xa5\x85\x6c\x90\xdb\x6a\xa3\xdb\x51\x84\x86\xe5\x19\x1f\x51\x80\x1f\x7d\x2e\x6e\xfc\xf8\x9f\x17\x83\x3e\x4c\xd4\xe7\xc2\x6e\xca\x20\x82\x2e\x9f\x30\xc0\xa1\x1b\x45\x63\x90\x75\x5b\xe0\x7e\xfa\xfc\x65\x91\x90\xb6\x42\xd8\x96\x09\x11\x18\x42\x3c\x3d\xba\x4e\xaf\xa5\x91\xe3\x8a\x4e\x0c\x3e\x67\x34\xe7\x14\xa7\xa3\x2e\xfd\x26\x7e\x37\x72\x59\x22\xeb\x4a\x60\x52\x9c\x9a\xb1\xc0\x64\x34\x9f\x20\x07\xb7\xeb\xb2\x96\x0c\x6f\x5a\xf6\x42\xe6\x48\x6e\x0b\x54\xb2\x64\xae\xd2\x80\x7f\x5b\x10\x0c\x14\x14\xb8\x2d\x98\xf8\xd3\x4f\x8a\xea\x67\x23\xb4\xc9\x15\xf4\x20\x84\x90\x89\x7f\x4b\xdc\xe6\xa1\x2d\x5b\xa1\xe6\x16\xd8\xba\x1e\x30\x65\x00\xdc\xc5\xa4\xff\xd6\xc5\x38\xa4\xe3\x25\xfe\xd3\x0c\x7f\xaa\x20\xd8\xe7\xc6\x60\xb6\x9a\xb0\xa6\x57\x70\x9c\xe3\xf1\x0a\x16\x2b\xce\x5b\xe1\x6b\x37\xae\x6a\x4e\xaa\x18\xc9\x73\x28\xbb\x50\xbd\x26\x9c\xc7\x4a\x0c\x09\xb5\xcc\xa7\x88\x14\x1b\x8d\x42\x0d\x75\xc3\x2f\x6a\xe6\xd1\x41\x0b\xdc\x2c\x7b\x6a\xf2\xc4\x7c\xfc\x2a\xb3\x56\xe9\xc1\x71\x14\x27\x84\x43\xc0\x89\x9f\x10\x01\x3e\x50\x72\x07\x63\xd9\x98\x27\x03\x6a\x0c\xa6\x04\x7a\xb4\x99\x13\xa8\xa6\x3c\x29\xd0\x23\x14\x05\xb1\x73\x62\xa0\xa7\xe7\x99\x81\x35\x66\x7c\xe2\x27\x02\x3e\x7d\x56\xc6\x6d\x5b\x73\x3f\x9e\x11\x01\xf0\xc9\xb4\x73\x1b\xb4\x8b\xeb\xff\x2b\x11\xf9\x90\xd1\x30\x4a\x22\x46\x65\x40\x56\x8b\x18\x79\xe9\x61\xec\xcf\x04\x81\x31\xd5\x5a\x18\x67\x3b\x6d\xe9\x2e\xdc\xbb\x22\xa4\x46\x2e\x6d\x2b\xdb\xbf\xd1\xbc\xb4\x2d\x0b\x43\xc2\x3e\x00\x38\xbf\xff\x4f\xef\xbc\xe7\xb4\x6d\xcb\x3a\x96\x5b\xd8\xd7\xf0\x20\xbc\x7f\xb2\x88\xba\x63\x4f\xef\xac\x0d\x0e\x7c\xe8\x1f\x81\xd3\xc2\xb1\x67\x3e\xf7\x27\x62\x1f\xc6\x9e\xda\x66\x5b\xda\x98\xcc\x31\xf7\x01\xc6\x9e\xdc\x5c\xdb\xb6\x32\x71\x7f\xa0\x61\xa6\xad\x4e\x07\x6a\xdc\x7f\xa0\xa1\x9b\xa9\xc2\xf3\xbc\xbc\xbd\x50\x64\xa7\x03\x00\x28\xa9\x40\x6e\xc1\x10\xb4\xec\x41\xfd\x0d\xdb\x7a\x09\x84\x0e\x05\x24\x19\x4d\x3d\x1f\x60\x08\x5d\x83\x0f\xfc\xd7\xe9\xe4\x24\xbb\xe0\x4f\xa7\x84\x86\xae\x6e\x68\x6b\x51\x68\xd6\x0a\xed\xb8\xad\x56\x4b\xcd\x4f\xf5\xf2\x5e\x8d\x46\xde\xd4\x2e\x0b\x34\x6f\xcd\xc4\xa9\x29\x65\xa9\x3a\xfe\xa5\x64\x36\xe0\xeb\x44\x36\xe0\x3f\xa1\xc4\x06\xe7\x2b\x05\x56\x04\x8f\x62\x4b\x99\xeb\x1e\xeb\x4d\xc9\x3c\xa4\x18\x46\xe2\x50\x8e\xd2\xcc\x1e\x63\x83\x28\x65\xd2\x32\xc3\xd5\x43\x8d\x98\x51\xb4\x1d\x11\x11\xf0\x68\x2a\x5d\x36\x4d\xeb\x6e\xd9\x30\xdb\x9d\x1b\xad\x0d\x99\x99\x81\x5d\x59\xa0\x53\x63\x2f\xa6\x9c\xf8\x3a\x86\xa0\x5e\xb9\xa1\x52\x19\x53\x62\x42\xdd\x79\x0b\xba\x5d\xf8\x55\xc7\x0d\xed\x88\xe5\xe2\x82\xcc\x4a\xcd\x9c\x05\x64\xc4\xa8\x33\xea\x79\x5e\x2b\x33\x90\xc9\x4c\x24\x70\xe3\xcf\x09\xf8\x49\x4c\x7c\x91\xc0\x7b\x98\x22\x08\x90\x84\xf0\x51\xab\x74\xda\x94\x07\x42\x44\x44\x2d\xea\x39\xe2\x90\xc5\x0d\x55\x73\xd4\xe6\xdf\x85\xd3\x42\x84\x40\x36\x33\xf8\x34\x8c\x21\xc7\x1d\x3c\xbd\x5e\x4c\x79\x44\x93\xb1\xe2\x5d\xf1\xa9\xe0\x0a\xb3\xea\x8a\xbd\x20\x71\x63\x5c\x2e\xb6\x11\xda\x60\x6e\xf8\x51\x61\xf3\xf3\x5c\x5a\x1a\xb3\x0d\x2e\x34\xbc\x19\x2a\x3b\x64\x84\x07\x04\x9c\xc8\x81\xe2\xf0\x2b\x03\xbc\xaa\x5f\xd4\xf4\x56\x4e\x51\xa2\x31\xcc\x51\x45\x45\x70\x5f\xbf\x7b\x63\x27\x48\xa8\xd8\x75\x83\xcc\x2b\x89\xc6\xd6\x84\x4d\xa2\xd6\x6e\x52\x98\x67\x52\x30\x56\xb6\x72\xa6\xd6\x1d\x01\x06\x3c\x24\xfc\x60\x01\x62\x4a\x82\x68\x1c\x05\x11\x51\x27\x80\xc1\xf9\x51\xef\xfc\x60\x01\x07\x7f\xc0\x7f\x31\x1c\xf3\xdf\x2a\xe4\xe6\xe3\x95\xc5\xdb\x01\xa3\x22\x01\xd7\xb6\x30\xbc\x5c\x1c\x82\x60\x3c\x11\xf0\x65\x01\xbe\x08\x08\x0d\x31\xc3\x95\xd3\x6d\x0b\x7b\xb3\xd9\x5d\x70\x3e\x5c\x1c\x3a\xb6\x9c\x76\xd4\x33\xe7\x85\xa4\x3a\x51\xf6\x1b\x33\xf1\xef\xac\x82\xd8\x27\x77\xb2\x27\x8f\xc6\x59\x03\xc6\x60\xd5\x63\x44\x5f\xd9\xb0\xac\x1e\xc0\xcb\xe1\x5e\x8e\x31\xa2\xbd\x22\x22\x59\x51\x92\xb9\x8e\xe6\x84\x82\x94\xbf\x30\x64\xb2\x2e\x0b\x49\x1b\xf3\x06\xa6\x39\x7c\x44\xda\x20\xb5\x04\x07\x7f\xac\xce\x1c\x98\x91\x39\xb4\x55\xda\xa0\x8f\xd5\x75\x04\xd6\x68\x34\x50\x7b\x5d\x0d\xbc\x4a\x57\xa6\x4b\x64\x07\x6b\xd4\x3b\x05\x72\x3f\xe5\x44\x88\x88\xd5\x77\xda\x04\x70\x52\xb6\x99\x82\x4d\xb5\xb1\xba\xe7\xb0\x9d\x00\x49\x52\x6e\xb5\x72\x39\x32\xbb\x66\xff\x3a\xd5\xf6\x1b\x0e\x5f\xea\xc4\x9b\x1f\x87\x37\xe7\xa4\x72\xb3\xb5\xcc\xbb\xa1\x58\x97\xa7\xe9\x4d\xe5\xc3\x52\x7a\xde\xe9\xc0\x35\x49\xc0\x8f\x63\xc9\x08\x65\xf4\x17\x84\xac\xec\x38\xe7\xd3\x10\xa6\x9c\x4c\x7d\x4e\xb0\x7f\x22\x61\x15\x07\x7e\x9d\x11\xbe\xb0\x01\x86\x41\x1b\x86\x51\x1b\x86\x73\xd4\xb0\x88\xa3\xa0\xa1\x10\xea\xe5\x47\xc8\x36\xfc\x2a\xcf\x80\x9d\x0e\x88\xaf\x31\x44\x4a\x38\x92\x58\x1b\xa6\x3c\x9a\xf8\x7c\x01\xb7\x64\x01\x53\xce\xe6\x51\x48\x42\xd4\xb8\x20\x5f\x67\x84\x06\xc4\x06\x9c\x24\x12\x19\xf4\x47\x12\x17\x4f\xfa\x17\xbd\xf3\x4b\x38\xe9\x5f\x0e\xb6\xad\x2c\xba\x23\xd8\x2b\x9b\x30\xee\x41\xda\x2e\xec\x81\xc6\xdb\x7f\x7d\x38\xbd\xea\x5d\x34\x8d\x8d\x6a\x63\xcf\x7b\x97\x57\xe7\xfd\x93\xfe\x6f\x86\x1e\xce\xa5\x3d\x44\xf4\x5a\x22\xf4\x48\x6f\x39\x66\xd7\x6a\xaf\x18\x1e\xee\xc8\x3f\xe6\xa4\xd8\xa7\x8f\xbd\xd7\x84\xab\xd8\x21\x55\x7b\xca\xae\xcb\xe7\xc3\xac\xd5\x55\x62\x40\xa9\x63\xf0\x96\x41\x41\x67\x0b\x0d\xd5\xd9\xba\x05\xe0\x79\x89\xdd\xa1\x14\xc3\x2f\xde\xff\x21\x43\xe7\xec\xae\x4e\x34\x1a\x03\x91\xe1\x93\xdd\x79\x17\x81\x4f\xcd\xe3\x60\xe0\xd3\x34\x6d\xfd\x27\x90\x32\x87\x45\xc9\xb7\x0d\x24\xe3\x2b\x03\x99\xa6\xba\x77\x51\x1c\x56\x76\xfd\xd1\xa7\x8b\x27\x76\x15\x24\xb9\xc2\x5d\xce\xe2\x19\xf7\xe3\x4c\x50\x98\x60\x67\x7e\xf3\xe9\xf3\x7a\xcf\xb1\x86\xab\xa8\xec\x77\xa1\x71\xf2\x52\x27\x4b\xc3\x26\x7f\xcd\x93\x94\x55\x54\x11\x95\x9b\xe4\x47\xb8\xf4\x86\xc6\xe3\x75\x5e\xb9\xb7\x2c\x54\x25\xe7\x85\xae\x2c\x2b\x83\xac\x55\xfb\x90\xa4\x6d\xcb\x4a\xcb\x0b\x97\xb9\xca\x61\x73\x35\x95\x3a\xd3\x32\x1b\xdc\xbc\xbc\xb6\x8c\xe5\xb2\xf3\x0e\x8e\x23\x8a\x1e\x82\x46\x8b\x11\x40\x56\x5e\xd9\x18\x82\x2c\xb0\x0a\x78\xd7\x51\xe1\x44\x8f\x1c\xd5\xe5\x2f\x83\x87\x60\x13\x62\x4c\xf3\x94\x9d\xe0\xa4\x92\x85\xe0\x08\x79\xe0\x2a\xc7\xef\x2d\xf0\x74\x28\xd0\x81\x72\xbd\x94\xe7\x0b\x57\x12\x96\xee\xd5\xa0\x92\x92\xf3\xa0\xf0\x53\x03\x2a\x05\x89\x49\xf0\x40\xa8\xbc\xe8\x9d\xf6\x0e\x2f\x61\xb9\xcc\xbc\x57\xd2\x4a\x53\x18\xc1\x9e\x74\xdb\xd1\xf1\xf9\xe0\xe3\xb6\x00\x9a\x4d\x1a\x8a\x9f\x06\xd6\xe4\x94\x6e\x17\xa6\xd7\xf7\x5e\x8f\xf3\x3e\x3b\x67\x77\x22\x2f\xda\x99\x7a\x5b\x7b\xfb\x6b\x17\xa5\xc2\x87\x02\x65\xee\x0e\x07\x0b\x38\xd3\x46\xf0\xbf\x64\xa1\xec\x5f\x5d\xc4\x66\x8b\xab\x5e\xec\x54\x5d\x6f\xa6\xf2\x8e\xb1\xb1\x5b\x7b\xce\xc1\x62\xb9\x7c\x33\xbd\x2d\x2e\x7a\x1e\xe2\x49\x55\x22\x55\xec\x9d\xde\x9a\x3a\x9c\xde\xd6\xaf\x7b\xb6\xc9\x5a\x1e\xeb\x13\x52\x0b\xab\x1c\x43\x76\xee\xe0\x13\x72\xbc\x2c\xb1\xc9\x09\xd3\xdb\xdc\x59\xba\xf0\xe6\xfd\x73\x66\x00\x6f\x4b\x02\x7d\x6a\x9f\xa9\x53\xff\x91\x9d\xc7\xa8\x8b\x9b\x6e\x74\x45\xa3\xaf\x33\xa2\x53\xde\xdc\x91\xf4\xe1\x25\x0a\xef\x0d\xa7\x39\xa1\x21\xb9\x27\x22\x3b\xe6\x46\x63\x70\x31\x43\xc6\x51\xde\x89\xd0\x84\x5c\xca\x92\xac\x49\x7b\x59\xab\x55\x75\x32\xec\xfe\x48\x92\x1b\x16\xa6\x29\x8c\x55\xd0\xaa\xeb\xeb\xcb\x02\xf4\x58\xa3\x02\x95\x15\xa0\x1a\x69\x55\x9d\x0d\xfb\x54\x15\xf7\x1b\x7b\xd8\x9b\xa7\x73\x31\xbd\xad\xdf\x6f\x08\x27\xcf\x9b\x5f\xeb\x95\xfe\xe5\xf3\x08\x79\x11\x4f\xef\x61\xcd\x2b\xe8\xec\x61\xb5\x93\x69\x4f\x34\xf3\x87\xcc\xd5\x38\xdf\xce\xd9\x1e\xe6\x6d\x9c\xef\xe2\x6f\x46\x51\xa8\xee\x7a\x32\xd5\x97\xe9\x5c\x1e\x46\x4a\x69\x9c\xec\x47\xd7\x10\x30\xc9\x4f\x05\x9b\xd3\x93\x32\xc5\xc2\x55\x6a\xc7\x80\xd5\x49\xde\xa6\xe4\x1f\x56\xa6\xe9\x6b\x92\xff\xa7\x49\x0e\xd7\x67\xeb\xaf\x09\xa3\xad\xdc\x4d\xe4\x42\xce\x9c\xae\x39\x0f\xac\x3a\xd0\x36\x52\x56\x7e\x11\x92\x31\xe1\x72\x29\xef\x30\x66\x82\xb8\xb2\xae\x21\xab\xe1\xd8\xd6\x27\xf7\x89\xdb\xd2\x54\x77\xc1\x8a\x52\x88\x15\xdb\xc6\xd8\x4d\x51\x76\xf3\xce\x36\xa3\x41\x86\x07\xdb\x4a\xa9\xb8\x15\xdf\x70\x78\x5c\x49\xa7\x01\x5b\xb2\x4a\x7c\x34\x56\xf2\xe9\x71\xee\xb6\x76\xd3\x61\x31\xaf\x02\x65\x5b\x1d\x45\xaf\xa6\xa1\x9f\x10\x98\xf8\x49\x70\x13\xd1\x6b\x49\xad\x82\x39\x6d\x4d\x10\xbb\xdf\x67\xcf\x35\x33\x64\xd3\xf3\x1b\xdc\x44\x52\x8a\xe8\xc3\x70\xae\x69\x4d\x85\x7d\x6a\xc1\xad\xea\x85\xdf\xd7\xc1\x57\x55\xc0\x9b\x9f\x45\xe6\x05\x45\x8d\x28\x46\x8d\x52\x15\x21\x45\xa9\x36\xf9\x1f\x45\x71\x52\x51\x6d\xcb\x5b\xb4\xe1\x5c\x5e\x15\x0d\xe7\x46\x21\x63\x2e\xc7\x4b\x4e\x35\x96\x92\x64\x36\x95\x84\x67\x4a\x75\xba\x32\x6f\x49\xaf\x9e\x19\x4f\x01\xd0\xf9\xa3\x36\x04\x45\x35\x67\x18\xa8\xc2\xcd\xcc\x58\x60\xd6\x86\x60\x0f\x0f\x06\xce\xde\x30\xfa\x14\x7d\x6e\x15\xb0\xad\xe5\xe0\x53\xfd\x7a\x20\x1a\x03\x65\xd9\xb2\xf2\x45\x24\x44\x22\x87\xca\xe2\x36\x70\x38\x2b\x5d\x07\x56\xc4\x59\x7a\x6d\x5c\x7e\x84\xed\x29\xe3\xd8\xc7\x65\x14\xfd\x8c\xb8\xa3\x9d\xc3\xd2\xd1\x44\xd5\x7b\x2d\x23\x46\x5c\x9d\x1d\x7d\xb8\xec\x6d\x6b\xad\x17\xbd\x4b\x19\x07\x2c\xab\x5c\x4e\x9d\x19\xe5\x54\x3d\x60\x28\x8c\x3f\x46\x1b\xaa\xab\x2f\x54\x5a\x45\xe5\xcc\x68\xa9\xf2\xfd\x43\x95\x25\x5e\xa6\x2e\xf1\x34\xd8\x28\xf3\x3e\x65\xf4\xe2\x69\x70\xb2\x28\x53\x98\xcb\xfb\x71\xac\x19\x10\x26\x52\xae\x29\x17\x6f\x8f\x96\xdf\x71\x06\xf9\x8a\xb2\xdf\x08\x65\xd1\xb0\x5e\x91\xf6\x35\x79\x7f\x4d\xde\xbf\x71\xf2\xfe\xe4\xa5\xf3\x8c\x6c\xad\x78\xde\xfc\xcc\x7d\x87\xc8\x15\x25\xa2\x52\x51\x36\x43\xd5\x63\x2b\xed\x8f\x7a\x39\xb0\x4b\xe0\x08\x19\xfd\x47\x92\x41\x2c\x82\xbc\x51\x8e\x90\xee\x18\x93\xa4\x08\x1a\xe5\x0d\x6f\x19\x7c\xea\xb1\xe7\xfd\x4f\x14\x5b\xaa\x96\xf0\x02\x71\x46\x47\x0d\x1d\x6e\x60\x63\xb0\x19\xad\xbc\x1f\xd9\x31\x00\x29\x75\x16\x69\xb8\x7c\xc5\xb6\x9f\xab\xa7\xf4\x10\x7b\x59\xbe\xc1\x48\xf3\x08\xf2\x4c\xb1\x4c\x71\xf3\x32\x27\x87\xd2\x5a\x3f\xf4\xe9\xa1\x5a\x1d\xce\x61\x7a\xa6\x6e\x54\x22\x7d\xed\xb2\xf6\x6e\x46\xdd\xbe\x88\x3a\x24\xaf\xbf\x6a\xc9\x65\x5d\xc5\xd5\x9d\x6f\x55\x1e\xfb\x0e\xcb\x0f\xc3\xcc\x9a\x13\xed\xbc\x6d\x60\x73\xc2\x79\x24\x5f\x2b\x92\xfb\x48\x24\xf8\xe1\x96\x2c\x84\xb4\x49\x4e\x04\xa1\x09\x46\x14\x34\x2f\xf5\x95\x49\x68\xe0\xa2\x01\xa2\xeb\x5f\xc2\xc1\x3d\x15\xdf\xc0\xf1\xd6\x7f\x53\xaf\x55\xfa\x8e\x89\x7e\x44\x86\x4c\x64\xdf\x33\x79\x64\x7c\xc0\x2d\x96\xbf\x87\x69\xb0\x97\xa6\x8d\x31\xa3\x08\x18\xa5\x67\xaa\x0f\x8c\x1e\xcb\x65\x4c\x68\x65\xd9\x9f\x2d\xa0\x98\x2e\xb0\x26\xa2\xe4\x57\x0e\x19\xc0\x3d\xfa\xec\x82\x2c\x6f\x08\x28\xf2\x16\xa2\xe9\x3e\xb0\xe8\xdd\x29\x9e\x94\x01\x3a\x8b\x29\xe5\x60\x92\x36\x7f\x35\xb8\x6a\x9a\xd5\x87\xd5\xc5\xb3\xea\x92\x0b\x55\xdf\x71\xaf\x9a\xf6\x1a\xb1\x7e\x88\x97\x04\xdb\xbd\x4f\x3b\x92\xb0\xd5\xf8\xaa\x46\x34\x3d\xab\x01\x65\xb0\xea\x65\xf8\x38\xe2\x22\xd1\x35\x2b\xfd\xe0\x46\xd1\xfb\xde\x1f\xaf\x29\xb0\x6e\xc2\x87\xa3\xde\x69\xef\xb2\xb7\xcb\x43\x00\xe3\x3a\xb1\x0c\x06\xdf\x47\xfd\xe2\x87\x2a\x0b\xbf\xd8\x6b\xb5\x5d\x9c\x43\xd6\x7f\xb7\x75\x90\x15\x05\xdd\x92\x77\xfc\x6c\x37\xff\x3f\x91\xb7\xbd\x56\x0b\x5f\xab\x85\xcf\x53\x2d\x7c\x44\x39\x50\xa1\xce\x96\xe5\xc0\x31\x67\x93\x1d\xbe\xd8\x00\xc6\xd7\xf3\x9b\xd7\x79\xbe\xe7\xb6\xcf\x82\x2b\x1b\xca\x42\xdf\x14\x6b\x9a\xdf\xd6\x3e\x5f\x7e\xfc\xd7\x7d\x6d\xbb\x4d\xc9\xc6\x30\xe7\x52\xc9\x46\x99\x9d\x58\xf7\x2b\x2c\x2b\xa6\x3e\xf1\x63\xd8\xe7\xb4\xff\x47\x9e\x61\x5f\xf2\xe5\xeb\xb3\xda\x7f\xc3\xa2\x7f\x11\x27\x78\xec\x15\x93\x20\x3c\xa9\xc5\x14\xf5\x05\x4a\x51\xfe\x9e\x86\x32\xb1\x51\x5b\x95\x89\x30\x33\x46\x5d\xa1\xdc\xf5\xef\x51\x19\x14\x46\xe0\xc7\x9c\xf8\xe1\x42\x95\x17\xb3\xc4\xb9\x79\xb9\x17\xbc\x5f\xb2\x9e\xac\x20\x6a\x6d\x55\x0f\xf5\x2a\x3b\xad\x40\xb1\x6d\x6d\x59\xce\xb4\x9a\x6b\x8d\xd6\xba\x52\xe3\xaf\x7a\xde\x6e\x65\xc5\xe1\xf6\x65\xc5\xde\xff\x1f\x9e\x5e\x1d\xf5\x8e\x3c\x67\x2f\xf8\xc6\xb5\xc5\x26\xb3\x7a\x60\x69\xf1\x19\xbe\xfb\xab\x71\x77\xb4\xe5\xd7\x7f\xb3\xe1\x83\x3e\x1c\x0e\xfa\xc7\xa7\x27\x87\x97\xe0\x9a\x89\x4c\x3e\xe2\x68\x00\xba\x12\xba\xe5\x7d\xd9\x77\x73\xc2\xd2\x68\xff\x5d\xbc\x7a\x7b\xfb\x56\x7d\x6e\x82\xf5\x97\xca\x52\x0c\x13\x2e\x65\x29\x0f\x43\xe2\xa2\x74\x7c\x1a\x89\x64\x1b\x38\x5e\x93\xdf\xc0\xeb\xbd\x54\xe3\xbd\xd4\x37\xfa\x71\x83\x1f\x0a\xb2\xaa\x86\xb8\x02\xb9\x36\x72\xd3\x05\xb7\x08\x37\xab\x06\x17\xf1\xa8\xcc\xd4\x2b\xe2\xbd\x2c\xe2\xa1\xa1\xa2\x51\x43\xc0\xe8\x5c\xa2\x17\x9b\xf1\xdc\x3d\xe4\x4f\x2e\x08\x36\x21\xc9\x4d\x86\x5c\xf2\x14\xc4\xa3\x39\xe1\x10\xf8\x14\x66\x34\x24\x5c\x24\x3e\x0d\x15\x4c\x29\x0f\xc9\xe6\x37\xff\x04\x64\x1b\xd8\x78\x2c\x08\xa2\x03\xe2\x4f\x90\x67\x35\x6d\x88\x8c\xcf\xf3\xf2\xd5\x9b\x4c\x09\x29\x8a\x4d\xcf\xde\x83\xf7\x2a\x0d\x0a\x58\x2c\x2f\x96\x8a\x54\x28\x5b\x1f\xf3\xa1\xc0\xf8\xed\xb2\x36\x8c\x9c\xd1\x5e\xc0\xe2\xbd\x91\x33\x92\x3f\x8a\x50\x74\xa2\x8f\xbc\x71\xf6\x44\xc2\x51\x14\xde\x49\xc2\x7c\x97\xb6\x70\x90\xf1\x6a\x75\x2e\x17\xc2\x46\xba\xb7\x67\xfe\x88\x41\xd0\x86\xa8\x0d\x73\x3b\xb5\xff\x1d\x00\x00\xff\xff\x77\x03\x4a\x90\xf0\x5c\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xaa, 0xe9, 0x99, 0xe3, 0xd9, 0xd0, 0xd8, 0x60, 0x46, 0xd9, 0xf8, 0x7d, 0xb1, 0x96, 0xd9, 0xea, 0x41, 0xdb, 0xce, 0x5, 0xd5, 0x43, 0xd3, 0x6d, 0x49, 0xa1, 0x37, 0x50, 0xa3, 0xc3, 0xdf}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\xd0\x07\xb9\x35\xe8\x3d\x07\xc8\x80\x3a\xf6\xb2\x0c\x5d\xec\xb9\x1e\x86\x62\x18\x56\x5a\x3a\x49\x5c\x24\x52\x25\xa9\x38\x86\xe1\xff\x7d\x38\x52\x92\x7f\xb4\x09\xd6\xc7\x3c\xd9\x3a\xde\x7d\x77\xdf\x77\xfc\x71\x8d\x48\x1f\x44\x81\xb0\xdf\xbf\xe1\x4b\xe1\x4a\xbe\x0c\x86\xc3\x81\x31\x59\x37\xda\x38\x48\x58\x14\x17\xd2\x95\xed\x86\xa7\xba\x9e\xfc\x2b\xd2\x87\x74\xd2\x14\x4f\x31\x1b\x31\x36\x99\xc0\xed\xfc\x7e\xbe\x7a\xbf\x9e\xcf\x60\xfa\x09\x96\x8b\xdb\x05\x87\xd9\x02\xee\x17\x6b\x98\xcf\xee\xd6\xdc\xfb\xcc\xa6\x20\x2d\xb8\x12\x21\xd5\x75\xad\x15\x48\xe5\xd0\xe4\x22\x45\xc8\xb5\x81\x4c\x38\xb1\x11\x16\x41\x37\x68\x84\x93\x5a\x91\xb3\x70\x90\x0a\x05\x1b\x84\xd6\x62\x06\x5b\xe9\x4a\xc2\x72\xbb\x06\x2d\xe4\x46\xd7\x60\xd3\x12\x6b\x01\x9f\xf7\x7b\xe0\x1f\xfd\x7f\x7e\x2f\x6a\x84\xc3\xe1\x33\x87\x7b\xed\x30\xa0\xb8\x52\x5a\x90\x96\x82\x45\x65\x35\xa4\xba\x91\x98\x51\x0d\x1a\x50\xa4\x25\xe8\xdc\xd7\xe6\xc4\xa6\x42\xe8\x24\xb1\x9c\x4d\x26\x14\xb2\xa6\x68\x5b\xea\xb6\xca\x60\xab\xcd\x83\x2f\x64\x28\x79\x62\xbf\x54\x7c\x36\x05\xa1\xb2\x73\xdb\xfa\x89\x33\x2a\xd5\x73\x1f\xd8\xee\x59\x34\x7f\xc2\x34\xb1\xce\x48\x55\x8c\x81\x73\x3e\x2c\xee\x0f\x23\x48\x9a\xe2\x89\xdf\xe8\xba\x16\x2a\x5b\x8b\x62\x0c\x68\x8c\x36\x23\x16\xfd\xde\xa2\xd9\x3d\x1f\xf6\x96\xe2\x56\x7a\x6b\x2f\x22\x56\x7a\xfb\x6c\x50\x1f\xc3\x0e\xbe\x47\x1f\x74\x01\x79\xab\x52\x92\x9f\xc3\xe2\x11\x8d\x91\x19\x06\xf1\x3c\x65\x92\xa8\xd2\x45\x81\x86\x04\xdb\xe9\xd6\x40\x5a\x6a\x99\x22\x7b\x14\xc6\x87\x5f\x7b\x80\x67\x13\xee\x43\xa2\x1b\xad\x32\xd9\x35\xb9\x35\xca\x82\x80\x4a\x5a\x47\xa0\xe9\x71\x89\xba\x43\xde\xf6\x4b\x05\x69\x25\x5a\x8b\xd6\x8b\xdc\x08\x23\x6a\xcb\x28\xd1\x09\x52\x42\x91\x96\x32\x0e\xb6\x11\x24\x14\xdb\x17\x13\xe2\xe0\xaf\xbf\x4f\x4a\xf2\x62\x75\x82\x51\x6b\x88\xc7\xb6\x44\x83\xe4\x17\x02\x83\xb1\x30\xba\x6d\x36\xbb\x4b\xb3\x36\x19\x9a\xaf\xcd\x95\xac\xa5\xbb\x34\x92\x82\x52\x39\xc6\x22\xda\xf1\xff\x8c\x3d\x57\xb8\xba\x06\x23\x54\x81\x10\xea\xdf\xb3\x28\x0a\x64\x69\x85\x6c\xfc\xc6\x7f\x26\x23\x16\x45\x32\xef\x94\xe0\x73\x2a\x19\x7e\xb8\x06\x25\x2b\x1f\x14\x19\x24\x2d\x49\xad\x9e\xea\xf8\xcc\x99\x45\xd1\x81\x45\x91\xdd\x4a\x97\x96\xfd\xca\x9a\xf6\xa7\xcf\x49\x87\x2f\xfe\xf3\x97\xf9\x6a\x1e\x5f\x11\x1c\x55\x6c\x30\xbf\xd0\x8b\x56\xba\xea\x7d\x8e\x93\xf2\x03\xe0\x32\x88\xec\x2b\x8a\xa4\x2b\xdf\xbd\xf3\xff\x3c\xd2\x35\x88\xa6\x41\x95\x25\xf4\x35\x86\xf8\x4d\xfc\xce\x3a\x93\x6a\xf5\xc8\xef\x9c\x16\x89\x74\xe5\x68\xe4\xdd\xbb\x56\x0d\x01\x3d\x1f\xff\xeb\x5d\x7c\x25\x5d\xa7\x06\xb7\xf0\x3d\x86\xbc\x76\xfc\x63\x63\xa4\x72\x79\xd2\xd5\xf5\xb3\x36\xb5\x70\x63\x4f\x89\x73\xee\xf3\x04\xce\xb7\xab\xc5\x1f\x4b\x98\x7e\x7a\x3d\xb4\x87\xbd\x38\x38\xf6\x96\xef\xa4\xbe\x58\xcd\xe6\xab\x57\x45\x7d\x38\x6f\x83\x63\x6f\xf9\x4e\xea\x1f\xee\x7e\xbb\x5b\xbf\x1e\xde\xdd\x85\x32\xb8\x85\xef\xff\xcd\x39\xc3\x5c\xb4\x95\xbb\x7a\xee\x9e\x20\x18\x7f\x49\xe4\x49\xdc\xaa\x07\xa5\xb7\xea\x78\x13\xfb\xf7\x36\x1e\x85\xfb\xe3\xc0\x58\x34\x99\x40\xd3\x3a\xc0\x47\x34\x3b\x57\x4a\x55\x80\xd3\x05\xba\x12\x4d\x77\x29\xb6\xee\xe4\xea\x93\x39\x54\xa8\xba\xb3\x39\x82\x9f\xe0\x47\xaf\x19\x39\x1d\x9b\xd8\xba\x71\x77\xfb\x80\x97\x4a\xaa\xc2\xf2\x5f\xb5\x54\xc3\x99\x8e\xe1\xfd\xfd\x0c\x62\xa2\x73\x18\x40\xfb\x7d\xff\x22\x6c\x7f\xc0\x2f\x91\x8f\x87\x26\x1e\x5f\x02\xf7\xbb\xea\x45\xe0\xfe\xf8\x5c\x02\x1f\xb7\xe4\xd7\xc0\xa1\x71\x2f\xc2\xfa\xad\x79\x89\xd9\x37\xfc\x88\xc8\x86\x4e\x9e\xe5\xf6\x10\x10\x8f\x8e\xcd\x55\xb2\x62\x17\xef\xee\x71\x1e\x09\x13\xca\x37\x16\xa8\xba\xfe\xe5\x81\xb7\xe1\x5f\x0f\x13\xde\x27\xeb\x4c\x9b\xba\x0e\xe0\xd4\x44\xa1\xfe\x61\x01\xe8\x37\x41\xd8\x94\xc3\xe7\xf2\x1b\x4f\x31\x8b\xc2\x9b\x16\x5e\xe3\x2e\xd5\x9d\xb2\x68\xc2\x54\xd6\x4d\x82\xd2\x5b\xfa\xe1\x8d\x26\x92\xd9\x74\x18\xd2\x24\x8d\x12\x74\xcc\x50\x49\x54\x34\x5b\x76\xe3\x8c\x1f\x32\xad\xac\x9b\x0a\xc9\x39\x80\x9c\x0c\x9b\x81\xc5\x49\xb6\x33\x1d\x82\x3d\xc9\x36\x30\x9b\x8e\x20\x59\xe9\xed\x30\x64\x85\x32\x57\x7a\x7b\x12\x21\xaa\x4a\x6f\x2d\xcd\x47\xe0\x34\x34\x6d\x55\xd1\x91\xf0\x93\x6b\x89\x60\x1b\x4c\x65\x2e\x53\xa8\x75\x86\x15\x8d\x39\x20\xa0\x40\x85\x46\xa6\xb0\x15\xbb\x50\xca\x39\xe2\x9e\x45\x33\x4c\x75\x86\xc9\x23\x9c\x0d\x54\xbd\x56\xff\x05\x00\x00\xff\xff\x51\xce\x6a\xc5\xc6\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xe7, 0xc, 0xcf, 0x12, 0xd4, 0xb0, 0xd, 0x9c, 0x49, 0xca, 0x67, 0xee, 0x60, 0xcf, 0xb5, 0xa6, 0x9f, 0xb6, 0xea, 0x5e, 0xd0, 0x80, 0x61, 0xde, 0xa, 0xc8, 0x3c, 0xa6, 0x3f, 0x3f, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
