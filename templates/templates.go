// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/many.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x61\x6b\xdb\x30\x14\xfc\x3c\xfd\x8a\x23\x04\x6a\x87\x4c\xfe\x3e\xe8\x87\x76\xf1\x4a\x61\xc4\x63\x09\x85\x31\xc6\x90\x9d\xe7\x54\xcc\x96\x3d\xc9\x0e\x04\x4d\xff\x7d\xd8\x72\x16\x1b\x02\x65\xd0\x16\x9a\x4f\x41\xba\x77\xef\xde\xdd\x93\xad\x8d\x16\x78\x10\x5a\x8a\xb4\x20\x83\x45\xe4\x1c\xb3\x16\xf3\x4f\xba\x95\x0d\x3e\x5c\x83\xc7\xaa\x2d\xf9\x5a\x94\x84\x3f\xa8\x85\xc9\x44\x81\x01\x93\x5f\xc4\x64\xa2\xa4\x1e\xc2\x6a\x91\xfd\x12\x7b\x02\xa9\xb6\x64\x2c\x8a\x70\x17\xaf\xe3\xaf\x37\xdb\x78\x85\xdb\x6f\xf8\x92\xdc\x25\x1c\xab\x04\xeb\x64\x8b\x78\x75\xbf\xe5\x8c\x75\x6a\x9e\xeb\xe7\x27\x89\x16\x48\x5a\xdd\x4b\x40\x73\xac\x09\xff\xce\x9f\xb3\x4f\x37\x9c\xb5\xde\x34\xe7\x20\x0d\x9a\x47\xc2\xcc\xda\xf9\xd9\x1a\xe7\x66\x23\x19\xb9\xae\x4a\x0f\xd8\x64\x8f\x54\x8a\x13\x84\xb3\xfe\x7a\x44\x66\x1a\x2d\xd5\xfe\x0d\x7b\x93\x55\xca\x34\x08\x18\x60\xed\x7b\x68\xa1\xf6\x84\xf9\x41\x14\xdd\xe6\x0c\xfe\x3c\x88\xa2\x25\xd3\x2d\x0d\xd0\xc1\x30\xbf\xa9\xeb\x82\x7a\xc4\x41\x14\xfc\xb3\x48\xa9\x98\xec\xdf\x09\x27\x2e\xe0\x86\xeb\x49\x26\xd6\x7a\xca\x73\x3a\x57\xd6\xfa\x6a\xe7\xae\x46\x40\x3e\x50\x5f\x28\xbc\x1e\x1d\x07\xb3\x73\xf9\x2c\x1c\x66\x23\xb5\xeb\x9a\x87\x2f\x14\xd6\x46\x34\xd2\xe4\xc7\x5e\xbd\xf9\x5d\x44\x3b\x2d\x0f\xa4\xbd\x79\x1a\x52\x35\xa4\x73\x91\xbd\xe0\x8a\xf7\x9d\x60\x7a\x19\x92\xcc\x93\x42\xf2\x4a\x4f\x9c\xcd\x5b\x95\x21\xb0\xd6\x7f\x39\x9c\x1b\x5d\x86\x9e\x3c\x08\x11\x8c\xd9\x96\x20\xad\x2b\x1d\xc2\x32\x40\x53\xd3\x6a\x35\x3c\x88\x11\x4d\xb8\x84\x92\x05\x73\xaf\x60\x7b\xbd\xef\x1e\x8a\xe1\xb1\xca\xaa\x1d\xdd\x4a\x25\xf4\xf1\x35\x9c\x9f\xf4\xdb\x4c\x02\x78\x42\xd2\x7f\x65\x30\xe6\x08\x7e\x62\xe1\xb9\xf9\xc7\x4a\xa9\x7b\x95\x57\x4b\xa4\xf8\xfe\x23\x3d\x36\x14\x22\xf0\x7f\x2e\x05\x24\xea\x9a\xd4\x2e\x48\x97\x03\x78\x1c\x15\xe7\xfc\x14\xd7\xbb\xbf\x01\x00\x00\xff\xff\x3b\x56\x37\x75\x7c\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x80, 0x5c, 0xe4, 0x7a, 0x54, 0x28, 0x97, 0x98, 0x42, 0xcd, 0x72, 0xfd, 0x46, 0x3c, 0xf2, 0xe6, 0x53, 0xd4, 0x46, 0x73, 0x27, 0xa8, 0xec, 0xb0, 0xf, 0x14, 0x9c, 0xdb, 0xa, 0xca, 0xa2}}
	return a, nil
}

var _templatesManyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4d\x6f\xdb\x38\x13\x3e\x57\xbf\x62\x5e\xa1\x78\x57\x4e\x5d\x79\xcf\x59\xf8\x90\xd6\x6a\x36\x45\xea\xa4\xb6\xd3\x62\x11\x14\x09\x2d\x8d\x1d\x36\x12\xa9\x92\x54\x5d\x43\xd1\x7f\x5f\x90\x94\x64\xca\x71\x12\x6f\xda\x3d\xed\x4d\xd2\x7c\x70\x9e\x99\x67\x66\xa8\xb2\x1c\x1c\xc0\x27\x22\x28\x99\xa7\x28\xe1\x60\x50\x55\x5e\x59\xc2\xcb\x0b\x89\x02\x0e\x87\x10\xce\xb4\x20\xfc\xc0\x13\x4c\xa1\x96\x15\xbb\x64\x77\x20\x29\x5b\x16\x29\x11\x70\x07\x31\xc9\xba\xea\xd2\xd1\x1f\x93\x0c\xe1\x0e\xf2\xb4\x10\x24\x75\x95\xbd\x9c\xc4\xb7\x64\x89\x50\x96\xb5\xd1\x1d\xa4\x7c\x85\x42\xcb\x06\x03\x38\x8e\xc6\xd1\xe4\x68\x16\x8d\xe0\xcd\x5f\x70\x7e\x76\x7c\x16\xc2\xe8\x0c\xc6\x67\x33\x88\x46\x27\xb3\xd0\xf3\x68\x96\x73\xa1\x20\xf0\x00\x7c\x64\x31\x4f\x28\x5b\x0e\xbe\x4a\xce\x7c\xef\x85\x8f\x42\x70\x21\xf5\x93\x54\x82\xb2\xa5\x79\x54\x34\x43\xdf\xf3\x5e\xf8\x4b\xaa\x6e\x8a\x79\x18\xf3\x6c\xf0\x95\xc4\xb7\xf1\x20\x5f\xfe\xf0\x3d\x00\x0d\x20\x3c\xaf\xe3\xaa\x2a\xf0\xcb\x12\xea\x63\xaa\xca\xf7\x7a\x26\xb0\x48\x88\xb2\x34\x29\xab\xaa\x31\x57\xef\x78\xc1\x12\x10\xa8\x0a\xc1\x30\x01\xba\x00\x75\xa3\x41\x39\xf8\xab\x0a\xa8\x04\xc6\x15\x2c\xb4\xb2\xf7\x9d\x88\xdd\x5e\x86\x60\xe3\x0e\xc7\xb8\x0a\xfc\x6d\x1f\xad\x03\xdf\x06\xd2\xda\x9f\xb0\xbc\x50\x90\x99\xca\x2c\xb8\xd0\x61\xbf\x0c\xa7\xf1\x0d\x66\xa4\xb6\xf5\x43\xf3\xcd\x75\xe7\x7b\x6a\x9d\xe3\xb6\x13\xa9\x44\x11\x2b\x28\x4d\x32\x5e\x83\x20\x6c\x89\xf0\x32\xe6\xa9\x53\xd2\xb7\x3c\x2d\x32\x26\x75\x11\x6d\xca\x62\x9e\x36\x75\x6e\xca\x0b\x07\x8d\xe0\x98\xcf\xf4\x39\xb5\xf2\x6b\x40\x96\xe8\x97\xaa\x0b\xe1\x67\xa3\x7f\x4e\xe0\x6e\xdc\x39\x91\x31\x49\xab\x4a\xe3\xa1\x8b\x1a\x12\x57\xe3\x22\xd5\x68\x6a\x5d\x0b\x45\xbf\x02\xa6\x52\x63\x3a\xd8\x21\xb1\xf8\x76\x80\x1d\xe3\x6a\x4f\x70\x70\x74\x7e\xe2\x2d\x0a\x16\x6b\x9b\xa0\xa7\x93\xd9\xa9\x92\x46\x69\x19\x07\xff\xef\x8a\x4a\x73\x58\x59\x3e\x99\x00\x5d\x9e\x28\x23\xd4\x8a\x3b\x59\x68\xc4\xb8\x2d\x6e\x7b\xd7\x56\xce\x98\xeb\xd4\xa3\x92\x86\xf4\x1a\x08\xda\x8f\xbe\x0d\x3f\xa8\x9b\xdb\x12\xc2\x0d\xb4\xe7\x78\x08\x36\x76\xb0\x95\xd0\xdd\xd8\x5b\xaf\xa1\x63\x39\x34\xb9\xa8\xdf\x36\x09\x6a\x75\x3d\x8d\xaa\x2d\x89\xc6\xf0\x81\x08\x79\x43\xd2\xf7\xd3\xb3\x31\x64\xf6\x79\x03\xc4\x1a\xf9\x40\x99\xe2\xa0\x55\x9e\x46\xe4\xf8\x0b\x7a\x10\x5c\x7e\x99\xaf\x15\xf6\x6d\x4f\xf7\xdc\xa2\xe9\x29\x15\xd6\xda\x1b\x87\xbd\x9a\x27\x17\x2c\x73\x02\x2b\x58\x1b\x9a\x36\x03\xc5\x81\xb8\x01\x3e\x1d\x56\xc7\x5f\x90\x10\x45\xc0\x86\xd6\xb3\xa1\xdd\x8b\xac\x35\x30\xca\x7d\xe8\x46\xf8\xe4\x79\x53\x33\x71\x83\x1e\xd8\xd1\xeb\xba\x77\xe3\x6e\x5c\x2d\x51\xd5\xbc\x7c\xcc\x69\x46\xf2\x4b\xeb\xef\x0b\x65\x0a\xc5\x82\xc4\x58\x56\xc6\x77\x5c\xb3\xfa\x70\x08\x19\xb9\xc5\x60\xb7\x6a\xcf\xb3\xd3\x6a\xbf\x91\xd6\x72\x7f\xd7\x70\xf3\x40\xcf\x88\x9d\x24\xfc\xdf\x10\x18\x4d\x4d\x58\x6d\x60\x97\xbe\x33\x6b\xaa\xca\xff\x02\x43\x83\xef\x9e\xb5\x07\x50\x9f\xdf\x90\xb4\x4d\x5c\xed\xaa\x66\xc8\xe7\x1b\x14\xf8\x36\x25\x85\x44\xbd\x59\x48\x33\xfd\x14\x87\x1b\xc2\x92\x14\x61\xa5\x35\x20\x36\x2a\xd2\xce\x4a\xd7\xc8\x99\x96\x31\x67\x09\x55\x94\xb3\xba\x5c\x1e\x40\x4e\x04\xc9\xa4\x46\x70\xe9\x66\xd0\x3d\x1c\x64\x8e\x31\x5d\x50\xb4\x0d\xd3\x3a\x91\xb6\xa6\x46\x27\xd8\x76\xdd\x6f\x3c\x87\x61\xe8\x56\x06\x0e\xdc\xd8\xdc\xe1\xe6\x7c\x6f\x52\x5a\xbb\x3c\xdc\x3c\xf6\x8d\xc4\xba\x3e\xdc\x3c\xf6\x4d\x3a\x6d\xcc\x27\x4c\xa2\x50\xdd\xc6\xb1\x9d\xbd\xe7\xb6\x31\xa8\xac\x97\x20\x99\xeb\xda\x37\xf7\x84\xaa\x0a\x47\x6f\x9c\x1e\xb1\x53\xea\x1e\x7f\x83\xcd\x97\xce\x44\x18\x0c\x74\x03\x00\x49\x53\x93\x48\xc6\xd9\x6b\x4d\xa0\x05\xc5\x34\x91\x40\x58\x02\xb9\xc0\x9c\x08\xd4\xe2\xcc\x2c\x48\xad\xf7\xad\x40\xb1\xf6\x00\xae\xe2\x3e\x5c\xd1\x3e\x5c\x7d\xd7\x64\xed\x86\x35\x4d\x69\x8c\xc1\xae\xf6\xb2\x31\xf5\xe1\x77\xd3\x14\x83\x01\xc8\x6f\x29\x50\x9b\x23\xe3\xb9\x0f\xb9\xa0\x19\x11\x6b\xb8\xc5\x35\xe4\x82\x7f\xa7\x09\x26\x30\x5f\x83\xc4\x6f\x05\xb2\x18\x3d\xd0\x46\x52\x99\xbb\xe1\xb5\x07\x70\x32\x9e\x46\x93\x19\x9c\x8c\x67\x67\xfb\x6e\xb9\xe0\x1a\x5e\xd5\xd4\x90\xe1\x7b\x4e\x59\xa0\xe1\xf8\x7d\xf0\x7b\xf0\x0a\xae\x7b\x1e\xc0\xa7\xa3\xd3\x8b\x68\xba\x4b\x93\x6e\x69\x4e\xa2\xd9\xc5\x64\x7c\x32\x3e\x86\xcd\x41\xd3\x8f\xa7\x13\xc3\x24\xd3\x5b\xd7\x76\x73\x38\x19\x3a\xe5\xcb\xc0\xa2\xd0\x19\x0c\xc3\xb0\xc9\x87\x28\x58\x27\xcd\xfa\xc6\xb6\x19\x4e\x6d\x25\x35\x53\xf9\x4a\x67\x20\x99\x87\x1f\xb5\xee\x84\xaf\xb6\x3d\x9a\x61\x81\x5a\x49\xf0\x55\x38\x8d\x09\x0b\x36\x11\x1e\x73\xfd\xa1\xaa\x7a\x7f\x00\x76\x87\x47\xdd\x02\x8c\xa6\x7d\x40\x43\xe5\xee\xd2\x2f\x6a\x2e\x31\x9a\xd6\x2b\x9f\x2e\x36\xe3\x2c\xcb\xb9\xa4\x0a\x9b\x55\x1e\xe7\xb2\x33\xed\x1c\xf1\x60\x00\xef\x28\x4b\xea\xde\xb8\xa8\x7b\x63\xbe\x06\xaa\xa4\xd9\xc6\xb9\x0c\x47\x28\x63\x41\x73\xdd\x6c\x55\x65\x7b\x41\xdb\x3c\xd8\x09\xda\xe6\x98\x9f\x9b\x36\xd4\x3b\xfc\x11\xf2\x6b\xe6\x49\x4c\x31\x7e\x3e\xf3\x00\xa6\xd1\x69\xf4\x76\xd6\x2d\xfc\xd4\x38\x35\x35\x02\x78\x37\x39\xfb\xb0\x83\x95\xe1\xfd\x46\xd7\xda\x9f\xff\x8c\x26\x51\x83\x63\xfa\xf1\xd4\x4c\xa1\x3d\x28\xd4\x22\xff\x44\x84\xc6\xfd\x2b\xc9\x74\xcf\xf7\x33\x69\x65\x8c\x86\x43\xc8\x97\x3f\xc2\x48\x88\x31\x9f\xf0\x95\xac\x65\x5d\xd2\xed\xfa\x43\x31\x6a\xd5\x33\xf8\xe9\xec\xb4\x9f\x61\xea\x45\x9e\x10\x85\xff\x94\xab\xd6\x6a\x4f\xb6\x3e\x7f\x94\xd7\x33\xfb\x70\xb8\xf3\x4a\x63\x8d\x6b\x4a\x24\x9c\xfd\xa6\xa0\xb0\x68\x34\x37\x16\x5c\x20\x5d\x32\x4d\x7a\xb9\xf5\x0b\x93\xcb\xe6\x7a\x62\x38\x92\x60\x8a\x0a\x03\x7b\x58\x5f\x27\xa2\xe1\x6e\xaf\xfb\xd3\x61\x4f\x72\xb6\x07\x48\xbd\x10\xe4\x5e\x5b\xa3\x71\x5f\xa7\x67\x5c\x64\x6d\x0c\xee\xce\x68\x28\xed\x34\xe4\xc5\xf9\xe8\x68\x16\xed\xbb\x02\xa6\xd1\xcc\x0c\x77\x43\xa9\x47\x56\x01\x0c\x1f\x52\xdb\xde\x03\x8f\xb5\xef\x93\x5b\xe2\xba\xc1\x86\xaa\xc8\xb7\x9a\x36\x2d\xd0\x14\xb7\x73\x27\x2a\xab\xc7\xab\x55\x9b\x0d\x81\xe4\x39\xb2\x24\xb0\xef\x3a\xaf\x9d\x4b\xa5\x6d\x68\xa7\x78\x0f\x5b\xb6\x5b\xe5\xe1\x39\x64\x55\x7f\xf5\x3a\x73\xbc\xfe\x27\x67\xcf\xc8\x34\xde\xfe\xb3\x27\xb4\xc3\xc7\x9a\xed\xbd\x2a\x37\x7f\x64\x5b\x2d\x16\x73\x26\x55\xd3\x68\xcd\xe2\x1b\x45\xa7\xd1\x2c\x7a\x68\xbd\xed\xbc\xc9\xfe\x4b\x0b\xae\x09\x93\x2e\xe0\xaa\x6f\xb9\x91\xcc\xc3\xe8\x07\xc6\x0f\x5a\x3f\x8f\x1f\xfb\x51\x63\x9b\x15\x5b\x4c\xf8\x3b\x00\x00\xff\xff\x78\x2f\xa8\x22\x09\x15\x00\x00")

func templatesManyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesManyGotmpl,
		"templates/many.gotmpl",
	)
}

func templatesManyGotmpl() (*asset, error) {
	bytes, err := templatesManyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/many.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x27, 0x1b, 0x2c, 0x1e, 0xdc, 0xb5, 0x1a, 0xcb, 0x32, 0xba, 0xc6, 0xb0, 0x6f, 0x24, 0xf1, 0x62, 0x4c, 0xcd, 0x7d, 0x5a, 0x1c, 0xb, 0xae, 0xd4, 0x16, 0x14, 0x8d, 0x51, 0xf4, 0xdf, 0xb7}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\xda\x48\x16\x7e\x8e\x7e\xc5\x59\x55\x2a\x11\x19\x22\x76\x5e\xb3\xc5\x83\x63\x14\x2f\xb3\x0e\x38\x06\x67\x76\xcb\x95\x0a\x6d\xa9\xc1\x3d\x16\x2d\xa5\x5b\xb2\x4d\x11\xfd\xf7\xad\xbe\x48\x6a\x81\x00\x81\xed\x99\x4d\xd6\x6f\x20\x9d\x3e\x3a\x97\xef\x5c\xa5\xe5\xb2\xf3\x06\x3e\x23\x46\xd0\x55\x88\x39\xbc\xe9\x64\x99\xb5\x5c\xc2\xcb\x0b\x8e\x19\xbc\xeb\x82\x3b\x16\x37\xdc\x01\x9a\x63\xf8\x0e\x9c\xd0\x59\x1a\x22\x06\xdf\x21\x46\xdc\x47\x21\x68\xf2\x74\x17\xb9\x8f\xe6\xb8\x42\xcd\xd7\xc9\xe3\x30\x65\x28\x34\x89\xad\x18\xf9\x37\x68\x86\x61\xb9\xd4\x87\xbe\x43\x18\xdd\x61\x26\xee\x75\x3a\x70\xe2\x0d\xbc\xf3\xa3\xb1\xd7\x83\xf7\xff\x81\xb3\xe1\xc9\xd0\x85\xde\x10\x06\xc3\x31\x78\xbd\xfe\xd8\xb5\x2c\x32\x8f\x23\x96\x80\x63\x01\xd8\x98\xfa\x51\x40\xe8\xac\xf3\x07\x8f\xa8\x6d\xbd\xb0\x31\x63\x11\xe3\xe2\x17\x4f\x18\xa1\x33\xf9\x33\x21\x73\x6c\x5b\xd6\x0b\x7b\x46\x92\xeb\xf4\xca\xf5\xa3\x79\xe7\x0f\xe4\xdf\xf8\x9d\x78\x76\x6f\x5b\x00\x42\x01\xf7\x4c\xcb\x95\x65\x60\x2f\x97\xa0\x1f\x93\x65\xb6\xd5\x92\x82\x79\x8c\x2d\x97\xd2\x88\x59\x36\x88\x92\x0f\x51\x4a\x03\x60\x38\x49\x19\xc5\x01\x90\x29\x24\xd7\x42\x29\x43\xff\x2c\x03\xc2\x81\x46\x09\x4c\x05\xb1\x75\x8b\x58\x3d\x97\x2e\x28\xb9\xdd\x01\xbe\x73\xec\x55\x1e\x05\x03\x5b\x09\x52\x9c\xef\xd3\x38\x4d\x60\x1e\x05\x38\x84\x69\xc4\x84\xd8\x2f\xdd\x91\x7f\x8d\xe7\x48\x9f\xb5\x5d\x79\xcd\x64\x67\x5b\xc9\x22\xc6\xab\x4c\x78\xc2\x52\x3f\x81\xa5\x34\xc6\x5b\x60\x88\xce\x30\xbc\xf4\xa3\xd0\x70\xe9\x71\x14\xa6\x73\xca\x85\x13\x95\xc9\xfc\x28\xcc\xfd\x9c\xbb\x17\xde\xe4\x37\x4e\xa2\xb1\x78\x8e\x26\x7e\x0b\x98\x06\xe2\x4f\x56\x55\xe1\xa1\xd2\x1f\x22\xb8\x29\xb7\x82\x7c\x96\x09\x7d\xc8\x54\xab\x14\x25\x83\x34\x14\xda\x68\x5a\xa5\x8a\xf8\x0b\x38\xe4\x42\xa7\x37\x35\x77\x94\x7e\x35\xca\x0e\xf0\x5d\x43\xe5\xe0\xe8\xac\x6f\x4d\x53\xea\x8b\x33\x4e\x4b\x18\xb3\xe2\x25\xa1\xa5\x42\x1c\xbc\xaa\xde\x5a\xca\x87\x2d\x97\x3b\x0d\x20\xdc\xe3\xcd\x11\x51\xb7\x2b\x56\xc8\x6f\xe3\xd5\xdb\x45\xec\x2a\xcf\xc9\xe3\xc2\xf4\x38\xe1\x12\xf4\x42\x11\xac\x2e\xda\x4a\x7c\x47\x07\xb7\x02\x84\x29\x68\xcb\xe0\xe0\x94\xe7\x60\xc5\xa0\xf5\xba\x17\x5c\x5d\xe3\x64\x57\xda\x42\xff\x2b\x0d\x54\xd0\x5a\x42\xab\xc2\x25\x42\x87\x8f\x88\xf1\x6b\x14\xfe\x36\x1a\x0e\x60\xae\x7e\x97\x8a\xa8\x43\x36\x10\x9a\x44\x20\x48\x76\x6b\x64\xf0\x73\x5a\xe0\x5c\x7e\xb9\x5a\x24\xb8\xad\x62\xba\x65\x3a\x4d\x64\x29\x57\x53\x97\x0c\x5b\x1a\x27\x17\x74\x6e\x08\x96\xd2\x42\x34\x71\x0c\x92\x08\x90\x29\xe0\x6e\xb1\x2a\xfc\x9c\x00\x25\x08\x94\x68\x2d\x25\xda\x9a\x64\xc5\x01\x49\xdc\x86\xaa\x84\x3b\x9f\x37\x92\x19\xd7\x69\x81\x4a\xbd\x26\x7b\x53\xee\x9c\xd5\x0c\x27\x1a\x97\xdb\x98\xce\x51\x7c\xa9\xf8\x7d\x21\x34\xc1\x6c\x8a\x7c\xbc\xcc\x24\x6f\x5f\xa3\xfa\x5d\x17\xe6\xe8\x06\x3b\xf5\xa4\x2d\x4b\x65\xab\x66\x29\xad\xc0\x7e\x5d\x72\xb3\x40\xe4\x88\x5a\x10\xfe\xad\x0b\x94\x84\x52\xac\x42\xb0\x4b\xdb\xc8\x35\x59\x66\x7f\x81\xae\xd4\x6f\xed\xb4\x05\xa0\x9f\x9f\x83\xb4\x30\x9c\x66\xa5\x11\xf2\xfb\x35\x66\xf8\x38\x44\x29\xc7\xa2\xb2\xa0\x3c\xfb\x25\x11\x5c\x23\x1a\x84\x18\xee\x04\x05\xf8\x92\x84\xab\x5c\x69\x1e\x32\xb2\xa5\x1f\xd1\x80\x24\x24\xa2\xda\x5d\x16\x40\x8c\x18\x9a\x73\xa1\xc1\xa5\x69\x41\xf3\xe1\xc0\x63\xec\x93\x29\xc1\x2a\x60\x0a\x26\x5c\xf9\x54\xd2\x38\xab\xac\xdb\x39\x67\xd7\x75\x4d\xcf\xc0\x1b\x53\x36\x33\xb9\x19\xd7\x73\x93\x6a\x96\xef\xca\x9f\x6d\x79\x47\xb1\x7e\x57\xfe\x6c\x4b\x73\x2a\x99\xfb\x94\x63\x96\x54\x03\x47\x45\x76\x1e\xee\x0d\x2a\x8e\xd4\x4c\x71\x72\x82\x2b\xe1\xff\xbc\x57\xc8\x32\xb7\xf7\xde\x88\x13\x95\xa9\xd6\x30\xec\x94\x57\x2a\x59\xa1\xd3\x11\x41\x00\x28\x0c\xa5\x38\x34\xa2\x6f\x05\x88\x72\x5c\x23\x1a\x40\xcc\x70\x8c\x18\x16\xf7\xe7\xb2\x4a\x0a\xc2\x6f\x29\x66\x0b\x0b\xe0\xab\xdf\x86\xaf\xa4\x0d\x5f\x6f\x05\x62\xab\x72\x8d\x42\xe2\x63\xa7\x2e\xc6\x94\x50\x6d\xf8\xbb\x8c\x8c\x4e\x07\xf8\xb7\x10\x88\x32\x94\xe4\xdc\x86\x98\x91\x39\x62\x0b\xb8\xc1\x0b\x88\x59\x74\x4b\x02\x1c\xc0\xd5\x02\x38\xfe\x96\x62\xea\x63\x0b\xc4\x21\x9e\xc8\xfe\x70\x22\xdd\xd0\x1f\x8c\xbc\xf3\x31\xf4\x07\xe3\x61\xd3\x62\xe7\x4c\xe0\x17\x8d\x10\xee\xfe\x16\x11\xea\x08\x85\xec\x36\xd8\x2d\xf8\x05\x26\x2d\xc9\xf7\xf3\xd1\xe9\x85\x37\xaa\xa3\x25\x6b\xb4\xe7\xde\xf8\xe2\x7c\xd0\x1f\x9c\x40\xf9\xb0\xd1\xa7\xd3\x73\x09\x2a\x19\x66\x13\x55\x44\x0c\x3b\x9d\x46\x33\x47\xe9\x22\xec\xe8\xba\xae\xb4\x8a\xe8\xd4\xca\xa4\x54\x78\x4f\x20\x34\xba\x13\x4a\x07\x57\xee\x27\x61\xab\xf3\xe8\x6e\xf5\xb8\x4c\x12\x58\x10\xb1\xe8\xce\x1d\xf9\x88\x3a\xa5\x38\x27\x91\xb8\x90\x65\xad\x7f\x00\xae\x26\x0d\x0d\x7d\x4a\xc2\x36\x60\x09\xe1\x6a\xb1\x4f\x35\x7e\x28\x09\x75\xa9\x27\xd3\x3c\x8d\x9d\x29\x7f\xfd\x0b\x2f\xf2\x1a\x1e\xdf\x18\x59\x6e\xfd\x76\x99\xe6\xe2\x9b\xba\x2a\xff\x81\xd0\x00\x10\x4c\x0a\xcd\x27\xc2\xfd\x24\x79\xcd\x2b\xd8\x10\xf7\x35\x83\x2c\x9b\xa8\x40\x11\x47\x37\x86\x89\x51\xed\xe3\x1b\xa3\xd8\x6f\x89\x10\x81\x4e\x8e\x43\xec\x3f\x04\x9d\x23\xef\xd4\x3b\x1e\x97\xdd\xf9\xe8\xd3\xe9\x48\xf2\x94\x3e\x05\xf8\x70\x3e\xfc\xd8\x34\x1d\x08\xfa\xdf\xff\xe9\x9d\x7b\xf2\x40\xa1\xbe\x0d\x5d\x78\xf9\xeb\x4e\x8c\x19\xbd\xca\xe1\x48\xab\x30\x39\x10\x6f\xf2\x50\xb7\x0b\xf1\xec\xde\xf5\x18\x1b\x44\xe7\xd1\x1d\xd7\xf7\xaa\x68\xac\x1b\x59\x24\x59\x76\x00\x70\x8d\x22\x57\x16\x65\x12\xdc\x1b\x70\xed\xd3\x00\xdf\x63\xdd\xad\xbe\x15\x82\x3a\x22\x15\x0a\x2a\xb7\xcf\x2f\x28\xf9\x96\x62\x70\xc4\x54\xa4\x2f\x69\x7c\xb7\x5a\x06\x7a\xdf\x2f\x96\x4b\x79\xfb\x24\xfa\x88\x93\xeb\x28\xc8\x32\x98\x2a\x54\x97\xe6\xbe\x5a\x80\xa6\xea\x61\xee\x33\x12\x8b\xb2\x92\x65\x25\x90\x6b\xb8\x6c\xc4\xb6\x22\x3b\x93\x35\xe8\x4f\xc5\xf4\xcb\x47\x05\xb5\xd6\x64\xf4\xe9\x54\x16\xe1\x06\x69\xb3\xd0\xfd\x33\x62\xfc\x21\xb0\x5e\x63\x04\xc2\x6e\xbb\x90\xad\x03\x80\xb1\x75\x7c\x33\xd6\x0c\xe1\x7b\x41\x9c\xb1\x06\x20\x2f\xe6\x0d\x03\xef\x1a\x99\x43\x8a\x15\x12\x23\x8a\xab\x58\x44\x65\x6f\x53\x42\x70\x48\x71\x3d\xe4\x54\xab\x67\xb6\x50\x4f\x8d\xb9\xed\x59\x74\x3f\xb8\x29\xb0\x89\xaa\x2e\xf5\x70\x4b\xcd\xb7\x41\x4d\xd1\xaa\x3e\xef\x41\xb5\x7a\x8d\xd1\x93\x67\xd1\x47\x4d\xa3\x2f\x0a\x34\xa9\xae\x5c\xe2\x69\x8e\xe8\xc2\x6c\x74\x5f\x73\x05\xaa\x19\xb9\xc5\xb4\x0e\x5a\xaa\x5b\x6f\x0e\xae\xcb\x2f\x1b\xe0\x95\xaf\xf2\xb2\x4c\x18\xd0\x24\x5b\x66\xd6\x4f\x0e\x3f\x16\xdd\xf1\x76\x9e\xa7\x72\xa8\xed\xc2\xd9\x6a\xb2\xaa\xee\x2c\xb8\x36\xaf\x9e\x0b\x03\x3c\xc5\x4c\x3e\xc7\x3d\x0e\x23\x8e\x1d\xf9\x5c\x31\x0c\xc8\x6b\x03\x7c\x9f\x38\x2d\xcd\x68\x73\x30\x54\x00\xce\x9b\x23\x7c\x17\xc6\x6b\x85\xdf\x88\xf5\x1c\xed\x5b\x54\xce\x49\x0c\x50\x75\x01\xc5\x31\xa6\x81\x63\x52\xbf\x32\xd6\x13\xea\x0c\x99\x2a\xdd\x3c\xc6\x9c\xd6\x4e\x03\x97\xa4\x2b\xd1\x66\x12\xe9\x6e\x5b\x07\xdb\x51\x18\xea\x26\x22\x0c\xab\x91\x56\x06\xd5\x51\x18\xd6\x85\xd4\x4f\x14\x3e\xdb\xba\x81\x9d\x21\xf1\x1c\x01\x3f\x66\x04\x3c\xed\xbc\x79\x11\x07\x28\xc1\x6b\x7b\x9a\xa6\x9b\x04\x39\x9b\xf2\x95\x79\x4c\x85\xa4\xe2\xbc\xe7\x40\x7a\xf8\x4a\x67\x4a\x70\x18\xc8\x95\xe4\xe6\xd5\x8b\x0e\xe9\x20\xa2\xaf\x13\x48\x95\xe6\xc9\x35\x36\x23\x5a\x62\x3e\xc4\x09\x76\x14\xc3\xf6\x8a\x6e\x39\x0f\x63\x3d\x04\x3c\x24\x3e\xe6\x8d\xd6\x42\x39\xd3\x5f\xcd\x15\x50\xbe\x55\x32\xb2\xc6\xc5\x59\xef\x68\xec\x35\xf5\xc2\xc8\x1b\xcb\x3d\x8d\x86\xf7\xc6\xcd\x8e\xbc\x3f\x69\x41\x77\x33\x35\x59\xa3\xde\x39\x76\xef\x5c\xff\x4c\x72\x5d\x71\x92\xc6\x85\xb6\xb7\x28\x4c\xb1\x74\x98\x0e\xb0\xca\xea\x73\x69\x4c\xda\x99\xb1\xe1\xd9\xdc\x22\x28\x7e\x79\x73\xd0\xe9\x00\x4b\x69\x65\x69\x77\x50\xbb\x6a\x70\xfd\xb1\x1a\xd5\x26\xf3\xbe\x9a\xe8\x79\x25\x15\x6c\x1f\xdf\xb5\xc9\x8c\x00\x3f\x7c\x50\xff\x6b\x62\xfd\x06\x2f\x78\xf5\x95\xa5\x90\x4a\x33\xc9\xb2\xda\xf8\x2f\x83\xbf\xf2\x92\xf1\x51\x32\x81\x36\xcb\x20\x9d\x17\x32\x3c\x5d\x6e\xd8\xb2\xf3\x35\x93\xc2\x96\x75\x2f\xe4\x34\x93\x0d\x4b\x8b\x92\x60\xaf\xac\x50\x0d\xd4\x3c\x33\x54\x53\x42\xb6\xdd\x6f\xfa\x58\x91\x4f\xd4\x7f\x61\xe1\x4a\xe1\x53\x35\xdb\x70\xe3\xe6\x93\xff\x17\x59\xe7\xa9\x92\x4e\x91\x51\xd4\xa0\x2c\x5a\x9e\xfd\x1a\x8b\x0d\xf3\xb3\xc1\xb4\xe9\x04\xdd\x20\xd3\x3c\x64\x44\x38\x30\x03\x6c\x7b\x45\x14\x62\xea\x98\x13\x6c\xeb\x47\xca\x09\x35\xc3\xbd\xa0\x7b\xe2\xcc\xb0\x29\x88\x6b\x16\x01\x8f\x1d\xef\xb9\x78\xdb\x37\x12\x6b\x41\xfd\x3c\x89\x3d\x4f\x62\xe5\x24\xd6\x93\x6d\xc7\xca\x24\x36\x65\xd1\x7c\x8f\x37\xe6\x90\x88\x7f\x2a\x4f\x2a\x7e\x7b\xbf\x10\x2c\x3f\x50\xd9\x9c\x6d\x7a\xde\xa9\x37\xf6\xf6\xd9\x5c\x6c\x1e\x20\x76\xbe\xe1\x30\xdf\xd9\xad\xc4\x1b\x99\xc2\xd7\xb6\x82\x73\x70\xe5\x7a\xf7\xd8\xaf\x3b\x78\x58\x6d\x6c\x56\x16\x57\x2b\xe2\x81\xad\xb7\xf2\x55\x5d\xeb\xad\x9a\x51\x5e\xf7\x05\xd2\xc6\x43\x8d\x5f\x94\xad\xf9\x5a\x3d\xed\x51\x5d\xbe\xd6\x20\xee\xff\x4a\x6b\xbb\x9b\x2b\xe4\x7f\xa9\xaf\x0b\x47\xaa\x8e\x47\x1b\xb3\xfe\xe5\x80\x88\xe9\xda\xf6\xc6\xe0\xd0\xfc\x05\xc1\x9a\x23\x1f\xb2\xb1\x3c\xd8\xd5\x8f\xb1\xd4\xdf\xe2\xeb\x55\xf2\x4d\x1f\x72\xd4\xfb\xe9\x01\xd9\x5b\x76\xb2\xf2\x2b\x9d\xd5\x4f\x15\x6b\xd7\x5f\x6e\xde\xa7\xfe\xd4\xdf\x2d\xd5\xe4\x88\x27\xf8\x12\x49\xf7\x8c\x93\x86\x1f\x23\xe5\xe4\xc3\x01\x1c\x0f\x07\x1f\x4e\xfb\xc7\x63\x70\x56\x16\x78\x39\x4d\x6f\x08\xba\x6b\xce\xdb\xe1\x5d\xad\x30\x78\xff\x3e\x3e\xbd\xe8\x79\x3d\x77\x13\x71\x41\xb0\x22\xcf\xce\x86\xb7\xd9\xc7\x51\x2b\xe5\xef\x7f\xfe\x5b\xa9\x03\x56\x50\x22\x66\xb6\xac\xa0\xec\x42\x4b\xdb\x8c\xb2\x7d\x8a\xe0\x73\xe0\xfd\x59\x81\x57\x96\xfe\x72\xb5\xf5\x1c\x7d\x07\x45\xdf\xab\x57\xea\x77\x5d\x1b\x73\x60\x4c\xfe\x37\x00\x00\xff\xff\xc8\x47\xb0\x3a\xad\x34\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x2c, 0x28, 0x7b, 0x2c, 0xdb, 0xd7, 0x59, 0x32, 0xd0, 0xe6, 0x60, 0x81, 0x2, 0x22, 0xfa, 0x1, 0x20, 0xae, 0x55, 0xd1, 0x13, 0x61, 0x32, 0x8, 0xa1, 0x64, 0xd8, 0xca, 0x5b, 0x17, 0x4a}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\xe2\xc1\x28\x5a\x7b\x6d\x48\xe8\x75\x81\x1c\x36\x95\x91\x06\x58\xd8\xde\xc4\x29\x50\x04\x01\x4c\x53\x23\x99\x88\xc4\x51\x48\x4a\x4e\x6a\xf8\xbf\x17\x94\x3f\x36\xd9\x22\xdd\x4b\xa4\x13\x31\x9c\x37\x7c\xf3\xf8\x86\xda\xed\x92\x4f\x1f\xf5\x25\xfb\xbd\x08\xf5\xf0\x97\xb4\x5a\xae\x4b\x72\x38\xc7\x3e\xf2\x0c\x21\x3e\xbc\x64\x47\x7b\xde\x58\x2c\xa4\x7a\x94\x05\xf5\x44\xbc\x3e\x56\xdf\xed\x10\x9f\x4e\x0a\xf1\x5e\xda\x59\x70\xc1\xa8\xa4\x7d\x24\xdb\x53\x3b\x49\x82\xab\xe9\x6c\x7a\xf3\x65\x39\x4d\x71\xf9\x37\x16\xf3\xab\x79\x8c\x74\x8e\xd9\x7c\x89\x69\x7a\xbd\x8c\x7b\x6a\x2d\x95\x5e\xae\xa5\x23\x68\xe3\xc9\xe6\x52\x11\xdc\x86\x9b\x32\xc3\x96\xed\x23\xb6\xda\x6f\x90\x1d\x73\x12\xf7\x54\xc6\xe9\x25\x7e\x7d\x1b\x59\x3e\xf7\x27\x4a\x7a\x09\xed\xe0\x37\x04\xc5\x55\xc5\xe6\x15\xcd\x9c\xed\x99\x07\xb8\x26\x2b\xbd\x66\x13\x92\xa5\x87\x92\x06\x6b\x42\xe3\x28\xeb\x7a\x08\xb5\xfc\x4b\x4d\x0e\xb9\xe5\x0a\x4e\x6d\xa8\x92\x58\x05\xf7\xdc\x76\xeb\x78\x26\xab\xe0\xa0\x55\x2c\x92\x24\x64\x2f\x37\xda\xfd\x5c\x0a\x69\xb2\x1f\xc5\x88\x45\x38\xa8\x63\x7e\xe6\xba\x13\xd1\xf4\x99\xd4\xd0\x79\xab\x4d\x31\x41\x1c\xc7\xe7\xcd\xdd\x7e\x84\x61\x5d\x3c\xc7\x7f\x70\x55\x49\x93\x2d\x65\x31\x01\x59\xcb\x76\x24\xa2\x6f\x0d\xd9\x97\xf7\x61\x9f\x02\xee\x86\xb7\xee\x07\xc4\x0d\x6f\xdf\x05\x9d\x30\xa2\xb7\x69\x69\xd6\xa5\x56\x50\x8d\xf3\x5c\xe9\x7f\xc2\xf3\x85\x92\x8b\x42\x9b\xe2\x95\x24\xbd\x59\xe6\x2b\x17\xa8\x2d\xb7\x3a\xa3\x83\x73\x4a\x2e\x90\x37\x46\x1d\xdc\xb0\x7e\x41\x41\x26\xb8\x85\x32\x3c\x35\x64\x35\xb9\x58\xb4\xd2\x76\xc0\x8b\x2e\xf3\x5d\xed\x76\x3d\x6b\xc6\xf5\xc1\xc3\xc1\xdb\x4d\xed\xc8\x7a\x87\xe1\x72\x9e\xce\x3f\xa3\x92\x8f\x04\x1f\x4c\x29\x0d\xc8\x34\xd5\xa8\x27\x09\x15\x1b\xe7\x31\x14\x40\x92\xe0\xae\x23\x91\xf2\x8c\xfd\x26\xdc\x5f\xca\x30\xc7\xa5\xce\x83\xba\x96\x7e\x73\x90\x50\x6c\xf2\x52\x2b\x2f\xf0\x1f\xc8\x05\x06\x87\x77\xec\xcf\xeb\xd9\xd5\xe0\x6d\xd9\xbb\x3a\x93\x9e\xb0\x20\x9b\xb3\xad\x42\x67\xcd\x21\xb2\xdd\x90\xf9\xff\xf2\x47\xe8\xa1\xfa\xdd\x22\xfd\xb2\x9c\x0e\xc4\xa8\xdf\xeb\xd9\x50\x59\x93\xed\x2c\x12\xee\x09\x9e\xe1\x4a\xad\x08\xdc\x58\xe4\x9a\xca\xcc\x05\x87\x33\x6e\xbf\x7d\x45\x6e\x35\x99\xac\x7c\x81\x36\x75\xe3\xfb\xfa\x81\x27\x09\x6e\x3b\x0a\x8a\x4d\xdb\xf9\x25\x70\x51\x5c\x36\x95\x39\x92\x71\x5c\xd1\xe1\x2a\xc2\x34\xb8\xa7\x12\x99\xd5\x2d\xd9\xee\x91\x6c\x4c\x46\xd6\x79\x69\x32\xd1\xcd\x48\x57\x6c\x78\xc2\x57\xb2\xbe\x3f\xcc\xc2\xc3\xab\x39\x98\x80\xf3\xdc\x91\x0f\xe5\x47\x18\x2a\xdc\x3f\x9c\x06\x46\xbf\x5a\xb7\xb8\x7f\x78\x3b\x3d\x22\x32\xf8\x7c\x71\x42\x8f\xf1\xbb\x88\x82\xd3\x15\x97\x13\xb4\xb2\x0c\x7b\x56\x9a\x82\xce\xfc\x77\x22\x8a\x14\x2e\x20\xeb\x9a\x4c\x36\x54\x13\xac\x06\xab\xb1\xe2\x72\xbc\x1a\xac\x46\x22\x8a\xf4\xf7\x4d\x3d\xc1\xe0\x97\xc1\xd8\x79\x1b\xa4\x88\xaf\x3d\xcb\xa1\x19\x85\xa4\xf6\x7b\x52\xdb\x1d\x14\x82\x66\x3c\x16\xd1\x5e\x44\x96\x7c\x63\x0d\xd4\x04\x7a\x82\x56\xec\xc5\xbf\x01\x00\x00\xff\xff\xa5\xd7\xa5\x26\xc8\x09\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xeb, 0xc6, 0xd9, 0xb1, 0xeb, 0x52, 0x4d, 0x2f, 0x29, 0x7e, 0x2b, 0x49, 0x32, 0x8e, 0x1a, 0x84, 0x29, 0x28, 0x34, 0x5c, 0xd7, 0xd6, 0x27, 0x4b, 0x11, 0x1d, 0x5e, 0xa4, 0xee, 0xc6, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/many.gotmpl": templatesManyGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"many.gotmpl":  &bintree{templatesManyGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
