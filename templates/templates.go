// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdb\x72\xdb\x38\x93\xbe\x16\x9f\xa2\x7f\x55\xfe\x0c\x19\x6b\xa8\xc9\x5c\x7a\xd7\x5b\x15\xdb\xf2\xac\x67\x1d\x29\xeb\xc3\xcc\x4e\xa5\x52\x12\x43\x42\x36\xc7\x14\xa0\x00\x94\x6c\x95\x8a\xef\xbe\xd5\x38\x90\xe0\x41\x96\xe4\x53\x92\x89\x73\xa5\x00\x8d\x46\xa3\xd1\xfd\x75\xa3\x01\x7a\x1a\x84\xd7\xc1\x25\x81\xe5\xf2\x95\xff\x21\x48\xaf\xfc\x0f\xaa\x21\xcb\x1c\x27\x9e\x4c\x19\x4f\xc1\x75\x00\xda\x21\xa3\x29\xb9\x4d\xdb\xf8\x9b\xd0\x90\x45\x31\xbd\xec\xfe\x2d\x18\x6d\x3b\xad\x36\xe1\x9c\x71\x81\xbf\x44\xca\x63\x7a\x29\x7f\xa6\xf1\x84\xb4\x1d\xa7\xd5\xbe\x8c\xd3\xab\xd9\x67\x3f\x64\x93\xee\xdf\x41\x78\x1d\x76\xa7\x97\xb7\x6d\xc7\x73\x9c\x6e\x17\x7e\xeb\xf5\x7b\xa7\xef\xce\x7b\x87\xb0\xff\x17\x7c\x18\xfc\x36\xf0\xe1\x70\x00\xfd\xc1\x39\xf4\x0e\x8f\xcf\x7d\x49\xd3\xe3\x1c\xa5\x3b\x0f\x3e\x27\xc4\xff\x10\x88\x30\x48\xb2\xac\xcf\xd2\x23\x36\xa3\x11\x70\x92\xce\x38\x25\x11\xc4\x63\x48\xaf\xd4\x42\x14\x69\x3f\x98\x90\x2c\x83\x58\x00\x65\x29\x8c\x91\xda\x99\x07\x7c\x0d\xbf\x3d\x50\xab\xf1\xfb\xe4\xc6\x6d\x17\x84\x07\xc1\x84\x24\x59\x56\xf0\x6a\xab\x15\xd4\x59\x01\x27\x62\x96\xa4\x10\x05\x69\x00\x63\xc6\x41\x72\x39\x0b\xaf\xc8\x24\xd0\x42\xb5\xfd\x76\x55\xce\xb6\x93\x2e\xa6\xa4\x89\x9d\x48\xf9\x2c\x4c\x61\xe9\x00\x2c\x97\x3f\x03\x0f\xe8\x25\x81\x57\x21\x4b\x60\x77\x0f\x72\xf1\x58\x32\x9b\x50\x01\x59\x26\xc9\xb0\xbb\xe0\xb0\x5c\xa2\x76\x64\x5b\x9f\xa5\xfd\x59\x92\x40\x96\x69\xa2\x73\x9c\xd5\x88\x87\xad\x40\x12\x41\x20\xcb\xde\xac\x26\xa0\x11\x64\x19\x8c\x70\xfb\x77\xdb\x9a\xec\x8c\x06\xd7\x24\xcb\x3a\x6c\x12\xa7\x64\x32\x4d\x17\xed\x91\x16\x58\x91\x3b\x99\x23\xb5\x3f\x84\x29\xbb\x64\xfe\x29\xbb\x81\x3d\x70\xdf\xd4\xd7\xeb\xb9\x34\x4e\x94\x6e\x0f\x49\xc8\x22\x02\xf1\x64\x9a\x90\x09\xa1\xa9\xc8\xc7\x3a\xe3\x19\x0d\xc1\x2d\x46\x9f\x5d\x31\x9e\x66\x19\x34\x31\xd4\x7c\xdc\xfa\x66\xc6\x34\x25\x7c\x1c\x84\x64\x99\x79\x6a\xdf\xa5\x9a\x87\x35\xca\x0e\xb0\x6b\x54\x77\xad\xc3\x6f\x5c\x82\x03\xa8\xf0\x7f\xb1\x6b\xc9\x0e\xb4\x91\xc2\x78\x92\xfa\x3d\x9c\x65\xec\x8e\xea\xc2\x44\x52\xca\x5d\x68\xff\xfb\xbc\x6d\xac\x36\x80\x76\x03\xff\xf6\xa8\x53\x97\x04\x27\xc5\xcd\x7f\x53\x97\x1e\xf6\x6c\xbd\x68\x55\x39\xb9\x58\x34\x4e\x70\x77\xba\x5d\xe8\x93\x9b\x0d\xad\x15\x62\x3a\x9d\xa5\x6a\x1b\xd0\x53\x3c\x78\x73\x8c\x2d\x72\xc1\x9a\xef\x6b\xd9\xb2\xcc\x34\x73\xd5\x7f\x2f\xaf\x50\x43\xef\xe3\x08\xca\xea\xa5\x1e\x40\x99\x07\xd4\xad\xda\x10\xff\x5c\xb8\xc9\x2c\x49\x90\x9d\xea\x01\xa0\xfa\xff\x66\xb8\xda\x09\xc9\x71\x1d\x4b\x6d\xfe\x77\xf8\xc2\x31\x15\x84\xa7\x72\x3a\x74\x09\xb9\x58\xe3\x05\xcb\xe5\xfa\x75\x2a\x14\x2a\x79\xbc\x20\xa9\x90\x70\x68\xdc\xd3\xa8\x73\xa5\xdf\xa8\x59\xab\x8c\x5c\xfd\x7f\x63\x48\xcd\x98\x50\xda\xfc\x1a\x6f\xbf\xc2\x63\x0f\x5e\x97\x5b\x0a\x8b\xa9\x1b\x69\x86\x2a\x68\xde\x17\xb4\xd7\x95\xdb\x72\x13\x27\x09\x6a\x41\x2a\x61\x64\xfa\x51\x0b\x90\x65\x23\x48\x19\xf4\x2f\x4e\x4e\x90\xef\xa8\x2c\xcc\x48\xba\xde\x2c\x49\xd6\xaa\x6a\xe5\xe4\x55\xa5\xad\xb4\x90\x35\x7a\x5b\x6d\x74\x5b\xaa\xd0\xb2\x3c\xeb\x27\x2a\xf0\x7d\xc0\xc5\x55\x90\xfc\x7e\x36\xe8\xc3\x44\xfd\x2e\xec\xa6\x0c\x22\xe8\xf2\x29\x03\x24\x5d\xab\x1a\x8b\xad\xeb\x81\xfb\xf1\xd3\xe7\x45\x4a\x3a\x0a\x61\x3d\x1b\x22\x30\x84\xf8\x9a\xba\xce\xcf\xd3\xc8\x71\x41\x27\x96\x9c\x33\x9a\x4b\x8a\xc3\x71\x2f\x83\x26\x79\xd7\x4a\x59\x62\xeb\x4a\x60\x52\x92\xda\xb1\xc0\x16\x34\x1f\x20\x89\x3b\x75\x5d\x4b\x81\xd7\x4d\x7b\x26\x73\x24\xd7\x03\x95\x2c\xd9\xb3\x34\xe0\xdf\x06\x0c\x43\x05\x05\xae\x07\x93\x60\xfa\x51\x71\xfd\x64\x85\x36\x39\x83\x26\x42\x08\x99\x04\xd7\xc4\x6d\x26\xf5\x1c\x85\x9a\x1b\x60\xeb\xdd\x80\x29\x03\xe0\x36\x26\xfd\xaf\x3d\x8c\x43\x3a\x5e\xe2\x3f\x2d\xf0\xc7\x0a\x82\x7d\x6a\x0c\x66\xab\x19\x6b\x7e\x85\xc4\x39\x1e\xaf\x10\xb1\xe2\xbc\x15\xb9\xb6\x93\xaa\xe6\xa4\x4a\x90\x3c\x87\x72\x8a\xad\xd7\x8c\xf3\x58\x89\x21\xa1\x96\xf9\x14\x91\x62\xad\x51\x28\x52\x37\xfa\xac\x46\x1e\xee\x7b\xe0\x9a\xec\xa9\xc9\x13\x73\xfa\x55\x66\xad\xd2\x83\xa3\x38\x49\x09\x87\x90\x93\x20\x25\x02\x02\xa0\xe4\x06\xc6\xb2\x31\x4f\x06\x14\x0d\xa6\x04\x9a\xda\xce\x09\x54\x53\x9e\x14\x68\x0a\xc5\x41\x6c\x9d\x18\xe8\xe1\x79\x66\xd0\x1a\x33\x3e\x09\x52\x01\x1f\x3f\x29\xe3\x76\x5a\xf3\x20\x99\x11\x01\xf0\xd1\xb6\xf3\x4a\x04\x3e\x60\x34\x8a\xd3\x98\x51\x19\x80\x15\x53\x2b\x0f\x3d\x48\x82\x99\x20\x30\xa6\x5a\xeb\x63\xb3\x32\x4f\x77\xe1\x5a\x15\x23\x45\xb9\x74\x5a\x66\xbd\x56\xf3\xd2\x69\xb5\x30\x04\xec\x02\x40\xfb\xcf\xff\xee\x9d\xf6\xda\x1d\xa7\xd5\x3a\x92\x22\xef\x6a\x38\x10\xfe\xef\x2c\xa6\xee\xd8\xd7\x2b\xe9\x40\x1b\xde\xf5\x0f\xa1\xed\x21\xed\x87\x80\x07\x13\xb1\x0b\x63\x5f\x2d\xab\xe3\xb4\x8c\x26\xdf\xd1\xc8\x6c\x44\xb7\x0b\x35\x41\xdf\xd1\xc8\x35\x5a\xf6\x7d\x3f\x6f\x2f\xf6\xa8\xdb\x05\x00\x54\x4a\x28\xa5\xb5\x74\x28\x7b\x70\x6b\x86\x1d\x3d\x05\xa2\x82\xc2\x08\xc3\x53\x8f\x07\x18\xc2\x9e\x25\x07\xfe\xeb\x76\x73\x96\x7b\x10\x4c\xa7\x84\x46\xae\x6e\xe8\xe8\x55\x6b\xd1\x8a\x8d\x70\x3d\xcf\x53\xe3\x33\x3d\xbd\x5f\xe3\x91\x37\x75\xca\xba\xcb\x5b\x8d\xe6\x34\x27\x93\x85\xe3\xff\x94\xce\x06\xfc\x2e\x95\x0d\xf8\x0f\xa8\xb1\xc1\xe9\x4a\x85\x15\x71\xa1\x58\x92\xf1\xca\x23\xbd\x28\x99\x62\x14\x64\x24\x89\x24\x95\x16\xf6\x08\x1b\x44\x29\x49\x96\xc9\xab\x26\xb5\xc2\x41\xd1\x76\x48\x44\xc8\xe3\xa9\xf4\xce\x2c\xab\x7b\x60\xc3\x68\x77\x6e\xb5\x36\x24\x5d\x16\x2c\x99\x18\xa6\x68\xcf\xa6\x9c\x04\x3a\x3c\xe0\xbe\x72\x1b\x48\x70\x3b\xd5\xc2\xe6\xe8\xe0\x2d\x6e\x29\x96\xa3\xee\xfe\x2d\xda\x1e\xfa\x23\xaa\xde\xe0\x90\xa5\xfa\xdc\xa1\xf1\x18\x78\x36\xe5\x31\x4d\xe5\x39\xd0\x4c\xae\x70\x00\xd3\xd3\xca\xee\x20\x73\x8b\x2e\x17\x72\x84\x3b\x9e\x9b\x59\x5c\x58\xd8\x5c\x87\x2b\x83\x12\xb6\x14\x1a\x37\x20\x36\xe7\x45\x19\x13\xd5\x91\x7f\xad\xe4\x8d\xd2\x7a\x4e\xeb\xae\x89\xe6\x5e\xf9\xec\xd3\xca\xad\xea\xae\xc4\x74\xc0\x23\xc2\xf7\x17\x20\xa6\x24\x8c\xc7\x71\x18\x13\x95\x97\x0e\x4e\x0f\x7b\xa7\xfb\x0b\xd8\xff\x0b\xfe\x93\x21\xcd\x7f\xa9\x40\x90\xd3\xab\xcd\x72\x42\x46\x45\x0a\xae\xd3\x42\x64\x3c\x3b\x00\xc1\x78\x2a\xe0\xf3\x02\x02\x11\x12\x1a\x61\xde\x25\x87\x3b\x2d\xec\x35\xa3\xf7\xa0\xfd\xee\xec\xa0\xed\xc8\x61\x87\x3d\x7b\x5c\x44\xaa\x03\x65\xbf\x35\x12\xff\x6f\xea\x5a\x7d\x72\x23\x7b\xf2\x98\x61\x1a\x30\x52\xa8\x1e\x2b\x46\xc8\x86\x35\x41\x49\xd2\x58\x31\x49\x31\x91\xa2\x28\xcd\x5c\xc6\x73\x42\x41\x6e\x8e\xb0\x74\x72\x57\x6c\xcc\x1a\xa3\x1b\xd3\x12\x3e\x20\xb8\xc9\x5d\x82\xfd\xbf\x56\xc7\x37\x66\xc5\xb7\x8e\x0a\x6e\xfa\xb0\x57\x07\x0f\x0d\x31\x03\xb5\xd6\xd5\x98\xa1\xf6\xca\xb2\xd1\xfc\xb8\x87\xfb\x4e\x81\xdc\x4e\x39\x11\x22\x66\xf5\x95\x36\x81\x88\xd4\xad\xd9\x60\x7b\xdb\x58\xdd\x47\xd8\x56\xde\x2d\x39\x7b\x5e\xae\x47\xe6\xd4\xec\x5f\x27\x80\x41\xc3\x91\x40\x9d\xc3\xf2\x43\xda\xfa\x4c\x49\x2e\xb6\x96\x0f\x36\x94\x90\xf2\xe4\xb1\xa9\xa8\x55\x4a\x1a\xbb\x5d\xb8\x24\x29\x04\x49\x22\x05\xa1\x8c\xfe\x8c\x59\xb2\x39\x64\x04\x34\x82\x29\x27\xd3\x80\x13\xec\x9f\x48\x8c\x42\xc2\x2f\x33\xc2\x17\x0e\xc0\x30\xec\xc0\x30\xee\xc0\x70\x8e\x3b\x2c\x92\x38\x6c\x28\xcf\xf9\xf9\xc1\xa6\x03\xbf\xc8\x93\x49\xb7\x0b\xe2\x4b\x02\xb1\x52\x8e\x64\xd6\x81\x29\x8f\x27\x01\x5f\xc0\x35\x59\xc0\x94\xb3\x79\x1c\x91\x08\x77\x5c\x90\x2f\x33\x42\x43\xe2\x00\x0e\x12\xa9\x8c\x57\x23\x09\x8c\xc7\xfd\xb3\xde\xe9\x39\x1c\xf7\xcf\x07\x9b\xd6\xbb\xdc\x11\xec\x94\x4d\x18\xd7\x20\x6d\x17\x76\x60\xe4\x49\xbe\x7f\xbc\x3b\xb9\xe8\x9d\x35\xd1\xc6\x35\xda\xd3\xde\xf9\xc5\x69\xff\xb8\xff\x9b\xb5\x0f\xa7\xd2\x1e\x62\x7a\x29\xb1\x78\xa4\x97\x9c\xb0\x4b\xb5\x56\x8c\x54\x37\xe4\xa7\x39\x29\xd6\x19\x60\xef\x25\xe1\xaa\xe2\x28\xb7\xf6\x84\x5d\x96\x4f\x2d\xa6\xd5\x55\x6a\x40\xad\xfb\xbe\xaf\xf0\x5f\x07\xba\x86\x9a\x61\xdd\x02\x30\x8b\x67\x37\xa8\xc5\xe8\xb3\xff\xbf\x28\xd0\x29\xbb\xa9\x33\x8d\xc7\x40\x64\x2c\x62\x37\xfe\x59\x18\x50\xfb\x90\x12\x06\x34\xcb\xbc\xff\x00\x52\x96\xb0\x28\x44\x76\x80\x18\xb9\x0c\xc8\x34\x55\x63\x75\xc9\x72\xb9\xec\xbe\x81\xa3\x98\xa2\x1e\x50\x34\xf4\x73\x59\xf5\x61\x63\x08\x0d\x7c\x0a\x78\xd3\x55\xa0\xa1\x29\x47\xf5\xa5\x49\x88\x10\x6c\x42\xac\x61\xbe\x72\x1c\x1c\x54\x72\x1b\xa4\x90\x19\x61\x19\xa5\x37\xf0\x9a\xa1\x40\x35\xc9\x26\x54\x50\x79\xbc\x70\x25\x63\xa9\xc4\x16\xea\x90\xf3\x42\x49\xad\x56\x49\x45\x9c\x23\x5c\x16\x0e\x21\x48\x42\xc2\x7b\x3a\xc4\x59\xef\xa4\x77\x70\x0e\xcb\xa5\xd9\x23\xc9\x2b\xcb\x60\x04\x3b\x72\x73\x46\x47\xa7\x83\xf7\x9b\xba\x89\x19\x34\x14\x3f\x8c\xf1\xca\x21\x7b\x7b\x30\xbd\xbc\xf5\x7b\x9c\xf7\xd9\x29\xbb\x11\x79\xc1\xc0\xde\xb7\x3b\x6f\x9e\x9c\xa2\x4c\xf1\x60\x77\xd8\x5f\xc0\x07\x6d\x04\xff\x43\x16\xca\xfe\xd5\x25\x90\x99\x5c\xf5\x62\xa7\xea\x7a\x35\x95\xf7\x1b\x8d\xdd\xda\x73\xf6\x17\xcb\xe5\xab\xe9\x75\x51\x64\xbe\x8f\x27\x55\x99\x54\x03\xd2\xf4\xda\xde\xc3\xe9\x75\xbd\xd4\xbc\x49\x6c\x7a\xa8\x4f\xc8\x5d\x58\xe5\x18\xb2\x73\x0b\x9f\x90\xf4\xf2\xb8\x2f\x07\x4c\xaf\x73\x67\xd9\x83\x57\x6f\x9f\x12\xe7\x5f\x97\x14\xfa\xd8\x3e\x53\xe7\xfe\x3d\x3b\x8f\x55\x93\xb3\xdd\xe8\x82\xc6\x5f\x66\x44\x27\x36\xb9\x23\xe9\x14\x35\x8e\x6e\x2d\xa7\x39\xa6\x11\xb9\x25\xc2\x1c\x66\xe2\x31\xb8\x98\x07\x21\x95\x7f\x2c\x34\x23\x97\xb2\xd4\x34\x69\x2f\xf3\xbc\xaa\x93\x61\xf7\x7b\x92\x5e\xb1\x28\xcb\x60\xac\x82\x56\x7d\xbf\x3e\x2f\x40\xd3\x5a\x47\x64\x73\x42\x6e\xe4\x55\x75\x36\xec\x53\x15\xa5\xaf\xec\x61\xaf\x1e\xcf\xc5\xf4\xb2\xfe\xbc\x22\x9c\x3c\x6d\x16\xa5\x67\xfa\x23\xe0\x31\xca\x22\x1e\xdf\xc3\x9a\x67\xd0\xd9\xc3\x6a\x27\xd3\x9e\x68\xe7\x0f\xc6\xd5\x38\xdf\xcc\xd9\xee\xe7\x6d\x9c\x6f\xe3\x6f\xd6\xd1\xbf\xee\x7a\xef\x03\xba\x50\xe9\x5c\x1e\x46\x4a\x69\x9c\xec\x47\xd7\x10\x30\xc1\x9f\x1b\xa6\x27\x65\x8e\x85\xab\x20\xbb\x0d\x93\xbc\x8f\x9f\xd6\xb9\x07\xee\xbe\x45\x92\xcc\x78\x90\x18\x13\x68\x1c\xed\x3c\x4e\x6e\xb8\x62\xce\x97\x7c\xd1\xca\x17\x39\xbb\x11\xb9\x92\x8d\xcf\x35\xa7\x81\x55\xff\xd9\x44\xcb\xca\x2d\x22\x32\x26\x5c\x4e\xe5\x1f\x24\x4c\x10\x57\x1e\x5e\x65\xfd\x10\xdb\xfa\xe4\x36\x75\x3d\xcd\x75\x1b\xa8\x28\x45\x58\xb1\x69\x88\x5d\x17\x64\xd7\xaf\x6c\x3d\x18\x18\x38\xd8\x54\x4b\xc5\x85\x5c\xb3\x9b\xe4\x85\x95\x95\x7c\x1a\xa0\xc5\x54\x34\xe3\xb1\xd2\x4f\x8f\x73\xd7\xdb\x6e\x0f\x8b\x71\x15\x24\x5b\x39\xc2\x4e\xbd\x2f\xa6\x51\x90\x12\x98\x04\x69\x78\x15\xd3\x4b\xc9\xad\x02\x39\x1d\xcd\x10\xbb\xdf\x9a\x97\x62\x06\xd8\xf4\xf8\x06\x37\x91\x9c\x62\x7a\x3f\x98\x6b\x9a\x53\x41\x9f\x9a\x70\xa3\xa2\xd0\xb7\x75\xee\x55\x65\xce\xe6\x17\x59\x79\xd5\x48\x23\x8a\x55\x88\x52\x95\x26\x51\x2a\x40\xfd\x5a\x54\xa0\x14\xd7\x0e\x24\x84\xba\xc3\xb9\x2c\xae\x0f\xe7\x85\x2d\xe2\x12\x86\xf3\x5f\xa5\xa4\x1a\x4b\x49\x3a\x9b\x4a\xc6\x33\xb5\x75\xba\xfc\xda\x92\x5e\x3d\xab\x5c\x1e\xc4\x1d\x08\x8b\x22\xfd\x30\x94\xeb\x1b\xce\xac\x09\x66\x1d\x08\x77\xf0\x5c\xd0\xde\x19\xc6\x1f\xe3\x4f\x5e\x01\xdb\x5a\x0f\x01\xd5\x6f\x13\xe2\x31\x50\x66\xa6\x95\x8f\xb1\x20\x16\x39\x54\x2a\x2f\x90\xeb\x98\x79\xe8\xfa\xbf\x34\x55\x5a\x2a\x0f\x1d\xcb\xef\x3f\x7d\x65\x1c\xbb\x38\x8d\xe2\x6f\x98\xb7\xb5\x73\xb4\x74\x34\x51\x45\xbd\x96\x15\x23\x2e\x3e\x1c\xbe\x3b\xef\x6d\x6a\xad\x67\xbd\x73\x19\x07\x5a\xad\x72\xcd\x6c\x66\xd5\xcc\x34\xc1\x50\x58\xff\x19\xad\x29\xa1\x3d\x53\xfd\x0c\x37\x67\x46\x4b\xe5\xcd\xef\xaa\x2a\xf1\x3c\x65\x89\xc7\xc1\x46\x99\xf6\x29\xa3\x17\x8f\x83\x93\x45\x95\xc2\x9e\x3e\x48\x12\x2d\x80\xb0\x91\xb2\x96\x26\xde\x07\x2d\xbf\xdd\x04\xf2\x05\x64\xbf\x12\xc8\xa2\x5d\xbd\x00\xed\x4b\xee\xfe\x92\xbb\x7f\xe5\xdc\xfd\xd1\x0b\xe7\x86\x6d\xad\x74\xde\xfc\xc0\x76\x8b\xc0\x15\xa7\xa2\x52\x4f\xb6\x23\xd5\x43\xeb\xec\x0f\xba\x1d\xde\x26\x70\x44\x8c\xfe\x94\x1a\x88\x45\x90\xb7\xaa\x11\xd2\x1d\x13\x92\x16\x41\xa3\xbc\xe0\x0d\x83\x4f\x3d\xf6\xbc\xfd\x81\x62\x4b\xd5\x12\x9e\x21\xce\xe8\xa8\xa1\xc3\x0d\xac\x0d\x36\xa3\x95\xb7\x23\x5b\x06\x20\xb5\x9d\x45\x16\x2e\xdf\x24\xed\xe6\xdb\x53\x7a\x02\xba\x2c\xdf\x5f\x64\x79\x04\x79\xa2\x58\xa6\xa4\x79\x9e\x83\x43\x69\xae\xef\xfa\xf0\x50\xad\x0d\xe7\x30\x3d\x53\xf7\x29\xb1\xbe\x74\xb9\xf3\x66\x46\xdd\xbd\x88\x3a\x24\xdf\x7d\xd1\x92\xeb\xba\x8a\xab\x5b\xdf\xa9\x3c\xf4\xad\x4d\x10\x45\xc6\x9a\x53\xed\xbc\x1d\x60\x73\xc2\x79\x2c\x5f\xa4\x91\xdb\x58\xa4\xf8\xe3\x9a\x2c\x84\xb4\x49\x4e\x04\xa1\x29\x46\x14\x34\x2f\xf5\xb1\x16\x34\x48\xd1\x00\xd1\xf5\xe7\xff\xb8\xa6\xe2\xed\xbf\x7f\xf7\x37\x42\x5e\xe9\x75\xbb\x7e\x28\x84\x42\x98\x17\xee\x0f\x8c\x0f\xb8\xc4\xf2\x17\x60\x96\x78\x59\xd6\x18\x33\x8a\x80\x51\x7a\x8a\x78\xcf\xe8\xb1\x5c\x26\x84\x56\xa6\xfd\xd1\x02\x8a\xed\x02\x77\x44\x94\xfc\xc6\xc1\x00\xdc\x83\xcf\x2e\x28\xf2\x9a\x80\x22\x2f\x21\x9a\x6e\x03\x8b\xde\xad\xe2\x49\x19\xa0\x4d\x4c\x29\x07\x93\xac\xf9\xa3\xc4\xaa\x69\x56\x9f\xc9\x9a\x47\xb2\x15\x17\xaa\x7e\x3a\xb8\x6a\xd8\x4b\xc4\xfa\x2e\xde\x11\x6c\xf6\x3a\xed\x50\xc2\x56\xe3\x9b\x1a\xd1\xf4\xa8\x06\x94\xc1\xaa\xd7\xbf\xe3\x98\x8b\x54\x97\xac\xf4\x73\x1b\xc5\xef\x5b\x7f\xba\xa6\xc0\xba\x09\x1f\x0e\x7b\x27\xbd\xf3\xde\x36\xcf\x00\xac\xdb\xc4\x32\x18\x7c\x1b\xf5\x8b\xef\xaa\x2a\xfc\x6c\x6f\xd5\xb6\x71\x0e\x59\xfe\xdd\xd4\x41\x56\xd4\x73\x4b\xde\xf1\x83\xdd\xfb\xff\x40\xce\xf6\x52\x2c\x7c\x29\x16\x3e\x4d\xb1\xf0\x01\xd5\x40\x05\x3a\x1b\x56\x03\xc7\x9c\x4d\xb6\xf8\xcc\x03\xac\xef\x82\x9b\xe7\x79\xba\xb7\xb6\x4f\x82\x2b\x6b\xaa\x42\x5f\x15\x6b\x9a\x1f\xd6\x3e\x5d\x7a\xfc\xcf\x7d\x6a\xbb\x49\xc5\xc6\x32\xe7\x52\xc5\x46\x99\x9d\xb8\xeb\xcf\x3f\xac\x18\xfa\xc8\x2f\x61\x9f\xd2\xfe\x1f\x78\x84\x7d\xce\x67\xaf\x4f\x6a\xff\x0d\x93\xfe\x43\x9c\xe0\xa1\x37\x4c\x82\xf0\xb4\x16\x53\xd4\x37\x72\xa2\xfc\x91\x86\x32\xb1\x51\x47\x55\x89\x30\x31\xc6\xbd\x42\xbd\xeb\x3f\x84\x63\x71\x18\x41\x90\x70\x12\x44\x0b\x55\x5d\x34\x79\x73\xf3\x74\xcf\x78\xbd\xd4\x7a\xb4\x7a\x68\x6b\xa3\x72\xa8\x5f\x59\x69\x05\x8a\x9d\xd6\x86\xd5\xcc\x56\x73\xa9\xb1\x75\x57\xa5\xf1\x17\x3d\x6e\xbb\xaa\xe2\x70\xf3\xaa\x62\xef\xff\x0e\x4e\x2e\x0e\x7b\x87\x7e\x7b\x27\xfc\xca\xa5\xc5\x26\xb3\xba\x67\x65\xf1\x09\x3e\xef\xd4\xb8\x3b\xda\xf0\x0b\x4f\x43\x3e\xe8\xc3\xc1\xa0\x7f\x74\x72\x7c\x70\x0e\xae\x9d\xc8\xe4\x14\x87\x03\xd0\x85\xd0\x0d\xaf\xcb\xbe\x99\x13\x96\x46\xfb\x6f\xe2\xcd\xdb\xeb\xd7\xea\x77\x13\xac\x3f\x57\x96\x62\x99\x70\x29\x4b\xb9\x1f\x12\x17\x95\xe3\x93\x58\xa4\x9b\xc0\xf1\x1d\xf9\x0d\xbc\x5c\x4b\x35\x5e\x4b\x7d\xa5\xef\xd7\xbf\x2b\xc8\xaa\x1a\xe2\x0a\xe4\x5a\x2b\xcd\x1e\xb8\x45\xb8\x59\x45\x5c\xc4\xa3\xb2\x50\x2f\x88\xf7\xbc\x88\x87\x86\x8a\x46\x0d\x21\xa3\x73\x89\x5e\x6c\xc6\x73\xf7\x90\x7f\x80\x42\xb0\x09\x49\xaf\x0c\x72\xc9\x53\x10\x8f\xe7\x84\x43\x18\x50\x98\xd1\x88\x70\x91\x06\x34\x52\x30\xa5\x3c\xc4\x8c\x6f\xfe\xdb\x73\x1d\x60\xe3\xb1\x20\x88\x0e\x88\x3f\x61\x9e\xd5\x74\x20\xb6\x7e\xcf\xcb\x37\x6f\x32\x25\xa4\xa8\x36\x3d\x7a\x07\xde\xaa\x34\x28\x64\x89\xbc\x57\x2a\x52\x21\x33\x3f\xe6\x43\xa1\xf5\x97\x95\x3a\x30\x6a\x8f\x76\x42\x96\xec\x8c\xda\x23\xcf\x69\xb5\xe2\xa2\x13\x7d\xe4\x55\x7b\x47\xa4\x1c\x55\xe1\x1f\xa7\x2c\x70\xa9\x87\x44\xd6\xa3\xd5\xb9\x9c\x08\x1b\xe9\xce\x0e\xa6\x51\xa6\x34\x1b\x76\x20\xee\xc0\xdc\xc9\x9c\xff\x0f\x00\x00\xff\xff\xd4\x68\x24\x5c\x69\x59\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0xca, 0x5d, 0x6f, 0xf0, 0x26, 0x10, 0x45, 0x81, 0x8, 0x52, 0x7a, 0x73, 0x64, 0xe3, 0x80, 0xe5, 0x80, 0xa2, 0x9e, 0xf7, 0x2f, 0x94, 0x68, 0x99, 0x6e, 0xfa, 0x2e, 0xf9, 0xdb, 0xb7, 0x3c}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x8f\xdb\xb6\x0f\x7f\xb6\x3e\x05\x61\xf4\xc1\x69\x03\xe5\xff\x5c\xa0\x7f\xa0\x69\xb2\xee\x86\xee\x92\xa5\x19\x86\x62\x18\x56\x45\xa6\x6d\xed\x6c\xc9\x95\xe4\xcb\x05\x41\xbe\xfb\x40\xc9\x76\x72\x69\x7b\x58\x1f\xef\xcd\xa2\xc9\x1f\xf9\xa3\x48\x8a\xad\x90\x77\xa2\x44\x38\x1e\x5f\xf0\xb5\xf0\x15\x5f\x47\xc1\xe9\xc4\x98\x6a\x5a\x63\x3d\x64\x2c\x49\x4b\xe5\xab\x6e\xc7\xa5\x69\x66\xff\x08\x79\x27\x67\x6d\xf9\x90\xb2\x09\x63\xb3\x19\xbc\x5f\xde\x2e\x37\x6f\xb7\xcb\x05\xcc\x3f\xc1\x7a\xf5\x7e\xc5\x61\xb1\x82\xdb\xd5\x16\x96\x8b\x9b\x2d\x0f\x3a\x8b\x39\x28\x07\xbe\x42\x90\xa6\x69\x8c\x06\xa5\x3d\xda\x42\x48\x84\xc2\x58\xc8\x85\x17\x3b\xe1\x10\x4c\x8b\x56\x78\x65\x34\x29\x0b\x0f\x52\x68\xd8\x21\x74\x0e\x73\xd8\x2b\x5f\x11\x96\x3f\xb4\xe8\xa0\xb0\xa6\x01\x27\x2b\x6c\x04\x7c\x3e\x1e\x81\x7f\x0c\xdf\xfc\x56\x34\x08\xa7\xd3\x67\x0e\xb7\xc6\x63\x44\xf1\x95\x72\xa0\x1c\x19\x8b\xda\x19\x90\xa6\x55\x98\x53\x0c\x06\x50\xc8\x0a\x4c\x11\x62\xf3\x62\x57\x23\xf4\x29\x71\x9c\xcd\x66\x64\xb2\x25\x6b\x57\x99\xae\xce\x61\x6f\xec\x5d\x08\x64\x0c\x79\xe6\xbe\xd4\x7c\x31\x07\xa1\xf3\xc7\xb2\xed\x03\x67\x14\x6a\xe0\x3e\xb2\x3d\xb2\x64\xf9\x80\x32\x73\xde\x2a\x5d\x4e\x81\x73\x3e\xfe\x3c\x9e\x26\x90\xb5\xe5\x03\x7f\x67\x9a\x46\xe8\x7c\x2b\xca\x29\xa0\xb5\xc6\x4e\x58\xf2\x5b\x87\xf6\xf0\x7d\xb3\x97\x64\xb7\x31\x7b\x77\x65\xb1\x31\xfb\xef\x1a\x0d\x36\xec\x14\xee\xe8\x83\x29\xa1\xe8\xb4\xa4\xf4\x73\x58\xdd\xa3\xb5\x2a\xc7\x98\xbc\x40\x99\x52\x54\x9b\xb2\x44\x4b\x09\x3b\x98\xce\x82\xac\x8c\x92\xc8\xee\x85\x0d\xe6\x6f\x02\xc0\x77\x1d\x1e\xa3\xa3\x77\x46\xe7\xaa\xbf\xe4\xce\x6a\x07\x02\x6a\xe5\x3c\x81\xca\xf3\x2f\xba\x1d\xd2\x76\x5f\x6a\x90\xb5\xe8\x1c\xba\x90\xe4\x56\x58\xd1\x38\x46\x8e\x2e\x90\x32\xb2\x74\xe4\x71\x94\x4d\x20\x23\xdb\x21\x98\x68\x07\x7f\xfe\x75\x11\x52\x48\x56\x9f\x30\xba\x1a\xe2\xb1\xaf\xd0\x22\xe9\x45\xc3\x28\x2c\xad\xe9\xda\xdd\xe1\x5a\x6c\x6c\x8e\xf6\x6b\x71\xad\x1a\xe5\xaf\x85\x94\x41\xa5\x3d\x63\x09\x55\xfc\xdf\xd3\xc0\x15\x5e\xbf\x01\x2b\x74\x89\x10\xe3\x3f\xb2\x24\x89\x64\xe9\x0f\xc9\xf8\xbb\x70\xcc\x26\x2c\x49\xdc\x5e\x79\x59\xf5\xd9\xe0\x5b\x2a\xae\x60\x40\x9d\x93\xfe\xf1\xf3\x72\xb3\x4c\x5f\xb3\x24\x09\xee\x2c\x16\x57\x64\xe9\x4f\xef\x3a\xe4\xe2\xc2\x77\x04\x5c\xc7\x0c\x11\x64\x92\x28\x5f\xbd\x7a\x15\xbe\x02\xd2\x1b\x10\x6d\x8b\x3a\xcf\xe8\x34\x85\xf4\x45\xfa\xca\x79\x2b\x8d\xbe\xe7\x37\xde\x88\x4c\xf9\x6a\x32\x09\xea\x7d\x9e\x47\x83\x78\xee\x7d\x06\x95\x10\x49\x9f\xe6\x51\x2d\x9e\xa7\x50\x34\x9e\x7f\x6c\xad\xd2\xbe\xc8\xfa\xb8\x7e\x32\xb6\x11\x7e\x1a\x28\x71\xce\x83\x9f\xc8\xf9\xfd\x66\xf5\xfb\x1a\xe6\x9f\x9e\x0f\xed\xb1\x90\x46\xc5\x41\xf2\x83\xd4\x57\x9b\xc5\x72\xf3\xac\xa8\x8f\xcd\x32\x2a\x0e\x92\x1f\xa4\xfe\xe1\xe6\xd7\x9b\xed\xf3\xe1\xdd\x4f\x83\x51\x2d\x9e\xff\x33\xe7\x1c\x0b\xd1\xd5\x3e\xd0\xb5\x48\x03\x93\x46\xe2\x30\xcf\x22\xcc\x92\x26\x58\x91\xa5\x9d\xbe\xd3\x66\xaf\xcf\x63\x34\x3c\x96\x29\xc1\x9c\x58\x72\x62\x2c\x99\xcd\xa0\xed\x3c\xe0\x3d\xda\x83\xaf\x94\x2e\xc1\x9b\x12\x7d\x85\xb6\x9f\x68\x9d\xbf\x98\x5b\xaa\x80\x1a\x75\xdf\x9b\x13\xf8\x3f\xfc\x2f\xe4\x8c\x94\xce\x97\xd8\xf9\x69\x3f\x7d\x20\xa4\x4a\xe9\xd2\xf1\x5f\x8c\xd2\x63\x4f\xa7\xf0\xf6\x76\x01\x29\xd1\x39\x8d\xa0\x43\xdd\x3f\x09\x3b\x34\xf8\x35\xf2\xb9\x69\xd2\xe9\x35\xf0\x50\x55\x4f\x02\x0f\xed\x73\x0d\x7c\x2e\xc9\xaf\x81\xe3\xc5\x3d\x09\x1b\x4a\xf3\x1a\x73\xb8\xf0\x33\x22\x1b\x6f\xf2\x91\xef\x00\x01\xe9\xe4\x7c\xb9\x5a\xd5\xec\xea\xd1\x3c\x2f\x13\x71\xbd\xf8\xc6\x0f\x8a\x6e\x78\x36\xe0\x65\xfc\x1a\x60\xe2\xe3\xe2\xbc\xed\xa4\xef\x01\x2e\x45\x64\x1a\x1e\x16\x80\xa1\x08\x62\x51\x8e\xc7\xf5\x37\xde\xd1\x1e\xfc\x46\x3b\xb4\x71\x89\xea\x17\x37\x15\x24\xc3\xae\x45\x0b\xc4\x62\x3e\xee\x54\x8a\x5e\x7e\x6a\x2c\xd4\x0a\x35\xad\x82\xfd\xf6\x11\x76\x42\xa7\x9a\xb6\x46\x52\x8e\x20\x17\xbb\x61\x8c\xfb\xc2\xdb\x23\xe6\x51\x9e\xe5\x3b\x58\xcc\x27\x90\x6d\xcc\x7e\xdc\x89\x62\x98\x1b\xb3\xbf\xb0\x10\x75\x6d\xf6\x8e\xd6\x19\xf0\x06\xda\xae\xae\xa9\x09\xc2\xa2\x59\x21\xb8\x16\xa5\x2a\x94\x84\xc6\xe4\x58\xd3\x56\x02\x02\x4a\xd4\x68\x95\x84\xbd\x38\xc4\x50\x1e\x23\x1e\x59\xb2\x40\x69\x72\xcc\xee\xe1\xd1\xfe\x13\xa2\x60\x27\xf6\x6f\x00\x00\x00\xff\xff\xb4\x51\xba\xd6\x75\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x4a, 0x88, 0x16, 0x8f, 0x33, 0x4e, 0xcc, 0xa0, 0xfa, 0x1e, 0x65, 0xc2, 0x90, 0x3b, 0x72, 0x51, 0x38, 0x87, 0xf, 0x91, 0x56, 0xf0, 0xea, 0x35, 0xe2, 0xea, 0xd9, 0xa0, 0xb1, 0xa7, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
