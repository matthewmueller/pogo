// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/many.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x61\x6b\xdb\x30\x14\xfc\x3c\xfd\x8a\x23\x04\x6a\x87\x4c\xfe\x3e\xe8\x87\x76\xf1\x4a\x61\xc4\x63\x09\x85\x31\xc6\x90\x9d\xe7\x54\xcc\x96\x3d\xc9\x0e\x04\x4d\xff\x7d\xd8\x72\x16\x1b\x02\x65\xd0\x16\x9a\x4f\x41\xba\x77\xef\xde\xdd\x93\xad\x8d\x16\x78\x10\x5a\x8a\xb4\x20\x83\x45\xe4\x1c\xb3\x16\xf3\x4f\xba\x95\x0d\x3e\x5c\x83\xc7\xaa\x2d\xf9\x5a\x94\x84\x3f\xa8\x85\xc9\x44\x81\x01\x93\x5f\xc4\x64\xa2\xa4\x1e\xc2\x6a\x91\xfd\x12\x7b\x02\xa9\xb6\x64\x2c\x8a\x70\x17\xaf\xe3\xaf\x37\xdb\x78\x85\xdb\x6f\xf8\x92\xdc\x25\x1c\xab\x04\xeb\x64\x8b\x78\x75\xbf\xe5\x8c\x75\x6a\x9e\xeb\xe7\x27\x89\x16\x48\x5a\xdd\x4b\x40\x73\xac\x09\xff\xce\x9f\xb3\x4f\x37\x9c\xb5\xde\x34\xe7\x20\x0d\x9a\x47\xc2\xcc\xda\xf9\xd9\x1a\xe7\x66\x23\x19\xb9\xae\x4a\x0f\xd8\x64\x8f\x54\x8a\x13\x84\xb3\xfe\x7a\x44\x66\x1a\x2d\xd5\xfe\x0d\x7b\x93\x55\xca\x34\x08\x18\x60\xed\x7b\x68\xa1\xf6\x84\xf9\x41\x14\xdd\xe6\x0c\xfe\x3c\x88\xa2\x25\xd3\x2d\x0d\xd0\xc1\x30\xbf\xa9\xeb\x82\x7a\xc4\x41\x14\xfc\xb3\x48\xa9\x98\xec\xdf\x09\x27\x2e\xe0\x86\xeb\x49\x26\xd6\x7a\xca\x73\x3a\x57\xd6\xfa\x6a\xe7\xae\x46\x40\x3e\x50\x5f\x28\xbc\x1e\x1d\x07\xb3\x73\xf9\x2c\x1c\x66\x23\xb5\xeb\x9a\x87\x2f\x14\xd6\x46\x34\xd2\xe4\xc7\x5e\xbd\xf9\x5d\x44\x3b\x2d\x0f\xa4\xbd\x79\x1a\x52\x35\xa4\x73\x91\xbd\xe0\x8a\xf7\x9d\x60\x7a\x19\x92\xcc\x93\x42\xf2\x4a\x4f\x9c\xcd\x5b\x95\x21\xb0\xd6\x7f\x39\x9c\x1b\x5d\x86\x9e\x3c\x08\x11\x8c\xd9\x96\x20\xad\x2b\x1d\xc2\x32\x40\x53\xd3\x6a\x35\x3c\x88\x11\x4d\xb8\x84\x92\x05\x73\xaf\x60\x7b\xbd\xef\x1e\x8a\xe1\xb1\xca\xaa\x1d\xdd\x4a\x25\xf4\xf1\x35\x9c\x9f\xf4\xdb\x4c\x02\x78\x42\xd2\x7f\x65\x30\xe6\x08\x7e\x62\xe1\xb9\xf9\xc7\x4a\xa9\x7b\x95\x57\x4b\xa4\xf8\xfe\x23\x3d\x36\x14\x22\xf0\x7f\x2e\x05\x24\xea\x9a\xd4\x2e\x48\x97\x03\x78\x1c\x15\xe7\xfc\x14\xd7\xbb\xbf\x01\x00\x00\xff\xff\x3b\x56\x37\x75\x7c\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x80, 0x5c, 0xe4, 0x7a, 0x54, 0x28, 0x97, 0x98, 0x42, 0xcd, 0x72, 0xfd, 0x46, 0x3c, 0xf2, 0xe6, 0x53, 0xd4, 0x46, 0x73, 0x27, 0xa8, 0xec, 0xb0, 0xf, 0x14, 0x9c, 0xdb, 0xa, 0xca, 0xa2}}
	return a, nil
}

var _templatesManyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xb6\x9a\x4c\x4b\x39\x0a\xd5\xb3\x3b\x3a\x38\x11\xe3\x3a\xe3\xc8\x8e\x24\x27\xd3\xf1\x64\x6c\x98\x5c\xc9\x68\x48\x80\x01\xc0\x28\x1a\x9a\xef\xde\xc1\x0f\x29\x50\x96\x6d\xd5\x49\x4f\xbd\x91\xdc\xdd\x0f\xfb\xf3\xed\x2e\x58\x55\xc3\x03\xf8\x48\x04\x25\x37\x19\x4a\x38\x18\xd6\x75\x50\x55\xf0\xe2\x42\xa2\x80\xc3\x11\x44\x73\x2d\x88\xde\xf3\x14\x33\x70\xb2\x72\x97\xec\x0e\x24\x65\xcb\x32\x23\x02\xee\x20\x21\x79\x57\x5d\x7a\xfa\x13\x92\x23\xdc\x41\x91\x95\x82\x64\xbe\x72\x50\x90\xe4\x0b\x59\x22\x54\x95\x33\xba\x83\x8c\xaf\x50\x68\xd9\x70\x08\xc7\xf1\x24\x9e\x1e\xcd\xe3\x31\xbc\xfe\x0b\xce\xcf\x8e\xcf\x22\x18\x9f\xc1\xe4\x6c\x0e\xf1\xf8\x64\x1e\x19\x9d\x58\x88\xaa\x32\xde\xd7\xf5\x84\xab\xb7\xbc\x64\x29\x08\x54\xa5\x60\x98\x02\x5d\x80\xba\xd5\xf8\x9e\x2b\x75\x0d\x54\x02\xe3\x0a\x16\x5a\x39\xf8\x46\xc4\x6e\x94\x11\xa0\x10\x5c\xc8\x68\x82\xab\xb0\xb7\x8d\xd1\x02\xf4\xfa\xc6\x91\xd6\xfe\x84\x15\xa5\x82\xdc\x24\x69\xc1\x05\xf4\xaa\xea\x45\x34\x4b\x6e\x31\x27\xce\xb6\x17\x99\x6f\x3e\x5c\x2f\x50\xeb\x02\xb7\x41\xa4\x12\x65\xa2\xa0\x0a\x00\xaa\xea\x15\x08\xc2\x96\x08\x2f\x12\x9e\x79\xd9\x7d\xc3\xb3\x32\x67\x52\xe7\x53\x6b\x19\x71\x93\xf2\x26\xd3\x70\xd0\x08\x8e\xf9\x5c\x9f\xe3\x94\x5f\x01\xb2\x54\xbf\xd4\xdd\x10\x7e\xd4\xfb\xe7\x38\xee\xfb\x5d\x10\x99\x90\xac\xae\x75\x3c\x74\xe1\x42\xe2\x6a\x52\x66\x3a\x1a\xa7\x6b\x43\xd1\xaf\x80\x99\xd4\x31\x1d\xec\x90\xd8\xf8\x76\x04\x3b\xc1\xd5\x9e\xc1\xc1\xd1\xf9\x49\xb0\x28\x59\xa2\x6d\xc2\xbe\x4e\x66\xa7\x4a\x3a\x4a\xcb\x38\xf8\xb5\x2b\xaa\xcc\x61\x55\xf5\x64\x02\x74\x79\xe2\x9c\x50\x2b\xee\x64\xa1\x11\xe3\xb6\xb8\x6d\x23\x5b\x39\x63\xae\x53\x8f\x4a\x1a\xd2\xeb\x40\xd0\x7e\xec\x59\xf7\x43\xd7\x67\x96\x10\xbe\xa3\x7d\x0f\x21\xdc\xd8\xc1\x56\x42\x77\xc7\xde\xa2\x46\x9e\xe5\xc8\xe4\xc2\xbd\x6d\x12\xd4\xea\x06\x3a\xaa\xb6\x24\x3a\x86\xf7\x44\xc8\x5b\x92\xbd\x9b\x9d\x4d\x20\xb7\xcf\x9b\x40\xac\x51\x0f\x28\x53\x1c\xb4\xca\xd3\x11\x79\x78\x61\x1f\xc2\xcb\xcf\x37\x6b\x85\x03\xdb\xd3\x7d\xbf\x68\x7f\x4b\xce\x22\xa7\xbd\x01\xec\x3b\x9e\x5c\xb0\xdc\x73\xac\x64\xad\x6b\xda\x0c\x14\x07\xe2\x3b\xf8\xb4\x5b\x1d\xbc\x30\x25\x8a\x80\x75\xad\x6f\x5d\xbb\xe7\x59\x6b\x60\x94\x07\xd0\xf5\xf0\xc9\xf3\x66\x4a\x50\xb6\x0c\xfb\xba\x27\x29\x5b\xfa\xf0\xbe\xdf\x0d\xd4\x12\x95\xe3\xe5\x63\xa0\x39\x29\x2e\x2d\xde\x67\xca\x14\x8a\x05\x49\xb0\xaa\x0d\x76\xe2\x58\x7d\x38\x82\x9c\x7c\xc1\x70\xb7\x6a\x3f\xb0\xd3\x6a\xbf\x91\xd6\x72\x7f\xd7\x70\x0b\x40\xcf\x88\x9d\x24\xfc\x65\x04\x8c\x66\xc6\xad\xd6\xb1\xcb\x9e\x37\x6b\xea\xba\xf7\x19\x46\x26\xbe\x7b\xd6\x01\x80\x3b\xbf\x21\x69\x9b\x38\x07\xe5\x18\xf2\xe9\x16\x05\xbe\xc9\x48\x29\x51\x6f\x16\xd2\x4c\x3f\xc5\xe1\x96\xb0\x34\x43\x58\x69\x0d\x48\x8c\x8a\xb4\xb3\xd2\x37\xf2\xa6\x65\xc2\x59\x4a\x15\xe5\xcc\x95\x2b\x00\x28\x88\x20\xb9\xd4\x11\x5c\xfa\x19\xf4\x0f\x07\x59\x60\x42\x17\x14\x6d\xc3\xb4\x20\xd2\xd6\xd4\xe8\x84\xdb\xd0\x83\x06\x39\x8a\x22\xbf\x32\x70\xe0\xfb\xe6\x0f\x37\xef\x7b\x93\x52\x07\x79\xb8\x79\x1c\x18\x89\x85\x3e\xdc\x3c\x0e\x4c\x3a\xad\xcf\x27\x4c\xa2\x50\xdd\xc6\xb1\x9d\xbd\xe7\xb6\x31\x51\x59\x94\x30\xbd\xd1\xb5\x8f\xce\xed\x55\xa2\xae\xa3\xf1\x6b\xaf\x47\xec\x94\xba\xc7\xdf\x70\xf3\xa5\x33\x11\x86\x43\xdd\x00\x40\xb2\xcc\x24\x92\x71\xf6\x4a\x13\x68\x41\x31\x4b\x25\x10\x96\x42\x21\xb0\x20\x02\xb5\x38\x37\x0b\x52\xeb\x7d\x2d\x51\xac\x03\x80\xab\x64\x00\x57\x74\x00\x57\xdf\x34\x59\xbb\x6e\xcd\x32\x9a\x60\xb8\xab\xbd\xac\x4f\x03\xf8\xdd\x34\xc5\x70\x08\xf2\x6b\x06\xd4\xe6\xc8\x20\x0f\xa0\x10\x34\x27\x62\x0d\x5f\x70\x0d\x85\xe0\xdf\x68\x8a\x29\xdc\xac\x41\xe2\xd7\x12\x59\x82\x01\x68\x23\xa9\xcc\x35\xed\x3a\x00\x38\x99\xcc\xe2\xe9\x1c\x4e\x26\xf3\xb3\x7d\xb7\x5c\x78\x0d\x2f\x1d\x35\x64\xf4\x8e\x53\x16\xea\x70\x7a\x03\xe8\xf5\xe1\x25\x5c\xf7\x03\x80\x8f\x47\xa7\x17\xf1\x6c\x97\x26\xdd\xd2\x9c\xc6\xf3\x8b\xe9\xe4\x64\x72\x0c\x9b\x83\x66\x1f\x4e\xa7\x86\x49\xa6\xb7\xae\xed\xe6\xf0\x32\x74\xca\x97\xa1\x8d\x42\x67\x30\x8a\xa2\x26\x1f\xa2\x64\x9d\x34\xeb\x1b\xdb\x66\x38\xb5\x95\xd4\x4c\xe5\x2b\x9d\x81\xf4\x26\xfa\xa0\x75\xa7\x7c\xb5\x8d\x68\x86\x05\x6a\x25\xc1\x57\xd1\x2c\x21\x2c\xdc\x78\x78\xcc\xf5\x87\xba\xee\xff\x01\xd8\x1d\x1e\xae\x05\x18\xcd\x06\x80\x86\xca\xdd\xa5\x5f\x3a\x2e\x31\x9a\xb9\x95\x4f\x17\x9b\x71\x96\x17\x5c\x52\x85\xcd\x2a\x4f\x0a\xd9\x99\x76\x9e\x78\x38\x84\xb7\x94\xa5\xae\x37\x2e\x5c\x6f\xdc\xac\x81\x2a\x69\xb6\x71\x21\xa3\x31\xca\x44\xd0\x42\x37\x5b\x5d\xdb\x5e\xd0\x36\x0f\x76\x82\xb6\x39\xe6\xe7\xa6\x0d\xf5\x0e\x7f\x84\xfc\x9a\x79\x12\x33\x4c\x9e\xcf\x3c\x80\x59\x7c\x1a\xbf\x99\x77\x0b\x3f\x33\xa0\xa6\x46\x00\x6f\xa7\x67\xef\x77\xb0\x32\xba\xdf\xe8\x5a\xfb\xd3\x9f\xf1\x34\x6e\xe2\x98\x7d\x38\x35\x53\x68\x0f\x0a\xb5\x91\x7f\x24\x42\xc7\xfd\x33\xc9\x74\x0f\xfb\x99\xb4\x32\x46\xa3\x11\x14\xcb\xef\x51\x2c\xc4\x84\x4f\xf9\x4a\x3a\x59\x97\x74\xbb\xfe\x50\x8c\x5a\xfd\x0c\x7e\x7a\x3b\xed\x47\x98\x7a\x51\xa4\x44\xe1\xbf\xe5\xaa\xb5\xda\x93\xad\xcf\x1f\xe5\x6e\x66\x1f\x8e\x76\x5e\x69\xac\xb1\xa3\x44\xca\xd9\x6f\x0a\x4a\x1b\x8d\xe6\xc6\x82\x0b\xa4\x4b\xa6\x49\x2f\xb7\x7e\x61\x0a\xd9\x5c\x4f\x0c\x47\x52\xcc\x50\x61\x68\x0f\x1b\xe8\x44\x34\xdc\xed\x77\x7f\x3a\xec\x49\xde\xf6\x00\xa9\x17\x82\xdc\x6b\x6b\x34\xf0\x2e\x3d\x93\x32\x6f\x7d\xf0\x77\x46\x43\x69\xaf\x21\x2f\xce\xc7\x47\xf3\x78\xdf\x15\x30\x8b\xe7\x66\xb8\x1b\x4a\x3d\xb2\x0a\x60\xf4\x90\xda\xf6\x1e\x78\xac\x7d\x9f\xdc\x12\xd7\x4d\x6c\xa8\xca\x62\xab\x69\xb3\x12\x4d\x71\x3b\x77\xa2\xaa\x7e\xbc\x5a\xce\x6c\x04\xa4\x28\x90\xa5\xa1\x7d\xd7\x79\xed\x5c\x2a\x6d\x43\x7b\xc5\x7b\xd8\xb2\xdd\x2a\x0f\xcf\x21\xab\xfa\xb3\xd7\x99\x87\xfa\xbf\x9c\x3d\x63\xd3\x78\xfb\xcf\x9e\xc8\x0e\x1f\x6b\xb6\xf7\xaa\xdc\xfc\x91\x6d\xb5\x58\xc2\x99\x54\x4d\xa3\x35\x8b\x6f\x1c\x9f\xc6\xf3\xf8\xa1\xf5\xb6\xf3\x26\xfb\x1f\x2d\xb8\xc6\x4d\xba\x80\xab\x81\xe5\x46\x7a\x13\xc5\xdf\x31\x79\xd0\xfa\x79\xfc\xd8\x8f\x1a\xdb\xac\xd8\x62\xc2\x3f\x01\x00\x00\xff\xff\x5b\xef\x1c\x78\x94\x14\x00\x00")

func templatesManyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesManyGotmpl,
		"templates/many.gotmpl",
	)
}

func templatesManyGotmpl() (*asset, error) {
	bytes, err := templatesManyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/many.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0xbe, 0x29, 0x19, 0xc3, 0x4e, 0x35, 0x46, 0x33, 0x66, 0x7c, 0x92, 0xc7, 0x5b, 0xb0, 0x18, 0x13, 0x5, 0x9b, 0xe1, 0xb6, 0x76, 0x2e, 0x1f, 0xdf, 0xd3, 0xc8, 0x86, 0x59, 0xa4, 0x35, 0x95}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\x9b\x48\x16\x7e\x5e\xfd\x8a\xb3\x2a\x57\x06\x79\x14\xb4\xf3\x9a\x2d\x3d\x24\x16\xf1\x7a\xd6\x91\x1c\x4b\xce\xec\x96\x2b\x15\xb7\xa1\x25\xb3\x46\xdd\xa4\x1b\x2c\xab\x08\xff\x7d\xab\x2f\x40\x83\x40\x42\xb2\x9d\xd9\x99\xcd\x1b\xd0\xa7\x0f\xe7\xf2\x9d\x5b\x43\x92\x0c\x8e\xe1\x13\x62\x3e\xba\x0d\x30\x87\xe3\x41\x9a\x76\x92\x04\x8e\xae\x38\x66\xf0\x66\x08\xf6\x4c\x2c\xd8\x63\xb4\xc4\xf0\x0d\xb8\x4f\x16\x71\x80\x18\x7c\x83\x10\x71\x17\x05\xa0\xc9\xe3\x5d\xe4\x2e\x5a\xe2\x12\x35\xdf\x24\x0f\x83\x98\xa1\xc0\x24\xee\x84\xc8\xbd\x47\x0b\x0c\x49\xa2\x37\x7d\x83\x80\xae\x30\x13\x6b\x83\x01\x9c\x3a\x63\xe7\xf2\xed\xcc\x19\xc1\xbb\x7f\xc3\xc5\xe4\x74\x62\xc3\x68\x02\xe3\xc9\x0c\x9c\xd1\xd9\xcc\x96\x34\x0e\x63\x49\x22\xf5\x49\xd3\x31\x8d\xde\xd3\x98\x78\xc0\x70\x14\x33\x82\x3d\xf0\xe7\x10\xdd\x09\xfe\x86\x28\x69\x0a\x3e\x07\x42\x23\x98\x0b\xe2\xce\x03\x62\xf5\x5c\x86\x80\x19\xa3\x8c\xdb\x63\xbc\xb2\xba\x55\x1e\x39\x83\x6e\x4f\x0a\x92\xef\x3f\x23\x61\x1c\xc1\x92\x7a\x38\x80\x39\x65\xd0\x4d\x92\x23\x7b\xea\xde\xe1\x25\xd2\x7b\xbb\xb6\x7c\x66\xb2\xeb\x76\xa2\x75\x88\xab\x4c\x78\xc4\x62\x37\x82\xa4\x03\x90\x24\xaf\x81\x21\xb2\xc0\x70\xe4\xd2\xc0\xb0\xee\x09\x0d\xe2\x25\xe1\xc2\x9e\x82\x4a\x2e\x67\x26\xcf\x2c\x0d\xc7\xd9\xc2\x29\x9d\x89\xf7\x68\xe2\xd7\x80\x89\x27\x6e\xd2\xb2\x0a\x4f\x95\xfe\x10\xc1\x4d\xb9\x15\xfa\xd2\x54\xe8\xe3\xcf\xb5\x4a\x34\x1a\xc7\x81\xd0\x46\xd3\x2a\x55\xc4\x2d\xe0\x80\x0b\x9d\x8e\x6b\x56\x94\x7e\x35\xca\x8e\xf1\xaa\xa5\x72\xf0\xf6\xe2\xac\x33\x8f\x89\x2b\xf6\x58\x3d\x61\xcc\x92\x97\x84\x96\x0a\x71\xf0\xaa\xbc\x94\xc8\x97\x25\xc9\x4e\x03\x08\xf7\x38\x4b\xe4\xab\xe5\x92\x15\xb2\x65\x5c\x5d\xce\xc3\x48\x79\x4e\x6e\x17\xa6\xc7\x11\x97\xa0\x17\x8a\x60\xf5\xb0\xab\xc4\xb7\x74\x9c\x29\x40\x98\x82\xf6\x0c\x0e\x56\xb1\x0f\x2a\x06\xad\xd7\x3d\xe7\x6a\x1b\x3b\x87\xd2\x16\xfa\xae\x30\x50\x4e\xdb\x11\x5a\xe5\x2e\x11\x3a\x7c\x40\x8c\xdf\xa1\xe0\xd7\xe9\x64\x0c\x4b\x75\x5d\x28\xa2\x36\x75\xc1\x27\x11\x05\x41\xb2\x5b\x23\x83\x9f\xd5\x03\xeb\xfa\xf3\xed\x3a\xc2\x7d\x15\xd3\x3d\xd3\x69\xff\xe1\x94\xd8\x9a\xba\x60\xd8\xd3\x38\xb9\x22\x4b\x43\xb0\x98\xe4\xa2\x89\x6d\x10\x51\x40\xa6\x80\xbb\xc5\x2a\xf1\xb3\x3c\x14\x21\x50\xa2\xf5\x94\x68\x1b\x92\xe5\x1b\x24\x71\x1f\xca\x12\xee\x7c\xdf\x34\x62\x3e\x59\x58\x3d\x11\x93\x3e\x59\x98\xec\x4d\xb9\x33\x56\x0b\x1c\x69\x5c\x6e\x63\xba\x44\xe1\xb5\xe2\xf7\xd9\x27\x11\x66\x73\xe4\xe2\x24\x95\xbc\x5d\x8d\xea\x37\x43\x58\xa2\x7b\x6c\xd5\x93\xf6\x3a\x2a\x5b\xb5\x4b\x69\x39\xf6\xeb\x92\x5b\x07\x44\x8e\xa8\x05\xe1\x5f\x87\x40\xfc\x40\x8a\x95\x0b\x76\xdd\x35\x72\x4d\x9a\x76\x3f\xc3\x50\xea\xb7\xb1\xbb\x03\xa0\xdf\x9f\x81\x34\x37\x9c\x66\xa5\x11\xf2\xdb\x1d\x66\xf8\x24\x40\x31\xc7\xa2\xb2\xa0\x2c\xfb\x45\x14\xee\x10\xf1\x02\x0c\x2b\x41\x01\xae\x24\xe1\x2a\x57\x9a\x9b\x8c\x6c\xe9\x52\xe2\xf9\x91\x4f\x89\x76\x57\x07\x20\x44\x0c\x2d\xb9\xd0\xe0\xda\xb4\xa0\xf9\x72\xe0\x21\x76\xfd\xb9\x8f\x55\xc0\xe4\x4c\xb8\xf2\xa9\xa4\xb1\xaa\xac\xfb\x19\x67\xdb\xb6\x4d\xcf\xc0\xb1\x29\x9b\x99\xdc\x8c\xe7\x99\x49\x35\xcb\x37\xc5\x65\x5f\xae\x28\xd6\x6f\x8a\xcb\xbe\x34\xa7\x92\xf9\x8c\x70\xcc\xa2\x72\xe0\xa8\xc8\xce\xc2\xbd\x45\xc5\x91\x9a\x29\x4e\x96\x77\x2b\xfc\x6f\x5f\xa8\x76\x22\x4d\xed\xd1\x3b\x23\x4e\x54\xa6\xda\xc0\xb0\x55\x3c\x29\x65\x85\xc1\x40\x04\x01\xa0\x20\x90\xe2\x10\x4a\x5e\x0b\x10\x65\xb8\x46\xc4\x83\x90\xe1\x10\x31\x2c\xd6\x97\xb2\x4a\x0a\xc2\xaf\x31\x66\xeb\x0e\xc0\x17\xb7\x0f\x5f\xfc\x3e\x7c\x79\x10\x88\x2d\xcb\x35\x0d\x7c\x17\x5b\x75\x31\xa6\x84\xea\xc3\xdf\x64\x64\x0c\x06\xc0\xbf\x06\xe0\x2b\x43\x49\xce\x7d\x08\x99\xbf\x44\x6c\x0d\xf7\x78\x0d\x21\xa3\x0f\xbe\x87\x3d\xb8\x5d\x03\xc7\x5f\x63\x4c\x5c\xdc\x01\xb1\x89\x47\xb2\x55\xbb\x91\x6e\x38\x1b\x4f\x9d\xcb\x19\x9c\x8d\x67\x93\xb6\xc5\xce\xba\x81\x9f\x35\x42\xb8\xfd\x2b\xf5\x89\x25\x14\xea\xf6\xa1\xdb\x83\x9f\xe1\xa6\x27\xf9\x7e\x7a\x7b\x7e\xe5\x4c\xeb\x68\xfd\x0d\xda\x4b\x67\x76\x75\x39\x3e\x1b\x9f\x42\xf1\xb2\xe9\xc7\xf3\x4b\x09\x2a\x19\x66\x37\xaa\x88\x18\x76\x3a\xa7\x0b\x4b\xe9\x22\xec\x68\xdb\xb6\xb4\x8a\xe8\xd4\x8a\xa4\x94\x7b\x4f\x20\x94\xae\x84\xd2\xde\xad\xfd\x51\xd8\xea\x92\xae\xaa\xdb\x65\x92\xc0\x82\x88\xd1\x95\x3d\x75\x11\xb1\x0a\x71\x4e\xa9\x78\x90\xa6\xbd\xbf\x03\x2e\x27\x0d\x0d\x7d\xe2\x07\x7d\xc0\x12\xc2\xe5\x62\x1f\x6b\xfc\x10\x3f\xd0\xa5\xde\x9f\x67\x69\xec\x42\xf9\xeb\x9f\x78\x9d\xd5\xf0\xf0\xde\xc8\x72\x9b\xcb\x45\x9a\x0b\xef\xeb\xaa\xfc\x7b\x9f\x78\x3a\x6a\xae\x74\xd4\xdc\xae\xe5\xad\xa6\xcf\xe3\x42\x50\x8a\xa8\x08\xe9\x82\x66\xc1\x90\x25\x45\xe5\xaf\xad\xf8\x17\xd8\xe3\x38\xc0\xee\x53\xb0\x37\x75\xce\x9d\x93\x59\xd1\x7b\x4f\x3f\x9e\x4f\x25\x4f\xe9\x31\x80\xf7\x97\x93\x0f\x6d\x83\x5d\xd0\xff\xf6\x0f\xe7\xd2\xa9\x68\x0b\x43\x38\xfa\x45\x23\x48\xea\x6a\x02\xc7\x68\x40\x0e\x87\x4f\x89\xc9\x81\x20\x92\x9b\x86\x43\x08\x17\x8f\xb6\xc3\xd8\x98\x5e\xd2\x15\xd7\x6b\x65\x88\xd5\xcd\x21\x92\x2c\x3d\x00\x8d\x46\xe5\x2a\x2a\xad\xef\x3d\x1a\x18\x3c\x23\x1e\x7e\xc4\xdc\xc0\xd7\xbb\x75\x92\x08\x22\xfb\x94\x7e\xc0\xd1\x1d\xf5\xd2\x14\xe6\x0a\x77\x85\xed\x6e\xd7\xa0\xa9\x46\x98\xbb\xcc\x0f\x45\xe2\x4f\xd3\x02\x7b\x35\x5c\x1a\x93\xb4\x22\xbb\x90\x55\x42\xb4\x98\xdf\x0d\x97\x47\xcf\x0a\x4c\xad\xc9\xf4\xe3\xb9\x2c\x93\x2d\x12\x5b\xae\xfb\x27\xc4\xf8\x53\x30\xba\xc1\x08\x84\xdd\x76\xc1\x54\xa3\x99\xb1\x4d\xb0\x32\xd6\x0e\xae\x7b\xe1\x95\xb1\x7d\x10\xab\xe1\x38\x21\x58\xc1\x8f\x12\x5c\x06\x20\x2a\x5a\x8e\x02\x77\x13\x82\xeb\x71\xa6\x3a\x30\xb3\xb3\x79\x69\xa0\x6d\x4f\x7f\xfb\x61\x4c\x21\x4c\x14\x5b\xa9\x87\x5d\x68\xbe\x0d\x5f\x8a\x56\xb5\x5f\x4f\x2a\xa1\x1b\x8c\x5e\x3c\x0f\x3e\x6b\x22\xfc\x4b\x8e\xa6\x0f\x88\xac\x15\x9c\x96\xe2\xca\x68\x3f\x7f\xe2\x0a\x53\x0b\xff\x01\x93\x3a\x64\x89\xad\x7b\x40\xeb\xfa\x73\x03\xb8\xb2\xa3\xae\x34\x15\xe6\x33\xc9\x92\xb4\xf3\x27\x07\x1f\xa3\x2b\xde\xcf\x52\x53\x06\xb4\x5d\x28\xab\xe6\xa7\xf2\x41\x02\xd7\xe6\xd5\xc3\x9a\x87\xe7\x98\xc9\xf7\xd8\x27\x01\xe5\xd8\x92\xef\x15\x1d\xba\x7c\x36\xc6\x8f\x91\xd5\xd3\x8c\x9a\x43\xa1\x04\x6f\xde\x1e\xdf\xbb\x10\x5e\x2b\x7c\x23\xd2\x33\xac\x6f\x51\x39\x23\x31\x40\x35\x04\x14\x86\x98\x78\x96\x49\xfd\xca\x38\x33\x50\x7b\xfc\xb9\xd2\xcd\x61\xcc\xea\xed\x34\x70\x41\x5a\x89\x35\x93\xe8\xbb\xb4\xc0\x57\xa1\x87\x22\xbc\x31\x3a\xb6\x1d\x6e\x6e\xd7\xe0\x47\xbc\xb6\x65\x56\x9c\x1b\xbb\x14\xe3\x44\x2c\xbc\xcf\x0f\xc4\x0e\x9f\x32\xe7\x3e\x0e\x3c\x79\x4a\xd2\x3c\x0d\xea\x7c\xe0\x51\xf2\x53\x04\xb1\xd2\x5c\x4c\x9a\x46\x3a\x90\x98\x0f\x70\x84\x2d\xc5\xb0\x5f\xd1\x2d\xe3\x61\x4c\xac\xc0\xc5\x10\xca\x5b\x4d\xaa\x19\xd3\x5f\xcc\xa9\x34\x1b\x74\x8d\x94\x73\x75\x31\x7a\x3b\x73\xda\x7a\x61\xea\xcc\xe4\xe8\xa8\xe1\xdd\x38\x6c\xca\xf5\x9b\x1e\x0c\x9b\xa9\xfd\x0d\xea\x9d\xb3\xc2\xce\x89\xf4\x26\xd3\x15\x47\x71\x98\x6b\xfb\x80\x82\x18\x4b\x87\xe9\x00\x2b\x9d\xc6\x24\xc6\x9c\x90\x1a\x43\x67\x73\x82\x54\xfc\xb2\xd4\x38\x18\x00\x8b\x49\xe9\x1c\xe1\xa0\x52\x6d\x70\xfd\x63\x15\xe9\x36\xd3\xca\x15\xf1\xbf\xc6\xf9\xb4\xa2\x02\x76\xfb\xbc\xa2\x4d\x66\x04\xf8\xe1\x93\xc9\xef\x13\xeb\xf7\x78\xcd\xcb\x5f\x51\x84\x54\x9a\x49\x9a\xd6\xc6\x7f\x11\xfc\xa5\xef\x1e\xcf\x92\x09\xb4\x59\xc6\xf1\x32\x97\xe1\xe5\x72\xc3\x96\x63\x28\x33\x29\x6c\x39\x81\x82\x8c\xe6\xa6\x61\x4a\x2b\x08\xf6\xca\x0a\xe5\x40\xcd\x32\x43\x39\x25\xa4\xdb\xfd\xa6\xb7\xe5\xf9\x44\xdd\x0b\x0b\x97\x0a\x9f\xaa\xd9\x86\x1b\x9b\x77\xfe\x5f\x64\x9d\x97\x4a\x3a\x79\x46\x91\x43\x82\xe8\x78\xf6\xeb\x2b\x1a\x66\x87\x82\x67\xdb\xe9\xa1\x45\x9e\x79\xca\x74\x71\x60\xfc\x6f\x3b\xb3\x0e\x30\xb1\xcc\xee\xbd\xf7\x47\xca\x08\x35\x83\x8d\xa0\x7b\xe1\xbc\xd0\x14\xc2\x35\x43\xd0\x73\x47\x7b\x26\xde\xf6\x69\x6c\x23\xa4\x7f\xcc\x61\x3f\xe6\xb0\x62\x0e\x1b\xc9\xa6\xa3\x32\x87\xcd\x19\x5d\xee\xf1\x09\x0f\x22\x71\xa7\xd2\xa4\xe2\xb7\xe7\xf4\x65\x7e\x31\x6f\xce\x36\x23\xe7\xdc\x99\x39\xfb\x1c\x7a\x34\x8f\x0f\x3b\x0f\x74\xcd\xef\x0d\x95\x78\xf3\xe7\xf0\xa5\xaf\xe0\xec\xdd\xda\xce\x23\x76\xeb\x36\x1e\x56\x19\xdb\x15\xc5\x6a\x3d\x3c\xb0\xf1\x56\xbe\xaa\x6b\xbc\x55\x2b\xca\xeb\x7e\x89\x68\xdc\xd4\xfa\xbb\xc0\x86\xaf\xd5\xdb\x9e\xd5\xe5\x1b\xed\xe1\xfe\x27\xf8\xdb\xdd\x5c\x22\xff\x5d\x7d\x9d\x3b\x52\xf6\x3b\xda\x96\xf5\xc7\xa2\x22\xa4\x6b\x9b\x9b\x82\x41\xfb\xa3\xd1\x0d\x37\x3e\xe5\xa8\xf3\x60\x47\x3f\xc7\x71\xe6\x16\x4f\x57\xc9\x9b\xbe\x2b\xd7\x7b\xe9\x09\xb9\x5b\x76\xb1\xf2\xa7\x81\xea\x9f\x53\xb5\x47\x5f\x76\xd6\xa4\xfe\xa9\x7f\xa3\xa8\xc9\x10\x2f\xf0\x63\x84\xee\x18\x6f\x5a\xfe\x1b\x91\x91\x4f\xc6\x70\x32\x19\xbf\x3f\x3f\x3b\x99\x81\x55\x39\xbc\xcb\x68\x46\x13\xd0\x3d\x73\xd6\x0c\xef\x6a\x84\xc1\xf9\xd7\xc9\xf9\xd5\xc8\x19\xd9\x4d\xc4\x39\x41\x45\x9e\x9d\xed\x6e\xbb\x7f\x35\x2a\xc5\xef\x7f\xfe\xd7\x8d\x03\x8e\x9f\x44\xcc\x6c\x39\x7e\x32\x7e\xd3\x30\xa3\x6c\x9f\x12\xf8\x23\xf0\xbe\x57\xe0\x15\x85\xbf\x38\xd6\xfa\x11\x7d\x07\x45\xdf\xab\x57\xea\xba\xae\x89\x39\x30\x26\xff\x1b\x00\x00\xff\xff\x7d\x54\xc4\x48\xc7\x30\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x7c, 0xa9, 0x91, 0x9c, 0xf5, 0x53, 0xa5, 0x82, 0xdb, 0xef, 0x4, 0x51, 0x33, 0x95, 0x51, 0x79, 0x4a, 0xeb, 0x1c, 0x59, 0x9d, 0xd6, 0x79, 0xea, 0x84, 0x7f, 0xdf, 0xe1, 0x25, 0xe3, 0x2b}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\xe2\xc1\x28\x5a\x7b\x6d\x48\xe8\x75\x81\x1c\x36\x95\x91\x06\x58\xd8\xde\xc4\x29\x50\x04\x01\x4c\x53\x23\x99\x88\xc4\x51\x48\x4a\x4e\x6a\xf8\xbf\x17\x94\x3f\x36\xd9\x22\xdd\x4b\xa4\x13\x31\x9c\x37\x7c\xf3\xf8\x86\xda\xed\x92\x4f\x1f\xf5\x25\xfb\xbd\x08\xf5\xf0\x97\xb4\x5a\xae\x4b\x72\x38\xc7\x3e\xf2\x0c\x21\x3e\xbc\x64\x47\x7b\xde\x58\x2c\xa4\x7a\x94\x05\xf5\x44\xbc\x3e\x56\xdf\xed\x10\x9f\x4e\x0a\xf1\x5e\xda\x59\x70\xc1\xa8\xa4\x7d\x24\xdb\x53\x3b\x49\x82\xab\xe9\x6c\x7a\xf3\x65\x39\x4d\x71\xf9\x37\x16\xf3\xab\x79\x8c\x74\x8e\xd9\x7c\x89\x69\x7a\xbd\x8c\x7b\x6a\x2d\x95\x5e\xae\xa5\x23\x68\xe3\xc9\xe6\x52\x11\xdc\x86\x9b\x32\xc3\x96\xed\x23\xb6\xda\x6f\x90\x1d\x73\x12\xf7\x54\xc6\xe9\x25\x7e\x7d\x1b\x59\x3e\xf7\x27\x4a\x7a\x09\xed\xe0\x37\x04\xc5\x55\xc5\xe6\x15\xcd\x9c\xed\x99\x07\xb8\x26\x2b\xbd\x66\x13\x92\xa5\x87\x92\x06\x6b\x42\xe3\x28\xeb\x7a\x08\xb5\xfc\x4b\x4d\x0e\xb9\xe5\x0a\x4e\x6d\xa8\x92\x58\x05\xf7\xdc\x76\xeb\x78\x26\xab\xe0\xa0\x55\x2c\x92\x24\x64\x2f\x37\xda\xfd\x5c\x0a\x69\xb2\x1f\xc5\x88\x45\x38\xa8\x63\x7e\xe6\xba\x13\xd1\xf4\x99\xd4\xd0\x79\xab\x4d\x31\x41\x1c\xc7\xe7\xcd\xdd\x7e\x84\x61\x5d\x3c\xc7\x7f\x70\x55\x49\x93\x2d\x65\x31\x01\x59\xcb\x76\x24\xa2\x6f\x0d\xd9\x97\xf7\x61\x9f\x02\xee\x86\xb7\xee\x07\xc4\x0d\x6f\xdf\x05\x9d\x30\xa2\xb7\x69\x69\xd6\xa5\x56\x50\x8d\xf3\x5c\xe9\x7f\xc2\xf3\x85\x92\x8b\x42\x9b\xe2\x95\x24\xbd\x59\xe6\x2b\x17\xa8\x2d\xb7\x3a\xa3\x83\x73\x4a\x2e\x90\x37\x46\x1d\xdc\xb0\x7e\x41\x41\x26\xb8\x85\x32\x3c\x35\x64\x35\xb9\x58\xb4\xd2\x76\xc0\x8b\x2e\xf3\x5d\xed\x76\x3d\x6b\xc6\xf5\xc1\xc3\xc1\xdb\x4d\xed\xc8\x7a\x87\xe1\x72\x9e\xce\x3f\xa3\x92\x8f\x04\x1f\x4c\x29\x0d\xc8\x34\xd5\xa8\x27\x09\x15\x1b\xe7\x31\x14\x40\x92\xe0\xae\x23\x91\xf2\x8c\xfd\x26\xdc\x5f\xca\x30\xc7\xa5\xce\x83\xba\x96\x7e\x73\x90\x50\x6c\xf2\x52\x2b\x2f\xf0\x1f\xc8\x05\x06\x87\x77\xec\xcf\xeb\xd9\xd5\xe0\x6d\xd9\xbb\x3a\x93\x9e\xb0\x20\x9b\xb3\xad\x42\x67\xcd\x21\xb2\xdd\x90\xf9\xff\xf2\x47\xe8\xa1\xfa\xdd\x22\xfd\xb2\x9c\x0e\xc4\xa8\xdf\xeb\xd9\x50\x59\x93\xed\x2c\x12\xee\x09\x9e\xe1\x4a\xad\x08\xdc\x58\xe4\x9a\xca\xcc\x05\x87\x33\x6e\xbf\x7d\x45\x6e\x35\x99\xac\x7c\x81\x36\x75\xe3\xfb\xfa\x81\x27\x09\x6e\x3b\x0a\x8a\x4d\xdb\xf9\x25\x70\x51\x5c\x36\x95\x39\x92\x71\x5c\xd1\xe1\x2a\xc2\x34\xb8\xa7\x12\x99\xd5\x2d\xd9\xee\x91\x6c\x4c\x46\xd6\x79\x69\x32\xd1\xcd\x48\x57\x6c\x78\xc2\x57\xb2\xbe\x3f\xcc\xc2\xc3\xab\x39\x98\x80\xf3\xdc\x91\x0f\xe5\x47\x18\x2a\xdc\x3f\x9c\x06\x46\xbf\x5a\xb7\xb8\x7f\x78\x3b\x3d\x22\x32\xf8\x7c\x71\x42\x8f\xf1\xbb\x88\x82\xd3\x15\x97\x13\xb4\xb2\x0c\x7b\x56\x9a\x82\xce\xfc\x77\x22\x8a\x14\x2e\x20\xeb\x9a\x4c\x36\x54\x13\xac\x06\xab\xb1\xe2\x72\xbc\x1a\xac\x46\x22\x8a\xf4\xf7\x4d\x3d\xc1\xe0\x97\xc1\xd8\x79\x1b\xa4\x88\xaf\x3d\xcb\xa1\x19\x85\xa4\xf6\x7b\x52\xdb\x1d\x14\x82\x66\x3c\x16\xd1\x5e\x44\x96\x7c\x63\x0d\xd4\x04\x7a\x82\x56\xec\xc5\xbf\x01\x00\x00\xff\xff\xa5\xd7\xa5\x26\xc8\x09\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xeb, 0xc6, 0xd9, 0xb1, 0xeb, 0x52, 0x4d, 0x2f, 0x29, 0x7e, 0x2b, 0x49, 0x32, 0x8e, 0x1a, 0x84, 0x29, 0x28, 0x34, 0x5c, 0xd7, 0xd6, 0x27, 0x4b, 0x11, 0x1d, 0x5e, 0xa4, 0xee, 0xc6, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/many.gotmpl": templatesManyGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"many.gotmpl":  &bintree{templatesManyGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
