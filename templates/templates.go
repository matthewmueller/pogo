// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\xd1\x6a\xdb\x40\x10\x7c\xae\xbe\x62\x30\x81\x48\xc1\x3d\xbd\x17\xf2\xd0\xc4\x22\x04\x8a\x65\x6a\x53\x28\xa5\x94\xb3\xbc\xb2\x45\xa5\x95\x7a\x77\x0a\x98\xe3\xfe\xbd\x9c\xa4\x1a\x1b\xa5\xf8\xc5\x31\x44\x4f\x62\x77\x6e\x66\x77\xe6\xae\x91\xd9\x6f\xb9\x25\x58\x7b\x23\x16\xd2\xec\xc4\xa2\x2f\x38\x17\x04\x71\x8c\xa7\x64\x9e\x7c\xfd\xbc\x4a\x66\x78\xf8\x8e\x45\xfa\x94\x0a\xcc\x52\xcc\xd3\x15\x92\xd9\xf3\x4a\x04\x81\xb5\xf1\xdd\xa5\xbe\xd8\xb9\x8e\x0f\x69\xab\x40\xdc\x56\x30\xfb\x86\x70\xa8\x5f\x52\xc7\x2f\xe7\x77\x4e\xb8\xad\xc4\x42\xea\x4c\x96\xce\xa1\xd0\x30\x3b\xc2\xe4\xd0\x99\xcb\x8a\x9c\x9b\x1c\x4d\x93\xab\xba\xea\x01\xcb\x6c\x47\x95\xfc\x07\x11\x41\xd7\x1e\x73\x6a\xa3\x0a\xde\xbe\x63\xa7\xb2\x9a\xb5\x41\x18\x00\xd6\x7e\x84\x92\xbc\x25\xdc\xbc\xc8\x12\x9f\xee\x31\x2c\xfb\x4d\x96\x2d\x69\x38\x17\x00\xc0\x6b\xd6\x5a\xeb\x8f\x8c\x9c\xbe\x1d\xea\x5f\xe4\x9a\x4a\xe7\x6e\xc7\x07\x45\x47\x79\x96\xef\x7e\x0c\x09\x27\xa7\xe4\x93\x68\x58\x81\x78\xe3\x47\x8d\xde\x28\x93\xa5\x34\x85\xce\xf7\xdd\x7e\xfa\x4f\x19\x6f\x54\xf1\x42\xaa\xf7\x48\xa1\x60\x43\x2a\x97\xd9\x1b\xde\xeb\x4e\x09\xba\x1b\xa3\x20\x7d\x76\x90\xbc\x56\xaf\xf9\x1e\xc7\xc8\x5b\xce\x10\x1e\x7a\x8f\xb2\xf2\x46\x8e\xc1\x51\xaf\x19\x46\x08\x8f\x45\xa6\x20\xa5\x6a\x15\xc1\x7a\x32\x40\x91\x69\x15\x0f\x2f\x62\x44\x1b\x4d\xc1\x45\xe9\x91\xee\x0a\xc9\x34\x5b\xff\x64\xb4\x48\x38\xab\x37\xf4\x50\xb0\x54\xfb\x6b\x84\x73\xa2\xb7\x3c\xc9\xe8\xcc\x48\x97\x88\xe9\x98\x3a\xfc\x85\xbb\x5e\x52\x3c\xd6\xcc\xcf\x9c\xd7\x53\xac\xf1\xe3\xe7\x7a\x6f\x28\x42\xd8\xff\xfc\x27\x43\xd9\x34\xc4\x9b\x70\x3d\x1d\xf0\xe3\x34\x85\x10\x47\x89\x7e\xf8\x1b\x00\x00\xff\xff\x7f\x7c\x2a\x1d\x69\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x60, 0x8e, 0x6c, 0x2c, 0xda, 0xc7, 0x72, 0xc1, 0x5, 0x76, 0x93, 0x4c, 0xc1, 0xcf, 0xa6, 0x57, 0x3a, 0xbe, 0x5f, 0x2f, 0xd1, 0x53, 0xa, 0xb7, 0x8c, 0xbb, 0x4e, 0xfc, 0x10, 0xea, 0xa9}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xeb\x73\xdb\x36\x12\xff\x4c\xfe\x15\x7b\x9a\x5c\x4a\xc6\x2a\xd5\xf4\xa3\xef\x7c\x33\x8e\x2d\xf7\xdc\x73\xa4\x9c\x1f\xed\x75\x32\x19\x89\xa6\x20\x99\x35\x05\x28\x00\x29\x5b\xa3\xe1\xff\x7e\xb3\x00\x48\x82\x0f\x59\x92\x5f\x49\x1a\xfb\x93\x84\xc7\x62\xb1\x8f\xdf\x2e\x16\x90\x67\x7e\x70\xed\x4f\x08\x2c\x97\xaf\xbc\x0f\x7e\x7c\xe5\x7d\x50\x0d\x69\x6a\xdb\xe1\x74\xc6\x78\x0c\x8e\x0d\xd0\x0a\x18\x8d\xc9\x6d\xdc\xc2\xcf\x84\x06\x6c\x14\xd2\x49\xe7\x4f\xc1\x68\xcb\xb6\x5a\x84\x73\xc6\x05\x7e\x12\x31\x0f\xe9\x44\x7e\x8c\xc3\x29\x69\xd9\xb6\xd5\x9a\x84\xf1\x55\x72\xe9\x05\x6c\xda\xf9\xd3\x0f\xae\x83\xce\x6c\x72\xdb\xb2\x5d\xdb\xee\x74\xe0\x97\x6e\xaf\x7b\xba\x7f\xde\x3d\x84\x77\x7f\xc0\x87\xfe\x2f\x7d\x0f\x0e\xfb\xd0\xeb\x9f\x43\xf7\xf0\xf8\xdc\x93\x63\xba\x9c\x23\x77\xe7\xfe\x65\x44\xbc\x0f\xbe\x08\xfc\x28\x4d\x7b\x2c\x3e\x62\x09\x1d\x01\x27\x71\xc2\x29\x19\x41\x38\x86\xf8\x4a\x6d\x44\x0d\xed\xf9\x53\x92\xa6\x10\x0a\xa0\x2c\x86\x31\x8e\xb6\xe7\x3e\x5f\x43\x6f\x0f\xd4\x6e\xbc\x1e\xb9\x71\x5a\xc5\xc0\x03\x7f\x4a\xa2\x34\x2d\x68\xb5\xd4\x0e\xea\xa4\x80\x13\x91\x44\x31\x8c\xfc\xd8\x87\x31\xe3\x20\xa9\x9c\x05\x57\x64\xea\x6b\xa6\x5a\x5e\xab\xca\x67\xcb\x8e\x17\x33\xd2\x44\x4e\xc4\x3c\x09\x62\x58\xda\x00\xcb\xe5\x8f\xc0\x7d\x3a\x21\xf0\x2a\x60\x11\xec\xee\x41\xce\x1e\x8b\x92\x29\x15\x90\xa6\x72\x18\x76\x17\x14\x96\x4b\x94\x8e\x6c\xeb\xb1\xb8\x97\x44\x11\xa4\xa9\x1e\x74\x8e\xab\x66\xec\x61\x2b\x90\x48\x10\x48\xd3\x37\xab\x07\xd0\x11\xa4\x29\x0c\x51\xfd\xbb\x2d\x3d\xec\x8c\xfa\xd7\x24\x4d\xdb\x6c\x1a\xc6\x64\x3a\x8b\x17\xad\xa1\x66\x58\x0d\xb7\x53\x29\xae\x1e\xb9\xd9\x50\x1e\x10\xd2\x59\x12\xdb\xe3\x84\x06\x38\xcb\x71\xe1\xcd\x31\xb6\x48\x41\x28\xad\xc3\x6b\xd9\xb2\xcc\x88\xab\xfe\x7b\xc9\x5d\x4d\xbd\x8f\xa8\x95\x5c\xa5\x79\xa0\x54\xde\x64\x2d\x25\xb9\x65\x83\x7f\x2c\x14\x91\x44\x11\x92\x53\x3d\x00\x54\x7f\xcf\xa6\x2b\xe5\x49\x8a\xeb\x48\x6a\x01\x57\xa5\xbd\x5c\xae\xdf\x80\x32\xe0\x92\xb1\x08\x12\x0b\xe9\x49\x99\x66\x33\x39\x49\x4d\x38\x85\xfc\xce\xae\x18\x8f\x91\x3f\x29\x3b\xb7\x4a\xc8\xd1\xdf\x33\xc7\x69\x36\xa7\x92\x56\x6b\xb4\xbd\x0a\x8d\x3d\x78\x5d\x6e\x29\x4c\xa1\x36\x57\x89\xa0\x59\xe0\x68\x88\x2b\xe5\x7d\x13\x46\x11\x4a\x41\x0a\x61\x98\xf5\xa3\x14\x20\x4d\x87\x10\x33\xe8\x5d\x9c\x9c\x20\xdd\x61\x99\x99\xa1\xc4\x9a\x24\x8a\xd6\x8a\x6a\xe5\xe2\x55\xa1\xad\x54\xfd\x1a\xb9\xad\xb6\xa6\x2d\x45\x68\x98\x94\xf1\x11\x05\xf8\xde\xe7\xe2\xca\x8f\x7e\x3d\xeb\xf7\x60\xaa\x3e\x17\x76\x53\x06\x4d\xf4\xe5\x98\x01\x0e\x5d\x2b\x1a\x83\xac\xe3\x82\xf3\xf1\xd3\xe5\x22\x26\x6d\x05\xca\xae\xe9\xfb\x88\x3e\x9e\x1e\x5d\xa7\xe7\x6a\x48\xb8\xa0\x53\x83\xcf\x84\xe6\x9c\xe2\x74\xd4\xa5\xdf\xc4\xef\x5a\x2e\x4b\x64\x1d\x89\x38\x8a\x53\x57\x71\x5a\x63\x34\x9f\x20\x07\xb7\xeb\xb2\x96\x0c\xaf\x5b\xf6\x4c\x86\x57\xc7\x05\x15\x67\xcd\x55\x1a\x80\x6d\x03\x82\x81\x82\x02\xc7\x85\xa9\x3f\xfb\xa8\xa8\x7e\x0a\x69\x4c\xf8\xd8\x0f\xc8\x32\x95\x2b\xe8\x41\x08\x21\x53\xff\x9a\x38\xcd\x43\x5d\x5b\xc1\xe1\x06\xa0\x79\x37\x12\x02\xf6\x6c\x63\xd2\x7f\xdb\x03\x1a\x46\x92\x55\xf5\xa7\x19\xfe\x58\x41\xb0\x4f\xb0\x87\x0e\xb5\x31\x61\x4d\xaf\xe0\x38\x07\xda\x15\x2c\x56\x9c\xb7\xc2\xd7\x76\x5c\xd5\x9c\x54\x31\x92\x87\x5f\xbb\x50\xbd\x26\x5c\x44\xd8\xa3\x30\x8a\x09\x87\x80\x13\x3f\x26\x02\x7c\xa0\xe4\x06\xc6\xb2\x31\x8f\xa7\x6a\x0c\x46\x55\x3d\xda\x0c\xab\xaa\x29\x8f\xab\x7a\x84\xa2\x20\xb6\x8e\xad\x7a\x7a\x1e\x5c\xad\x31\xe3\x53\x3f\x16\xf0\xf1\x93\x32\x23\xdb\x9a\xfb\x51\x42\x04\xc0\x47\xd3\xa2\x70\x75\x4c\xd8\x06\x30\x63\x13\xe6\x1d\x30\x3a\x0a\xe3\x90\x51\xd8\x03\x47\x73\xed\x3a\x34\x8c\x54\x22\x76\x10\xf9\x89\x20\x30\xa6\xda\xe8\xc7\xd9\xce\x5c\xdd\x85\x7b\x55\x84\xd4\xc8\xa5\x6d\x65\xfb\x35\x9a\x97\xb6\x65\x21\xd8\xee\x02\x40\xeb\xf7\x7f\x77\x4f\xbb\xad\xb6\x6d\x59\x47\x92\xe5\x5d\xed\x78\xc2\xfb\x95\x85\xd4\x19\x7b\x7a\x27\x6d\x68\xc1\x7e\xef\x10\x5a\x2e\x8e\xfd\xe0\x73\x7f\x2a\x76\x61\xec\xa9\x6d\xb5\x6d\x2b\x93\xe4\x3e\x1d\x65\x8a\xe8\x74\xa0\xc6\xe8\x3e\x1d\x39\x99\x94\x3d\xcf\xcb\xdb\x0b\x1d\x75\x3a\x00\x80\x42\x09\x24\xb7\x86\x0c\x65\x0f\xaa\x66\xd0\xd6\x4b\xa0\xff\x29\x6f\xcc\x68\xea\xf9\x00\x03\xd8\x33\xf8\xc0\xbf\x4e\x27\x27\xb9\x07\xfe\x6c\x46\xe8\xc8\xd1\x0d\x6d\xbd\x6b\xcd\x5a\xa1\x08\xc7\x75\x5d\x35\x3f\xd5\xcb\x7b\x35\x1a\x79\x53\xbb\x2c\xbb\xbc\x35\x93\x9c\xa6\xa4\x55\x32\xc6\x6f\x4a\x66\x7d\x7e\x97\xc8\xfa\xfc\x3b\x94\x58\xff\x74\xa5\xc0\x0a\x04\x2e\xb6\x94\x79\xe5\x91\xde\x94\x0c\xe6\xc5\x30\x12\x8d\xe4\x28\xcd\xec\x11\x36\x88\x52\x9e\x29\xd3\x44\x3d\xd4\x00\xde\xa2\xed\x90\x88\x80\x87\x33\xe9\x9d\x69\x5a\xf7\xc0\x86\xd9\xce\xdc\x68\x6d\x48\x6f\x0c\x58\xca\xa2\x85\x1a\x7b\x36\xe3\xc4\xd7\x40\x8c\x7a\xe5\x26\x90\xa0\x3a\xd5\xc6\xe6\xe8\xe0\x16\x37\x04\xcb\x51\x76\x7f\x17\x2d\x17\xfd\x11\x45\x9f\xe1\x90\x21\xfa\xdc\xa1\xc7\xd3\x18\x57\x0a\x69\x3c\x76\x86\x05\xa3\x0a\x07\x30\x11\xac\x68\x07\x89\x1b\xe3\x72\x26\x87\xa8\xf1\xdc\xcc\xc2\xc2\xc2\xe6\x3a\x30\x64\x28\x61\x72\xa1\x71\x03\x42\x9c\x9a\x67\xf6\xea\x5c\xb6\x96\xf3\x46\x6e\x5d\xdb\xba\x6b\xa1\xb9\x5b\x3e\x3e\x58\xb9\x55\xdd\x95\x02\xf6\xf9\x88\xf0\x77\x0b\x10\x33\x12\x84\xe3\x30\x08\x89\xca\x00\xfb\xa7\x87\xdd\xd3\x77\x0b\x3c\xd3\xff\x93\xe1\x98\x7f\xa9\x40\x90\x8f\x57\xca\xb2\x03\x46\x45\x0c\x8e\x6d\x21\x32\x8a\x00\x04\xe3\xb1\x80\xcb\x05\xf8\x22\x20\x74\x84\x19\x8e\x9c\x6e\x5b\xfb\x67\x07\xf9\xec\x3d\x68\xed\x9f\x1d\xb4\x6c\x39\x0d\x0d\xaf\x98\x37\x22\xd5\x89\x87\xdd\xf2\x4c\xfc\x9e\x15\x1f\x7a\xe4\x46\xf6\xe4\x31\x23\x6b\xc0\x48\xa1\x7a\x8c\x18\x21\x1b\xd6\x04\x25\x39\xc6\x88\x49\x8a\x88\x64\x45\x49\x66\x12\xce\x09\x05\xa9\x1c\x61\xc8\xe4\xae\xd8\x98\x36\x46\x37\xa6\x39\x7c\x40\x70\x93\x5a\x82\x77\x7f\xac\x8e\x6f\xcc\x88\x6f\x6d\x15\xdc\x2a\x27\xcb\x02\x3c\x34\xc4\xf4\xd5\x5e\x57\x63\x86\xd2\x95\x61\xa3\xf9\xc1\x0a\xf5\x4e\x81\xdc\xce\x38\x11\x22\x64\xf5\x9d\x36\x81\x88\x94\x6d\xa6\x60\x53\x6d\xac\xee\x23\x6c\x2b\xef\x96\x94\x5d\x37\x97\x23\xb3\x6b\xf6\x7f\x4c\x05\xe1\x71\xf9\x08\x51\x54\x2f\x62\x56\x1c\x87\xd6\x67\x4a\x72\xb3\x8a\xa0\x33\xba\x54\xc6\x75\xf8\xce\x3c\x28\xe4\x67\x42\x9d\xbb\x3b\x6f\xea\xc5\xa2\xd2\x41\xa9\xd3\x81\x09\x89\xc1\x8f\x22\xc9\x08\x65\xf4\x47\xcc\x47\xb3\x74\xde\xa7\x23\x98\x71\x32\xf3\x39\xc1\xfe\xa9\xc4\x28\x1c\xf8\x39\x21\x7c\x61\x03\x0c\x82\x36\x0c\xc2\x36\x0c\xe6\xa8\x61\x11\x85\x01\x71\x6a\xec\x78\xf9\x11\xa2\x0d\x3f\xc9\x33\x40\xa7\x03\xe2\x73\x04\xa1\x12\x8e\x24\xd6\x86\x19\x0f\xa7\x3e\x5f\xc0\x35\x59\xc0\x8c\xb3\x79\x38\x22\x23\xd4\xb8\x20\x9f\x13\x42\x03\x62\x03\x4e\x12\xb1\x8c\x57\x43\x09\x8c\xc7\xbd\xb3\xee\xe9\x39\x1c\xf7\xce\xfb\x9b\x96\x8c\x9c\x21\xec\x94\x4d\x18\xf7\x20\x6d\x17\x76\x60\xe8\x4a\xba\xbf\xed\x9f\x5c\x74\xcf\x9a\xc6\x86\xb5\xb1\xa7\xdd\xf3\x8b\xd3\xde\x71\xef\x17\x43\x0f\xa7\xd2\x1e\x42\x3a\x91\x58\x3c\xd4\x5b\x8e\xd8\x44\xed\x15\x23\xd5\x0d\xf9\x61\x4e\x8a\x7d\xfa\xd8\x3b\x21\xdc\x96\xe7\x06\xa9\xda\x13\x36\x29\x9f\x0f\xb2\x56\x47\x89\x01\xa5\xee\x79\x9e\xc2\x7f\x1d\xe8\x06\x75\x5b\xa8\x5b\x00\x66\xf1\xec\x06\xa5\x38\xba\xf4\xfe\x8b\x0c\x9d\xb2\x9b\x3a\xd1\x70\x0c\x44\xc6\x22\x76\xe3\x9d\x05\x3e\x35\xcf\x88\x81\x4f\xd3\xd4\xfd\x07\x90\x32\x87\xda\x0f\x68\x18\xb5\x81\x64\x7c\x65\x20\x53\xe7\xad\x8d\x23\x15\x5a\x74\xde\xc0\x51\x48\x51\x0e\xc8\x1a\xfa\xb9\xac\xaf\xb0\x31\x04\x19\x7c\x0a\x78\xd3\x51\xa0\xa1\x47\x0e\xeb\x5b\x93\x10\x21\xd8\x94\x18\xd3\x3c\xe5\x38\x38\xa9\xe4\x36\x38\x42\x66\x84\x65\x94\xde\xc0\x6b\x06\x02\xc5\x24\x9b\x50\x40\xe5\xf9\xc2\x91\x84\xa5\x10\x2d\x94\x21\xe7\x85\x90\x2c\xab\x24\x22\xce\x11\x2e\x0b\x87\x10\x24\x22\xc1\x3d\x1d\xe2\xac\x7b\xd2\x3d\x38\x87\xe5\x32\xd3\x91\xa4\x95\xa6\x30\x84\x1d\xa9\x9c\xe1\xd1\x69\xff\xfd\xa6\x6e\x92\x4d\x1a\x88\xef\xc6\x78\xe5\x94\xbd\x3d\x98\x4d\x6e\xbd\x2e\xe7\x3d\x76\xca\x6e\x44\x7e\x34\x37\xf5\x76\xe7\xf5\x80\x5d\x14\x04\x1e\xec\x0e\xef\x16\xf0\x41\x1b\xc1\x7f\xc8\x42\xd9\xbf\xaa\xd4\x67\x8b\xab\x5e\xec\x54\x5d\xaf\x66\xd7\xb8\xed\xc6\x6e\xed\x39\xef\x16\xcb\xe5\xab\xd9\x75\x51\xce\xbd\x8f\x27\x55\x89\x54\x03\xd2\xec\xda\xd4\xe1\xec\xba\x5e\xd4\xdd\x24\x36\x3d\xd4\x27\xa4\x16\x56\x39\x86\xec\xdc\xc2\x27\xe4\x78\x79\xdc\x97\x13\x66\xd7\xb9\xb3\xec\xc1\xab\xb7\x4f\x89\xf3\xaf\x4b\x02\x7d\x6c\x9f\xa9\x53\xff\x96\x9d\xc7\xa8\x7e\x99\x6e\x74\x41\xc3\xcf\x09\xd1\x89\x4d\xee\x48\x3a\x45\x0d\x47\xb7\x86\xd3\x1c\xd3\x11\xb9\x25\x22\x3b\xcc\x84\x63\x70\x30\x0f\xc2\x51\xde\xb1\xd0\x84\x1c\xca\xe2\xac\x49\x7b\x99\xeb\x56\x9d\x0c\xbb\xdf\x93\xf8\x8a\x8d\xd2\x14\xc6\x2a\x68\xd5\xf5\x75\xb9\x00\x3d\xd6\x38\x22\x67\x27\xe4\x46\x5a\x55\x67\xc3\x3e\x55\x51\xfa\xc2\x1e\xf6\xea\xf1\x5c\x4c\x6f\xeb\xf7\x2b\xc2\xc9\xd3\x66\x51\x7a\xa5\xdf\x7c\x1e\x22\x2f\xe2\xf1\x3d\xac\x79\x05\x9d\x3d\xac\x76\x32\xed\x89\x66\xfe\x90\xb9\x1a\xe7\x9b\x39\xdb\xfd\xbc\x8d\xf3\x6d\xfc\xcd\x38\xfa\xd7\x5d\xef\xbd\x4f\x17\x2a\x9d\xcb\xc3\x48\x29\x8d\x93\xfd\xe8\x1a\x02\xa6\xf8\x71\xc3\xf4\xa4\x4c\xb1\x70\x15\x24\xb7\x61\x92\xf7\xf1\xd3\x3a\xf7\x40\xed\x1b\x43\xa2\x84\xfb\x51\x66\x02\x8d\xb3\xed\xc7\xc9\x0d\x57\xac\xf9\x92\x2f\x1a\xf9\x22\x67\x37\x22\x17\x72\xe6\x73\xcd\x69\x60\xd5\x7f\x36\x91\xb2\x72\x8b\x11\x19\x13\x2e\x97\xf2\x0e\x22\x26\x88\x23\x0f\xaf\xb2\x7e\x88\x6d\x3d\x72\x1b\x3b\xae\xa6\xba\x0d\x54\x94\x22\xac\xd8\x34\xc4\xae\x0b\xb2\xeb\x77\xb6\x1e\x0c\x32\x38\xd8\x54\x4a\xc5\xd5\x57\xb3\x9b\xe4\x85\x95\x95\x74\x1a\xa0\x25\xab\x68\x86\x63\x25\x9f\x2e\xe7\x8e\xbb\x9d\x0e\x8b\x79\x15\x24\x5b\x39\xc3\x4c\xbd\x2f\x66\x23\x3f\x26\x30\xf5\xe3\xe0\x2a\xa4\x13\x49\xad\x02\x39\x6d\x4d\x10\xbb\xdf\x66\xcf\x79\x32\x60\xd3\xf3\x1b\xdc\x44\x52\x0a\xe9\xfd\x60\xae\x69\x4d\x05\x7d\x6a\xc1\x8d\x8a\x42\x5f\xd1\xb9\x17\x00\xbd\x49\x5d\x25\xec\xee\xd5\x39\x2e\xea\x46\x1a\x53\x8c\x52\x94\xaa\x35\x89\x52\x09\xea\xe7\xa2\x06\xa5\xa8\xb6\x21\x22\xd4\x19\xcc\x65\x79\x7d\x30\x2f\xac\x11\x37\x31\x98\xff\x2c\x79\xd5\x68\x4a\xe2\x64\x26\x09\x27\x4a\x79\xba\x00\x6b\x49\xbf\x4e\x2a\xd7\x07\x61\x1b\x82\xa2\x4c\x3f\x08\xe4\x0e\x07\x89\xb1\x40\xd2\x86\x60\x07\x4f\x06\xad\x9d\x41\xf8\x31\xfc\xe4\x16\xc0\xad\x25\xe1\x53\xfd\x0e\x20\x1c\x03\x65\xd9\xb2\xf2\x45\x13\x84\x22\x07\x4b\xe5\x07\x72\x1f\x89\x8b\xce\xff\x53\x53\xad\xa5\xf2\x1e\xad\xfc\x4c\xcf\x53\xe6\xb1\x8b\xcb\x28\xfa\x19\xf1\x96\x76\x0f\x4b\xc7\x13\x55\xd6\xb3\x8c\x28\x71\xf1\xe1\x70\xff\xbc\xbb\xa9\xbd\x9e\x75\xcf\x65\x24\xb0\xac\x72\xd5\x2c\x31\xaa\x66\x7a\xc0\x40\x18\x5f\x86\x6b\x8a\x68\xcf\x54\x41\x43\xe5\x24\xb4\x54\xe0\xfc\xa6\xea\x12\xcf\x53\x98\x78\x1c\x74\x94\x89\x9f\x32\x7a\xf1\x38\x48\x59\xd4\x29\xcc\xe5\xfd\x28\xd2\x0c\x08\x13\x2b\x6b\x89\xe2\x7d\xf0\xf2\xeb\x4d\x21\x5f\x60\xf6\x8b\xc1\x2c\x5a\xd6\x0b\xd4\xbe\xe4\xef\x2f\xf9\xfb\x17\xce\xdf\x1f\xbd\x78\x9e\x91\xad\x95\xcf\x9b\x9f\xb3\x6e\x11\xba\xc2\x58\x54\x6a\xca\x66\xac\x7a\x68\xad\xfd\x41\x37\xc4\xdb\x04\x8e\x11\xa3\x3f\xc4\x19\xc4\x22\xc8\x1b\x15\x09\xe9\x8e\x11\x89\x8b\xa0\x51\xde\xf0\x86\xc1\xa7\x1e\x7b\xde\x7e\x47\xb1\xa5\x6a\x09\xcf\x10\x67\x74\xd4\xd0\xe1\x06\xd6\x06\x9b\xe1\xca\x1b\x92\x2d\x03\x90\x52\x67\x91\x87\xcb\x77\x49\xbb\xb9\x7a\x4a\xcf\x40\x97\xe5\x3b\x8c\x34\x8f\x20\x4f\x14\xcb\x14\x37\xcf\x73\x74\x28\xad\xf5\x4d\x1f\x1f\xaa\xf5\xe1\x1c\xa6\x13\x75\xa7\x12\xea\x8b\x97\x3b\x6f\x67\xd4\xfd\x8b\xa8\x43\xf2\xdd\x97\x2d\xb9\xac\xab\xb8\xba\xf5\xbd\xca\x43\xdf\xdb\xf8\xa3\x51\x66\xcd\xb1\x76\xde\x36\xb0\x39\xe1\x3c\x94\xaf\xd2\xc8\x6d\x28\x62\xfc\x70\x4d\x16\x42\xda\x24\x27\x82\xd0\x18\x23\x0a\x9a\x97\xfa\xcd\x13\x34\x70\xd1\x00\xd1\xf5\xc7\xf6\xb8\xa7\xe2\xa5\xbd\x77\xf7\x2f\x72\xdc\xd2\x5b\x72\xfd\x58\x08\x99\xc8\xde\x93\x3f\x30\x3e\xe0\x16\xcb\x3f\xa4\x32\xd8\x4b\xd3\xc6\x98\x51\x04\x8c\xd2\x73\xc4\x7b\x46\x8f\xe5\x32\x22\xb4\xb2\xec\xf7\x16\x50\x4c\x17\xb8\x23\xa2\xe4\xb7\x0e\x19\xc0\x3d\xf8\xec\x82\x2c\xaf\x09\x28\xf2\x22\xa2\xe9\x46\xb0\xe8\xdd\x2a\x9e\x94\x01\x3a\x8b\x29\xe5\x60\x92\x36\xff\xb6\xaf\x6a\x9a\xd5\xa7\xb2\xd9\x43\xd9\x8a\x0b\x55\x7f\x81\xb7\x6a\xda\x4b\xc4\xfa\x26\xde\x12\x6c\xf6\x42\xed\x50\xc2\x56\xe3\xbb\x1a\xd1\xf4\xb0\x06\x94\xc1\xaa\x17\xc0\xe3\x90\x8b\x58\x17\xad\xf4\x93\x1b\x45\xef\x6b\x7f\xbe\xa6\xc0\xba\x09\x1f\x0e\xbb\x27\xdd\xf3\xee\x36\x4f\x01\x64\xb6\xa9\xaf\x14\xcb\x68\xf0\x75\x14\x30\xbe\xa9\xc2\xf0\xb3\x3d\x58\xdb\xc6\x3b\x64\x05\x78\x53\x0f\x59\x51\xd2\x2d\xb9\xc7\x77\x76\xf9\xff\x3d\x79\xdb\x4b\xb9\xf0\xa5\x5c\xf8\x34\xe5\xc2\x07\xd4\x03\x15\xea\x6c\x58\x0f\x1c\x73\x36\xdd\xe2\xc7\x1e\x10\xe3\x37\x13\xdd\x9e\xef\xc5\xed\xd3\x00\xcb\x9a\xc2\xd0\x17\x05\x9b\xe6\xf7\xb5\x4f\x97\x21\xff\x75\x5f\xdc\x6e\x52\xb4\x31\xec\xb9\x54\xb4\x51\x76\x27\xee\xfa\x7f\x0b\x2b\xa6\x3e\xf2\x83\xd8\x27\x75\x80\x7b\x1f\x63\xe5\x3d\xee\x33\x3f\x80\x7d\x52\x17\x68\x58\xf4\x2f\xe2\x07\x0f\xbd\x67\x12\x84\xc7\xb5\xb8\xa2\x7e\x2d\x27\xca\x3f\xd7\x50\x56\x36\x6c\xab\x5a\x11\x66\xc7\xa8\x2b\x94\xbb\xfe\xe7\x33\x06\x85\x21\xf8\x11\x27\xfe\x68\xa1\x6a\x8c\x59\xf2\xdc\xbc\xdc\x33\x5e\x32\x59\x8f\x56\x15\xb5\x36\x2a\x8a\x7a\x95\x9d\x56\xd0\xd8\xb6\x36\xac\x69\x5a\xcd\x05\x47\xeb\xae\x7a\xe3\x4f\x7a\xde\x76\xb5\xc5\xc1\xe6\xb5\xc5\xee\xff\x0e\x4e\x2e\x0e\xbb\x87\x5e\x6b\x27\xf8\xc2\x05\xc6\x26\xb3\xba\x67\x7d\xf1\x09\x7e\xe8\xa9\x91\x77\xb8\xe1\x6f\x3d\xb3\xe1\xfd\x1e\x1c\xf4\x7b\x47\x27\xc7\x07\xe7\xe0\x98\xb9\x4c\x3e\xe2\xb0\x0f\xba\x1c\xba\xe1\xa5\xd9\x57\x73\xca\xd2\x68\xff\x55\xbc\x7d\x7b\xfd\x5a\x7d\x6e\x82\xf5\xe7\x4a\x54\x0c\x13\x2e\x25\x2a\xf7\x43\xe2\xa2\x7e\x7c\x12\x8a\x78\x13\x38\xbe\x23\xc5\x81\x97\xcb\xa9\xc6\xcb\xa9\x2f\xf4\x4b\xf6\x6f\x0a\xb2\xaa\x86\xb8\x02\xb9\xd6\x72\xb3\x07\x4e\x11\x6e\x56\x0d\x2e\xe2\x51\x99\xa9\x17\xc4\x7b\x5e\xc4\x43\x43\x45\xa3\x86\x80\xd1\xb9\x44\x2f\x96\xf0\xdc\x3d\xe4\xbf\xa2\x10\x6c\x4a\xe2\xab\x0c\xb9\xe4\x41\x88\x87\x73\xc2\x21\xf0\x29\x24\x74\x44\xb8\x88\x7d\x3a\x52\x30\xa5\x3c\x24\x9b\xdf\xfc\xff\xde\xda\xc0\xc6\x63\x41\x10\x1d\x10\x7f\x82\x3c\xab\x69\x43\x68\x7c\x9e\x97\xef\xdf\x64\x4a\x48\x51\x6c\x7a\xf6\x0e\xbc\x55\x69\x50\xc0\x22\x79\xbb\x54\xa4\x42\xd9\xfa\x98\x0f\x05\xc6\xff\x58\x6a\xc3\xb0\x35\xdc\x09\x58\xb4\x33\x6c\x0d\x5d\xdb\xb2\xc2\xa2\x13\x7d\xe4\x55\x6b\x47\xc4\x1c\x45\xe1\x1d\xc7\xcc\x77\xa8\x8b\x83\x8c\xa7\xab\x73\xb9\x10\x36\xd2\x9d\x1d\x4c\xa3\xb2\xfa\x6c\xd0\x86\xb0\x0d\x73\x3b\xb5\xff\x1f\x00\x00\xff\xff\x53\x5b\x42\x04\x18\x57\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x3c, 0x93, 0x25, 0xa6, 0x1f, 0x95, 0xa4, 0xa1, 0xf2, 0xbe, 0xcf, 0x95, 0x83, 0x73, 0x96, 0x34, 0xac, 0x9d, 0x41, 0xc6, 0x26, 0xe6, 0x30, 0x52, 0x6e, 0x32, 0xae, 0xfe, 0x31, 0xcf, 0xeb}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xd1\x6f\xdb\xb6\x13\x7e\x16\xff\x8a\x83\xd0\x07\xb9\x31\xe8\xdf\x73\x81\xfc\x80\x26\xd6\xb2\x0c\x9d\xed\xb9\x1e\x86\x62\x18\x56\x9a\xa2\x24\x2e\x12\xa9\x92\x54\x1c\xc3\xd0\xff\x3e\x1c\x29\xc9\xae\xda\x04\xeb\x63\xde\xc4\xe3\xdd\x77\xf7\x7d\x3c\x1e\xd5\x30\xfe\xc0\x0a\x01\xa7\xd3\x1b\xba\x61\xae\xa4\x9b\x60\xe8\x3a\x42\x64\xdd\x68\xe3\x20\x21\x51\x5c\x48\x57\xb6\x7b\xca\x75\xbd\xf8\x87\xf1\x07\xbe\x68\x8a\xa7\x98\xcc\x08\x59\x2c\xe0\x2e\x5d\xa5\xdb\xf7\xbb\x74\x09\x37\x9f\x60\xb3\xbe\x5b\x53\x58\xae\x61\xb5\xde\x41\xba\xbc\xdf\x51\xef\xb3\xbc\x01\x69\xc1\x95\x02\xb8\xae\x6b\xad\x40\x2a\x27\x4c\xce\xb8\x80\x5c\x1b\xc8\x98\x63\x7b\x66\x05\xe8\x46\x18\xe6\xa4\x56\xe8\xcc\x1c\x70\xa6\x60\x2f\xa0\xb5\x22\x83\x83\x74\x25\x62\xb9\x63\x23\x2c\xe4\x46\xd7\x60\x79\x29\x6a\x06\x9f\x4f\x27\xa0\x1f\xfd\x37\x5d\xb1\x5a\x40\xd7\x7d\xa6\xb0\xd2\x4e\x04\x14\x57\x4a\x8b\xf9\x31\x9a\x55\x56\x03\xd7\x8d\x14\x19\x16\xa1\x41\x30\x5e\x82\xce\x7d\x71\x8e\xed\x2b\x01\xbd\x26\x96\x92\xc5\x02\x43\x76\x18\x6e\x4b\xdd\x56\x19\x1c\xb4\x79\xf0\x95\x8c\x35\x2f\xec\x97\x8a\x2e\x6f\x80\xa9\xec\x6b\xdb\xee\x89\x12\xac\xd5\x93\x1f\xe9\x9e\x48\x94\x3e\x09\x9e\x58\x67\xa4\x2a\xe6\x40\x29\x1d\x37\x4f\xdd\x0c\x92\xa6\x78\xa2\xb7\xba\xae\x99\xca\x76\xac\x98\x83\x30\x46\x9b\x19\x89\x7e\x6b\x85\x39\x3e\x1f\xf6\x16\xe3\xb6\xfa\x60\x27\x11\x5b\x7d\x78\x36\x68\x88\x21\x9d\x3f\xa4\x0f\xba\x80\xbc\x55\x1c\xf5\xa7\xb0\x7e\x14\xc6\xc8\x4c\x04\xf5\x3c\x65\x94\xa8\xd2\x45\x21\x0c\x0a\x76\xd4\xad\x01\x5e\x6a\xc9\x05\x79\x64\xc6\x87\x5f\x7b\x80\x67\x13\x9e\x42\xa2\x5b\xad\x32\xd9\x9f\x72\x6b\x94\x05\x06\x95\xb4\x0e\x41\xf9\x79\x0b\x4f\x07\xbd\xed\x97\x0a\x78\xc5\x5a\x2b\xac\x17\xb9\x61\x86\xd5\x96\x60\xa2\x0b\xa4\x04\x23\x2d\x66\x1c\x6d\x33\x48\x30\x76\x28\x26\xc4\xc1\x9f\x7f\x5d\x94\xe4\xc5\xea\x05\xc3\xa3\x41\x1e\x87\x52\x18\x81\x7e\x21\x30\x18\x0b\xa3\xdb\x66\x7f\x9c\x9a\xb5\xc9\x84\xf9\xd6\x5c\xc9\x5a\xba\xa9\x11\x15\x94\xca\x11\x12\x61\xcb\xff\x3d\xf7\x5c\xe1\xdd\x35\x18\xa6\x0a\x01\xa1\xfe\x13\x89\xa2\x40\x16\x77\xd0\x46\x6f\xfd\x32\x99\x91\x28\xb2\x07\xe9\x78\xd9\xab\x41\x77\xd8\x5c\x3e\x00\xaf\x4e\xfc\xc7\xcf\xe9\x36\x8d\xdf\x91\x28\xf2\xe9\x8c\xc8\x27\x64\x71\xa7\x4f\xed\xb5\xb8\xc8\x1d\x00\x37\x41\x21\x84\x8c\x22\xe9\xca\xab\x2b\xff\xe5\x91\xae\x81\x35\x8d\x50\x59\x82\xab\x39\xc4\x6f\xe2\x2b\xeb\x0c\xd7\xea\x91\xde\x3b\xcd\x12\xe9\xca\xd9\xcc\xbb\xf7\x3a\x8f\x01\x61\xdd\xe7\xf4\x2e\xbe\x92\x5e\xe6\xd1\x2d\xac\xe7\x90\xd7\x8e\x7e\x6c\x8c\x54\x2e\x4f\xfa\xba\x7e\xd2\xa6\x66\x6e\xee\x29\x51\x4a\x7d\x9e\xc0\xf9\x6e\xbb\xfe\x7d\x03\x37\x9f\x5e\x0f\xed\xb1\x91\x46\xc7\xc1\xf2\x83\xd4\xd7\xdb\x65\xba\x7d\x55\xd4\xc7\xcb\x32\x3a\x0e\x96\x1f\xa4\xfe\xe1\xfe\xd7\xfb\xdd\xeb\xe1\xdd\x4f\x83\xd1\x2d\xac\xff\x33\xe7\x4c\xe4\xac\xad\x9c\xa7\x6b\x04\x0e\x4c\x1c\x89\xc3\x3c\x0b\x30\x29\x4e\xb0\x3c\x89\x5b\xf5\xa0\xf4\x41\x9d\xc7\xa8\x7f\x2d\x63\x84\xe9\x48\xd4\x11\x12\x2d\x16\xd0\xb4\x0e\xc4\xa3\x30\x47\x57\x4a\x55\x80\xd3\x85\x70\xa5\x30\xfd\x44\x6b\xdd\xc5\xdc\x92\x39\x54\x42\xf5\x77\x73\x06\xff\x87\xff\x79\xcd\xd0\xe9\x7c\x88\xad\x9b\xf7\xd3\x07\xbc\x54\x52\x15\x96\xfe\xa2\xa5\x1a\xef\x74\x0c\xef\x57\x4b\x88\x91\x4e\x37\x82\x0e\x7d\xff\x22\xec\x70\xc1\xa7\xc8\xe7\x4b\x13\xcf\xa7\xc0\x43\x57\xbd\x08\x3c\x5c\x9f\x29\xf0\xb9\x25\xbf\x05\x0e\x07\xf7\x22\xac\x6f\xcd\x29\xe6\x70\xe0\x67\x44\x32\x9e\xe4\x57\xb9\x3d\x04\xc4\xb3\xf3\xe1\x2a\x59\x91\xc9\xa3\x79\xfe\x99\x08\xbf\x17\xdf\xd9\xc0\xea\x86\x67\x03\xde\x86\xaf\x01\x26\x3c\x2e\xd6\x99\x96\xbb\x1e\xe0\xd2\x84\xa1\xfe\x61\x01\x18\x9a\x20\x34\xe5\xb8\xdc\x7c\xe7\x1d\x25\xdd\xbf\x01\x00\x00\xff\xff\xdf\x8d\x80\xfb\x49\x0a\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x39, 0xc9, 0xfb, 0x16, 0x3b, 0x90, 0x8e, 0xb, 0x71, 0x7f, 0x2e, 0x40, 0x97, 0x5f, 0xc0, 0xd7, 0x80, 0x64, 0x72, 0xdb, 0x2b, 0x2d, 0xef, 0xf3, 0xce, 0x72, 0x93, 0xff, 0xaf, 0x1a, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
