// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/pg_enum.gotmpl
// templates/pg_model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesPg_enumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesPg_enumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_enumGotmpl,
		"templates/pg_enum.gotmpl",
	)
}

func templatesPg_enumGotmpl() (*asset, error) {
	bytes, err := templatesPg_enumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesPg_modelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x73\xdb\xb8\x92\x7e\x26\x7f\x45\x1f\x56\x4e\x86\x8a\x35\xd4\x64\x1f\xbd\xeb\xad\x8a\x6d\x79\xd6\xe7\x38\xb2\xd7\x76\xce\xec\x54\x2a\x25\xd1\x24\x64\xe3\x98\x02\x35\x00\x25\x47\xa5\xe2\x7f\xdf\xc2\x8d\x04\x6f\xba\xf8\xee\x84\xf3\x32\x0e\x08\x34\x80\x46\xf7\xf7\x35\xc0\x26\x34\xf5\x83\x5b\xff\x1a\xc1\x72\xf9\xce\x3b\xf3\x93\x1b\xef\x4c\x16\xa4\xa9\x6d\xe3\xc9\x34\xa6\x09\xb8\x36\x80\x13\xc4\x24\x41\xdf\x13\x87\xff\x8d\x48\x10\x87\x98\x5c\xf7\xfe\xcd\x62\xe2\xd8\x96\x83\x28\x8d\x29\xe3\x7f\xb1\x84\x62\x72\x2d\xfe\x4c\xf0\x04\x39\xb6\x6d\x39\xd7\x38\xb9\x99\x5d\x79\x41\x3c\xe9\xfd\xdb\x0f\x6e\x83\xde\xf4\xfa\xbb\x63\x77\x6c\xbb\xd7\x83\xdf\xfb\x83\xfe\xf9\xa7\xcb\xfe\x21\xec\xff\x09\x67\xa7\xbf\x9f\x7a\x70\x78\x0a\x83\xd3\x4b\xe8\x1f\x1e\x5f\x7a\xa2\x4e\x9f\x52\x3e\xba\x4b\xff\x2a\x42\xde\x99\xcf\x02\x3f\x4a\xd3\x41\x9c\x1c\xc5\x33\x12\x02\x45\xc9\x8c\x12\x14\x02\x1e\x43\x72\x23\x27\x22\xab\x0e\xfc\x09\x4a\x53\xc0\x0c\x48\x9c\xc0\x98\xd7\xb6\xe7\x3e\x5d\x23\x6f\x0f\xe4\x6c\xbc\x01\xba\x73\x9d\xbc\xe2\x81\x3f\x41\x51\x9a\xe6\xb2\x1c\x39\x83\xaa\x28\xa0\x88\xcd\xa2\x04\x42\x3f\xf1\x61\x1c\x53\x10\x52\x2e\x82\x1b\x34\xf1\xd5\xa0\x1c\xcf\x29\x8f\xd3\xb1\x93\xc5\x14\xd5\x89\x63\x09\x9d\x05\x09\x2c\x6d\x80\xe5\xf2\x57\xa0\x3e\xb9\x46\xf0\x2e\x88\x23\xd8\xdd\x83\x6c\x78\x71\x34\x9b\x10\x06\x69\x2a\xaa\xf1\xc7\xb9\x84\xe5\x92\x6b\x47\x94\x0d\xe2\x64\x30\x8b\x22\x48\x53\x55\xe9\x92\xf7\xaa\x87\xc7\x4b\x01\x45\x0c\x41\x9a\x7e\x68\xae\x40\x42\x48\x53\x18\xf1\xe5\xdf\x75\x54\xb5\x0b\xe2\xdf\xa2\x34\xed\xc6\x13\x9c\xa0\xc9\x34\x59\x38\x23\x35\x60\x59\xdd\x4e\x6d\xa1\xfd\x21\x4c\xe3\xeb\xd8\x3b\x8f\xef\x60\x0f\xdc\x0f\xd5\xf9\x76\x5c\x82\x23\xa9\xdb\x43\x14\xc4\x21\x02\x3c\x99\x46\x68\x82\x48\xc2\xb2\xb6\xf6\x78\x46\x02\x70\xf3\xd6\x17\x37\x31\x4d\xd2\x14\xea\x04\x2a\x39\x6e\x75\x31\x31\x49\x10\x1d\xfb\x01\x5a\xa6\x1d\xb9\xee\x42\xcd\xc3\x4a\xcd\x2e\xc4\xb7\x5c\xdd\x95\x07\x5e\xed\x14\x6c\xe0\x0a\xff\x5b\x7c\x2b\xc4\x81\x32\x52\x18\x4f\x12\xaf\xcf\x7b\x19\xbb\xa3\xea\x60\x42\x31\xca\x5d\x70\xfe\x7e\xe9\x68\xab\xf5\xc1\xa9\x91\xef\x8c\xba\xd5\x91\xf0\x4e\xf9\xe2\x7f\xa8\x8e\x1e\xf6\x4c\xbd\x28\x55\xd9\xd9\xb0\x08\x8e\xf8\xea\xf4\x7a\x30\x40\x77\x1b\x5a\x2b\x60\x32\x9d\x25\x72\x19\xb8\xa7\x74\xe0\xc3\x31\x2f\x11\x13\x56\x72\xdf\x8b\x92\x65\xaa\x84\xcb\xe7\xf7\xf2\x0a\xd9\xf4\x3e\x8e\x20\xad\x5e\xe8\x01\xa4\x79\x40\xd5\xaa\x75\xe5\x5f\x73\x37\x99\x45\x11\x17\x27\x9f\x00\x10\xf5\x6f\xdd\x5c\xae\x84\x90\xb8\x4e\xa4\x32\xff\x15\xbe\x70\x4c\x18\xa2\x89\xe8\x8e\xbb\x84\x98\xac\xf6\x82\xe5\x72\xfd\x3c\x25\x0a\x15\x3c\x9e\xa1\x84\x09\x38\xd4\xee\xa9\xd5\xd9\xe8\x37\xb2\xd7\xb2\x20\x57\xfd\x5b\x1b\x52\x3d\x26\x14\x16\xbf\x22\xdb\x2b\xc9\xd8\x83\xf7\xc5\x92\xdc\x62\xaa\x46\x9a\x72\x15\xd4\xaf\x0b\xb7\xd7\xc6\x65\xb9\xc3\x51\xc4\xb5\x20\x94\x30\xd2\xcf\xb9\x16\x20\x4d\x47\x90\xc4\x30\xf8\x72\x72\xc2\xe5\x8e\x8a\x83\x19\x09\xd7\x9b\x45\xd1\x5a\x55\x35\x76\x5e\x56\x5a\xa3\x85\xac\xd1\x5b\xb3\xd1\x6d\xa9\x42\xc3\xf2\x8c\x3f\xb9\x02\x3f\xfb\x94\xdd\xf8\xd1\x3f\x2e\x4e\x07\x30\x91\x7f\xe7\x76\x53\x04\x11\xee\xf2\x49\x0c\xbc\xea\x5a\xd5\x18\x62\xdd\x0e\xb8\x5f\xbf\x5d\x2d\x12\xd4\x95\x08\xdb\x31\x21\x82\x53\x88\xa7\x6a\x57\xe5\x75\x14\x72\x7c\x21\x13\x63\x9c\x33\x92\x8d\x94\x37\xe7\x6b\xe9\xd7\x8d\x77\xed\x28\x0b\x62\x5d\x01\x4c\x72\xa4\x26\x17\x98\x03\xcd\x1a\x88\xca\xdd\xaa\xae\xc5\x80\xd7\x75\x7b\x21\x62\x24\xb7\x03\x32\x58\x32\x7b\xa9\xc1\xbf\x0d\x04\x06\x12\x0a\xdc\x0e\x4c\xfc\xe9\x57\x29\xf5\x9b\x41\x6d\xa2\x07\x55\x89\x43\xc8\xc4\xbf\x45\x6e\x7d\xd5\x8e\x2d\x51\x73\x03\x6c\x5d\x0d\x98\x82\x00\xb7\x31\xe9\xbf\xed\x71\x1e\x52\x7c\xc9\xff\x53\x03\xfe\x5a\x42\xb0\x6f\xb5\x64\xd6\x2c\x58\xc9\xcb\x47\x9c\xe1\x71\xc3\x10\x4b\xce\x5b\x1a\xd7\x76\xa3\xaa\x38\xa9\x1c\x48\x16\x43\xd9\xf9\xd2\x2b\xc1\x19\x57\x72\x4a\xa8\x44\x3e\x39\x53\xac\x35\x0a\x59\xd5\x0d\xaf\x64\xcb\xc3\xfd\x0e\xb8\x3a\x7a\xaa\xf3\xc4\xac\x7e\x93\x59\xcb\xf0\xe0\x08\x47\x09\xa2\x10\x50\xe4\x27\x88\x81\x0f\x04\xdd\xc1\x58\x14\x66\xc1\x80\xac\xc3\x43\x02\x55\xdb\x8c\x09\x64\x51\x16\x14\xa8\x1a\x52\x02\xdb\x3a\x30\x50\xcd\xb3\xc8\xc0\x1a\xc7\x74\xe2\x27\x0c\xbe\x7e\x93\xc6\x6d\x5b\x73\x3f\x9a\x21\x06\xf0\xd5\xb4\x73\x1b\x94\x8b\xab\xff\x97\x18\xf9\x20\x26\x21\x4e\x70\x4c\x04\x21\xcb\x4e\x8c\xb8\xf4\x20\xf2\x67\x0c\xc1\x98\xa8\x55\x18\xeb\x99\x76\xd4\x23\x3e\x77\x29\x48\xd6\x5c\xda\x96\x9e\xbf\x51\xbc\xb4\x2d\x8b\x53\xc2\x2e\x00\x38\x7f\xfc\x4f\xff\xbc\xef\x74\x6d\xcb\x3a\x12\x53\xd8\x55\xf0\xc0\xbc\x7f\xc4\x98\xb8\x63\x4f\xcd\xac\x0b\x0e\x7c\x1a\x1c\x82\xd3\xe1\x75\xcf\x7c\xea\x4f\xd8\x2e\x8c\x3d\x39\xcd\xae\xb0\x31\x11\x63\xee\x02\x8c\x3d\x31\xb9\xae\x6d\x69\x75\x7f\x22\xa1\x5e\xad\x5e\x0f\x2a\xa3\xff\x44\x42\x57\x2f\x85\xe7\x79\x59\x79\xbe\x90\xbd\x1e\x00\x70\x4d\x05\x62\x0a\x86\xa2\xc5\x13\xbe\x7e\xc3\xae\xea\x82\x43\x87\x04\x12\x2d\x53\xb5\x07\x18\xc2\x9e\x31\x0e\xfe\x5f\xaf\x97\x89\xdc\x03\x7f\x3a\x45\x24\x74\x55\x41\x57\xa9\x42\x0d\x2d\x5f\x1d\xb7\xd3\xe9\xc8\xf6\xa9\xea\xde\xab\xc8\xc8\x8a\xba\x45\x85\x66\xa5\x5a\x9d\x4a\x92\x0e\xd5\xf9\xbf\xa4\xce\x4e\xe9\x2a\x95\x9d\xd2\x9f\x50\x63\xa7\xe7\x8d\x0a\xcb\xc9\x23\x9f\x92\x76\xdd\x23\x35\x29\x11\x87\xe4\xd5\x50\x14\x8a\x5a\x6a\xb0\x47\xbc\x80\x15\x22\x69\x11\xe1\xaa\xaa\x06\x67\xe4\x65\x87\x88\x05\x14\x4f\x85\xcb\xa6\x69\xd5\x2d\x6b\x5a\xbb\x73\xa3\xb4\x26\x32\x33\xb0\x4b\x13\x9d\xac\x7b\x31\xa5\xc8\x57\x1c\xc2\xd7\x95\x1a\x4b\x2a\x38\x25\x42\xc4\x9d\x77\x60\x6f\x0f\x7e\x53\xbc\x91\x79\xaf\xa9\xe5\xcc\xa1\x47\x63\x3f\x62\x68\xd4\x29\x6c\x15\xc5\x6e\x8e\xc3\x99\xd2\xd3\x9c\x83\x88\x45\x0d\x09\x94\x2f\xc5\xdf\x99\xd3\xe1\xee\xbd\xae\x0f\xbe\xf5\xbc\x98\x52\x4c\x12\xb1\xf7\xd4\x73\x91\x58\xc3\x43\xe2\xd2\x62\x73\xe1\x46\xbd\x6c\xce\x23\x6e\x40\x99\xd5\xe2\xdc\x60\xe7\xd9\x54\x15\xe0\x1a\xa3\x50\xd8\x64\xe8\xfb\x20\x46\x34\x40\xe0\x60\x07\xf2\x9d\xab\x60\x67\x79\xf8\x50\x51\x7a\x31\xbe\xc0\x63\x98\x73\xfd\xe6\xcc\xbc\x46\xc3\x79\xcf\x5c\x50\x3e\xeb\x1a\x9d\x97\xa2\x84\x8d\x05\x9b\x42\xad\xed\xb4\x30\xd7\x5a\x30\x7a\xb6\xb2\x41\xad\x8a\xdf\x4f\x69\x88\xe8\xfe\x02\xd8\x14\x05\x78\x8c\x03\x8c\x64\xf8\x7e\x7a\x7e\xd8\x3f\xdf\x5f\xc0\xfe\x9f\xf0\x5f\x31\xaf\xf3\xdf\x92\x2f\xb3\xfa\xd2\x5c\xed\x20\x26\x2c\x01\xd7\xb6\x38\x37\x5c\x1c\x00\x8b\x69\xc2\xe0\x6a\x01\x3e\x0b\x10\x09\x79\x78\x2a\x9a\xdb\x16\x7f\xaa\x5b\xef\x81\xf3\xe9\xe2\xc0\xb1\x45\xb3\xc3\xbe\xd9\x2e\x44\xe5\x86\xe2\xb9\xd1\x92\xff\x5b\x1f\xff\x0d\xd0\x9d\x78\x92\x51\xa9\x2e\xe0\x04\x2a\x9f\x18\xd4\x29\x0a\x96\xe5\xdd\x73\x91\xab\x45\x1d\x83\xaa\xa5\x10\x31\x14\xa9\x99\x6b\x3c\x47\x04\x84\xfe\x99\xa1\x93\x55\x21\x44\x5a\x4b\xfa\xb1\x1a\xe1\x03\x38\x5f\xac\x12\xec\xff\xd9\x4c\xfb\xb1\x41\xfb\x5d\xc9\xf9\x6a\x4f\x5c\x85\x4f\x05\xb2\xa7\x72\xae\xcd\xa8\x29\xd7\xca\x74\x09\xbd\x2b\xe6\xeb\x4e\x00\x7d\x9f\x52\xc4\x18\x8e\xab\x33\xad\x83\x51\xa1\x5b\xbd\xc0\xe6\xb2\xc5\x55\xcf\x89\xb7\x02\x24\x21\xb9\xd3\xc9\xf4\x18\x17\x5d\xc1\x5e\x2e\x7b\x1f\xe0\x73\x1c\xa2\x48\xaf\xde\x87\x9e\x9c\xb6\x2c\xc4\x4c\x4c\x67\x32\x4d\x16\xba\x42\x72\xe3\x27\x70\xe3\x33\xf0\xa3\x48\x98\xc3\x04\x25\x37\x71\xc8\x3c\x11\x74\x27\xbf\x30\x98\x52\x3c\xf1\x69\xb4\x80\x19\x43\xa1\xc0\x39\x34\xb9\x42\xa1\xb0\x68\xa3\x01\xaf\x2f\xf6\xc3\x37\xf8\xfa\x06\xd1\x5f\x23\x34\x47\x11\x4c\x78\xbf\xcc\x93\x76\x55\x18\xd9\x12\xf4\x80\x8f\x66\x24\xe0\xe6\xba\xab\x83\x7c\x3d\x68\xf5\x4f\xbf\x66\x17\x28\xbb\xca\xf6\xe5\xeb\x83\x63\xb1\x70\x95\x2d\x40\xcd\xa9\x61\xb6\x5f\xa8\x3b\xc7\x2c\xec\x13\x7a\x3d\xb8\x46\x49\xa6\x38\x12\x93\x5f\x39\xfc\xea\x7d\xa5\x4f\x42\x98\x52\x34\xf5\x29\xe2\xcf\x27\x42\x75\xbc\xe2\x5f\x33\x44\x17\x36\xc0\x30\xe8\xc2\x10\x77\x61\x38\xe7\xd6\xca\x22\x1c\xd4\x9c\xc8\x7a\xd9\x5e\xb6\x0b\xbf\x89\xcd\x68\xaf\x07\xec\xaf\x08\xb0\x54\x8e\x10\xd6\x55\x8b\xb4\x80\x5b\xb4\x80\x29\x8d\xe7\x38\x44\x21\xb7\x5e\x86\xfe\x9a\x21\x12\x20\x1b\x78\x23\x96\x88\xe8\x63\x24\x30\xfe\x78\x70\xd1\x3f\xbf\x84\xe3\xc1\xe5\xe9\xa6\x47\x9c\xee\x08\x76\x8a\xee\xc8\xe7\x20\xfc\x10\x76\x40\x71\xc7\xbf\x3e\x9d\x7c\xe9\x5f\xd4\xd5\xc5\x95\xba\xe7\xfd\xcb\x2f\xe7\x83\xe3\xc1\xef\xc6\x3a\x9c\x0b\xdb\xc6\xe4\x5a\xb0\xcd\x48\x4d\x39\x8a\xaf\xe5\x5c\x39\xd5\xdd\xa1\x5f\xe6\x28\x9f\xa7\xcf\x9f\x5e\x23\x2a\x79\x50\x2c\xed\x49\x7c\x5d\xdc\xa8\xea\x52\x57\xaa\x81\x6b\xdd\xf3\x3c\x49\xb4\x2a\x6c\xa9\x39\x26\xae\x5a\x00\xdf\xb8\xc5\x77\x5c\x8b\xe1\x95\xf7\xbf\x7c\x40\xe7\xf1\x5d\x55\x28\x1e\x03\x12\xa1\x40\x7c\xe7\x5d\x04\x3e\x31\xf7\xa5\x81\x4f\xd2\xb4\xf3\x9f\x80\x8a\x23\xcc\xcf\x9e\xbb\x80\xf4\xb8\x34\x60\xd6\x1d\xc0\xab\x53\xea\xdc\xe9\x8b\x0e\x24\xa1\xea\x83\x78\x52\xb3\xfb\x6d\x4d\xbf\x35\xfd\x1f\xc2\xf4\xcb\xf4\xf1\xd9\x27\x8b\x12\x85\x88\xa2\xc7\x25\x11\x2e\xb2\xc1\x9b\xce\xa2\x19\xf5\x23\xad\x47\xbe\x07\xd6\x6e\xf5\xf5\xdb\x6a\xc7\xb2\x86\x4d\x52\x76\xf7\xa0\xb6\xf1\x52\x6d\x89\x86\x75\xee\x9c\x6d\x45\x9a\xa4\xf2\xd8\xab\x4e\xbd\x88\x0a\x67\xa9\x3d\x01\xcb\x5e\xae\x59\x16\x5f\x69\x4a\xf3\xa5\xb4\x2c\x1d\x98\x34\xcd\x43\x88\xb6\x2d\x2b\x2d\x76\x5c\x1c\x55\x16\x1c\x35\x4b\xa9\x0e\x5a\xec\xf9\xd6\x77\xdf\x88\x99\x4f\x6d\x35\x25\x20\x6e\xcd\xe7\xcd\x9b\x4f\x8e\x3b\x47\x98\x70\x24\xe6\xe0\xc8\x37\x0c\xe2\x2d\x5b\x3c\x86\x40\xef\xc3\x58\x66\x58\xaa\xe6\xa8\xba\x12\x62\xaf\xc1\xe2\x09\x32\x9a\x79\xd2\x74\x78\xa3\x82\xad\xf0\x1a\xe2\x70\xad\xb8\xdd\xdb\x80\xb7\x87\x8c\x03\x75\xb6\x42\xc5\xf6\xcc\x15\x82\x05\x8c\xd7\x2c\x4e\x01\xa4\xf9\x32\xa4\x06\x25\x33\x14\xa1\xe0\x9e\x94\x7c\xd1\x3f\xe9\x1f\x5c\xc2\x72\xa9\x59\x42\xc8\x4a\x53\x18\xc1\x8e\xa0\x87\xd1\xd1\xf9\xe9\xe7\x4d\x89\x5a\x37\x1a\xb2\x9f\x86\x3e\x45\x93\xbd\x3d\x98\x5e\x7f\xf7\xfa\x94\x0e\xe2\xf3\xf8\x8e\x65\x2f\x68\xcc\x75\x5b\x99\xe9\x63\xe7\xaf\x85\x1e\x23\x16\x7d\x62\xaf\xc8\x00\xb5\x75\x8f\xd6\x3d\xde\x92\x7b\x70\x7b\xdd\x5f\xc0\x99\x32\x82\x7f\x22\x15\x77\xc8\x9c\x34\xdd\xb9\x7c\xca\x1f\xca\x47\xef\xa6\x22\xdd\xaa\xe1\x71\x85\x8e\xf6\x17\xee\xd9\x3f\x3b\x05\x0f\xdb\x5f\x2c\x97\xef\xa6\xb7\x79\x4a\xcc\x7d\x78\xa8\x2c\xa4\x1c\xc3\x4c\x6f\xcd\x25\x9e\xde\x56\x13\x63\x36\xd9\x5b\x3e\xd4\x65\xc4\x22\x35\xf9\x8d\x78\xb8\x85\xcb\x88\xfa\xe2\x65\xa4\x68\x30\xbd\xcd\x7c\x69\x0f\xde\x7d\x7c\xca\x7d\xda\xfb\x82\x42\x1f\xdb\xa5\xaa\xd2\xdf\xbe\x6f\x19\xd4\xf3\x14\x1e\x50\xe0\x9c\xd6\x15\x5a\x57\x78\x95\xae\x60\x24\xd3\x98\x84\xf3\x85\xe0\xbf\x66\x48\x9d\xd1\x65\x94\xa3\x5e\x9a\xe0\xf0\xbb\x41\x2f\xc7\x24\x44\xdf\x11\xd3\xaf\xd7\xf0\x18\x5c\x9f\x84\xa2\x96\x77\xcc\x94\x20\x97\xc4\x89\x2e\x52\x7c\xd4\xe9\x34\xd3\xd1\x51\x9d\x33\xf2\xd6\x9f\xc5\xfb\x83\x34\x85\xb1\x0c\x03\xab\xcb\x79\xb5\x00\x55\xd7\x78\xab\xad\x4f\x38\x6b\x65\x95\x7d\x91\x3f\x93\x99\x21\x2f\xec\x80\xef\x1e\xcf\x03\xd5\xb4\xfe\xb8\x41\x14\x3d\xed\x79\xa1\xea\xe9\x5f\x3e\xc5\x7c\x2c\xec\xf1\x1d\xb0\xbe\x07\x15\x86\x37\xfb\xa0\x72\x54\x33\x10\xd7\x9e\x48\xe9\x66\xbe\x78\x3f\x67\xa4\xf4\x61\xcc\xf4\x54\xce\x50\x25\xa8\xd6\x2b\x5a\xaf\x78\x66\xaf\xd8\x8c\xa3\x8c\x04\x8e\x12\x5d\x15\x98\x43\x1c\xc2\x8a\xf3\x83\x2c\x1a\x2b\x78\x8e\x78\xce\x9d\x85\xc1\x24\x3b\xaf\x5d\xbf\x0d\x2e\x4a\xcc\x99\xa4\x72\x2e\xdb\x7c\x98\xb0\xee\x34\x16\x1a\xcf\x4d\x57\x9c\xc6\x3e\xce\x21\xc4\xea\xe3\xd3\xf6\x60\xc2\x96\x7e\xc7\x32\x25\x6b\xef\xab\x3f\x6f\x28\x7b\xd2\x26\x5a\x96\x8e\x10\xa2\x31\xa2\xa2\x2b\xef\x20\x8a\x19\x72\xc5\x6b\x4c\x91\xc3\xc6\xcb\x06\xe8\x7b\xe2\x76\x94\xd4\x6d\x40\xa3\x10\xa0\xb2\x4d\x23\xd4\x75\x31\xea\xfa\x99\xad\x87\x05\x0d\x0c\x9b\x6a\x29\x4f\x44\x5f\x73\x9a\xdf\x28\xa7\x06\x65\x74\xfe\x1c\x1e\x4b\xfd\xf4\x29\x75\x3b\xdb\xad\x61\xde\xae\xc4\xf4\xdb\xbc\x5a\x7a\x66\x00\x2b\xb0\x7f\x8b\x64\x2d\x92\xb5\x48\xd6\x22\xd9\x03\x91\x2c\x8f\xc6\xbe\x4c\x43\x3f\x41\x30\xf1\x93\xe0\x06\x93\x6b\x21\xb7\x04\x43\x5d\x25\x9a\x3f\xfe\xa8\xbf\xfa\xd6\x60\xa7\xda\xd7\x38\x8c\x90\x84\xc9\xfd\xa0\xaf\xae\x4f\x09\x87\xb2\xc3\x8d\x52\x9e\x5e\xd7\x4b\x23\x99\x8b\x5b\xff\x75\x75\x96\x13\xa5\xb0\xc5\x48\xb3\x92\x79\x54\xac\x90\x5e\xf5\x1f\x79\x7e\x95\x94\xda\x15\xc9\xf8\xc3\xb9\x48\x5a\x1f\xce\x8d\xb7\xe5\x73\x51\x5f\x8c\x54\xa1\x2a\x4a\x66\x53\x21\x78\x26\x97\x4e\xe5\x08\x5b\xc2\xbf\x67\xc6\x17\x45\x1c\x06\x70\x17\x82\x3c\x65\x60\x18\xc8\xec\x80\x99\xd1\xc1\xac\x0b\xc1\x8e\x03\x7b\xe0\xec\x0c\xf1\x57\xfc\xad\x93\x03\xb8\xd2\x83\x4f\xd4\x47\x48\x78\x0c\x24\xd6\xdd\x8a\x0f\xab\x01\xb3\x0c\x34\xf3\x8f\x0a\x86\xb3\xc2\x57\x05\x25\x75\x16\x2e\x2d\x28\xde\xe5\xe0\x49\xe3\xd8\xe5\xdd\x48\xf9\x5a\xb8\xa3\xdc\xc4\x52\xbc\x22\x53\xd6\x2c\x83\x2d\xbe\x9c\x1d\x7e\xba\xec\x6f\x6a\xad\x17\xfd\x4b\xc1\x08\x96\x55\xcc\x08\x9b\x19\x19\x61\xaa\xc2\x90\x19\xff\x18\xad\x49\x10\x7b\xa6\xec\x30\xbe\x38\x33\x52\x48\xde\x7b\x53\xaf\xf4\x9e\xf5\xbd\xc3\x9b\x83\xc8\x2c\x62\x6c\xb1\xb2\xc5\xca\x16\x2b\x5b\xac\x7c\x8e\xfc\x87\x47\x8e\x28\xc5\x06\x5a\x9a\x3f\x7b\x1c\xe8\xcc\xdf\xfb\x9a\xdd\xfb\x51\xa4\x06\xc0\xcc\xf8\x72\x45\x26\xe7\xe6\xb8\xf9\x8a\x77\xe0\x2d\xde\xbe\x10\xde\x72\xc3\x6a\x31\xb7\x3d\xfc\x68\x0f\x3f\x5e\xfa\x18\xf7\x8d\xf3\x54\x29\xc8\x6f\x09\xab\x25\xac\x96\xb0\x5a\xc2\x6a\x09\xeb\xc7\x23\x2c\xc5\x54\x57\x8b\xc2\x0b\xb0\xc7\x4d\x2f\x97\x7d\x94\xd2\x6b\x75\x61\x25\xc1\xb6\xfe\xda\xbc\x2d\x48\x0e\x27\xac\x94\x6c\x6a\xee\xbe\x1e\x9a\x84\xfb\xa0\xaf\xa0\xb7\xa1\x96\x30\x26\xbf\x24\x1a\x84\x39\x0d\x18\x0b\x24\x1c\x36\x42\x49\x4e\x2b\xc5\x09\x6f\x48\x4f\x55\x76\xfa\xf8\x13\xb1\x4f\xd9\x12\x9e\x81\x89\x14\xaf\x28\x42\x82\xb5\x74\x34\x6a\x4c\x9d\xde\x92\xa2\xe4\x72\xe6\x67\x4c\xe2\x62\x9d\xdd\x6c\x79\x0a\x17\xbb\x2d\x8b\xc9\xcd\x69\xc6\x31\x4f\xc4\x76\x72\x34\xcf\x73\x2c\x56\xe8\xeb\x07\x38\x1a\x2b\xec\x37\x5e\x1c\x61\x4b\xfb\x86\x16\x6a\x5b\xa8\x6d\xa1\xb6\x85\xda\xb7\x0e\xb5\xe5\x7c\xe3\x3c\x66\x9e\xc9\x0f\x5b\xb0\xfa\xfa\x65\xe5\x27\x32\xf2\x23\x18\xb6\x2a\x3e\x3e\xaa\x47\xef\xd5\x69\xfe\xd9\x6a\x94\x83\xdc\xad\x13\xf9\x1f\x7a\xc1\x8f\x1f\x86\xda\xde\x13\xe5\xde\x5d\x88\xe7\x88\x52\x2c\xee\xfe\x42\xdf\x31\x4b\xf8\x1f\xb7\x68\xc1\x84\xd5\x52\xc4\x10\x49\x38\xf9\x70\x03\x94\xf7\xe1\x43\xcd\x28\x6a\x40\xbc\x7a\xc3\x32\x9f\x53\x7e\xbd\xb2\xb7\xfa\x1a\xf6\x4e\xe1\x02\x61\x75\x3b\x11\x1f\x84\xbe\x44\xf8\x81\x0c\xc2\xa7\x58\xbc\x64\xdf\x18\x5e\x9a\xd6\xb2\x4a\x4e\x29\x85\x6b\x0c\xef\xc9\x2f\xcb\x65\x84\x48\xa9\xdb\x9f\x8d\x72\x4c\x17\x58\xc1\x39\x59\x4a\xa8\x86\xc0\x07\x1f\x35\xf1\x21\xaf\xa1\x1c\x91\x25\x5a\xf7\x09\x4a\xfe\x74\x2b\xc6\x29\x42\xb8\x66\x9d\x22\xdd\xa4\xf5\xbf\xfb\x50\x36\xcd\xf2\xc5\x9b\xf9\xb5\x9b\x05\x17\x2a\xdf\xf3\xd9\xd4\xac\xe5\xb4\x57\xf7\xc5\xe7\x53\x52\x50\xdd\x2e\xa0\xe5\xa2\x96\x8b\x5a\x2e\x6a\xb9\xa8\xe5\xa2\x96\x8b\xd6\xde\x3e\x90\xb1\xd2\xa1\x80\x25\x3e\x29\x97\x75\x1a\xee\x84\x32\x5f\x64\x73\x2d\x8f\x31\x65\x49\xf9\x7d\xba\x12\x54\x77\x77\x07\xab\xbb\xbc\x03\xa4\x65\xb3\x8a\x44\x71\xc9\xf1\x1f\xbe\xe8\x6e\x17\x2e\x6f\x30\x83\xc0\x27\x0a\x3f\x61\x12\x0b\x50\xf4\x09\x7c\xe4\x83\x96\x74\x28\xfb\x7e\xed\xf7\x4d\xa9\x19\xd4\x80\xce\x61\xff\xa4\x7f\xd9\xdf\xe6\xe3\x6a\xe3\x7b\xa6\x22\xc2\xbc\x8e\xf7\xa9\x6f\x2a\xc3\xf2\x39\x4f\x91\x7f\x08\x77\xcb\xa2\xcf\xd6\xef\x5a\xbf\x7b\xe5\x7e\x57\x61\x3a\xf1\x3d\x6f\x29\x59\xcc\x2f\x67\x8b\xf9\x51\xc4\x7d\x52\x5c\x93\x5d\xf4\x38\x91\x30\xb6\xa9\xd7\x35\x64\x80\x79\x26\x6b\xfd\x6c\x9f\x04\xff\x44\xde\xd8\x66\x15\xb5\x59\x45\xcf\x71\x9b\xc1\x66\x17\xba\x3e\x3a\x7e\x95\xc2\x80\x16\xc8\x5a\x20\x6b\x81\xac\x05\xb2\xad\x80\xec\x91\xd2\x1f\x25\x02\x95\x92\x73\x74\xe1\x46\xc9\x39\x63\x1a\x4f\xb6\xf8\xfd\x00\x30\x7e\xde\xb4\xbe\x9f\xa7\xbb\x79\xf4\x49\x80\x67\x4d\x6e\xc6\x8b\x82\x51\xfd\x35\xa3\x4f\x77\xec\xf7\x43\x5d\x3c\x5a\x73\xfc\xf0\x42\x7e\x52\x8a\x17\x5a\x87\x69\x1d\xe6\x35\x3a\x4c\xf9\xac\x5c\x9d\x1b\x14\x52\x91\x70\x70\xff\x54\xa4\xcc\x07\x8f\xea\x7d\xb0\xf0\x1e\x58\x9a\x2e\x5b\xf5\xd3\xf1\x0d\x4d\x1f\xf9\x5e\xd1\xa7\xf4\xa1\x07\xbe\x0f\x7b\xce\x4b\x44\x9f\xd4\x87\x6a\x3a\x7d\xcb\x8e\x54\xcf\x3c\x8f\x64\xf5\x75\x64\xd2\x9a\x7f\x6b\xfe\xaf\xc7\xfc\xab\x29\xad\xe2\x07\x12\xc5\x29\xcd\x53\x7e\x08\xc6\x7b\xa9\x7c\xa6\x20\x0b\x4b\x11\x9e\xfc\xc9\x46\x56\xfc\xc5\x05\x69\xa4\xa3\xae\xcc\xd9\xd0\xef\xa0\xf8\xca\xe1\xb1\xa8\x67\x48\x18\x81\x1f\x51\xe4\x87\x0b\x99\xeb\xa3\x0f\x86\xea\xbb\x7b\xc6\x4f\x13\xac\x47\xcb\x4e\xb2\x36\x4a\x4e\xf2\x4a\x33\x2d\xc5\x43\xb6\xb5\x61\x6e\x91\x55\x9f\xf8\x63\xad\xca\xfb\xf9\x4d\xb5\xdb\x2e\xc7\x67\xb8\x79\x8e\x4f\xff\xff\x0e\x4e\xbe\x1c\xf6\x0f\x3d\x67\x27\x78\xe1\x44\x9f\x3a\xb3\xba\x67\x9e\xcf\x13\xfc\xda\xa8\x42\xee\xd1\x86\x3f\x38\xaa\xab\x9f\x0e\xe0\xe0\x74\x70\x74\x72\x7c\x70\x09\xae\xb9\x9b\xc8\x6a\x1c\x9e\x82\x4a\x4b\xda\xf0\x53\x8b\x57\x73\x70\xa8\xf8\xe2\x55\x5c\xbc\xf4\xfe\xbd\xfc\xbb\x8e\x18\x1e\xe7\x03\xb1\x97\x47\x5e\x23\x2f\xb4\x85\xe0\x16\x82\x5b\x08\x6e\x21\xf8\x07\x87\xe0\xe6\x28\xfb\x81\xc7\x34\x19\x9c\x1f\xd5\xc3\x79\x61\xc3\x7a\x3f\x3c\xcf\xf3\x70\x4f\x30\x4b\x36\x09\xa7\x57\xec\x70\xa1\x4d\xf2\xaf\x4d\xf2\x7f\xa1\x9f\xc3\x7f\x53\x78\x57\x36\xc4\x06\xd8\x5b\x3b\x9a\x3d\x70\x73\xae\x6a\xaa\x9c\x93\x59\x71\x50\x2d\x5c\xbe\x58\xc4\xfa\xe2\x10\x57\x17\xb7\xb6\x58\xd7\x62\x5d\x8b\x75\x2d\xd6\x3d\x46\x68\xc8\x0d\x95\x1b\x35\x04\x31\x99\x0b\x18\x8b\x67\x34\x73\x0f\x4c\x92\x58\xa4\xbe\x25\x37\x1a\xc2\xc4\x99\x3f\xc5\x73\x44\x45\x36\xfc\x8c\x84\x88\xb2\xc4\x27\xa1\xc4\x2b\xe9\x21\xba\xfd\xc4\x9f\x7e\x95\xab\x6f\x7e\x7d\xd5\x85\x78\x3c\x66\x88\xa3\x03\xc7\x9f\x20\xdb\xfe\x75\x01\x1b\x7f\xcf\x8b\xdf\x6c\x89\xbd\x33\xe1\x6a\x53\xad\x77\xe0\xa3\xdc\x2f\x06\x71\x24\xbe\x48\xca\xf7\x8c\xba\x7f\xbe\x71\x0c\xf2\x7d\x63\xd0\x85\x91\x33\xda\x09\xe2\x68\x67\xe4\x8c\x3a\xb6\x65\xe1\xfc\x21\xf7\x91\x77\xce\x0e\x4b\x28\x57\x85\x77\x9c\xc4\xbe\x4b\x3a\xbc\x92\x71\x53\xe2\x5c\x74\xc4\x0b\xc9\xce\x0e\xdf\x6f\xea\xec\xb8\xa0\x0b\xb8\x0b\x73\x3b\xb5\xff\x3f\x00\x00\xff\xff\x8c\x68\x59\xee\x92\xa3\x00\x00")

func templatesPg_modelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_modelGotmpl,
		"templates/pg_model.gotmpl",
	)
}

func templatesPg_modelGotmpl() (*asset, error) {
	bytes, err := templatesPg_modelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xd8, 0xe9, 0xc3, 0xcb, 0xc3, 0x79, 0xdd, 0x9e, 0x83, 0xc0, 0x8c, 0xdd, 0x36, 0xea, 0x95, 0x6a, 0xf4, 0x98, 0x4e, 0x6a, 0x9, 0xc2, 0x78, 0x66, 0x8c, 0x8a, 0xce, 0x2a, 0xb6, 0x8a, 0x25}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\xd0\x07\xb9\x35\xe8\x3d\x07\xc8\x80\x3a\xf6\xb2\x0c\x5d\xec\xb9\x1e\x86\x62\x18\x56\x5a\x3a\x49\x5c\x24\x52\x25\xa9\x38\x86\xe1\xff\x7d\x38\x52\x92\x7f\xb4\x09\xd6\xc7\x3c\xd9\x3a\xde\x7d\x77\xdf\x77\xfc\x71\x8d\x48\x1f\x44\x81\xb0\xdf\xbf\xe1\x4b\xe1\x4a\xbe\x0c\x86\xc3\x81\x31\x59\x37\xda\x38\x48\x58\x14\x17\xd2\x95\xed\x86\xa7\xba\x9e\xfc\x2b\xd2\x87\x74\xd2\x14\x4f\x31\x1b\x31\x36\x99\xc0\xed\xfc\x7e\xbe\x7a\xbf\x9e\xcf\x60\xfa\x09\x96\x8b\xdb\x05\x87\xd9\x02\xee\x17\x6b\x98\xcf\xee\xd6\xdc\xfb\xcc\xa6\x20\x2d\xb8\x12\x21\xd5\x75\xad\x15\x48\xe5\xd0\xe4\x22\x45\xc8\xb5\x81\x4c\x38\xb1\x11\x16\x41\x37\x68\x84\x93\x5a\x91\xb3\x70\x90\x0a\x05\x1b\x84\xd6\x62\x06\x5b\xe9\x4a\xc2\x72\xbb\x06\x2d\xe4\x46\xd7\x60\xd3\x12\x6b\x01\x9f\xf7\x7b\xe0\x1f\xfd\x7f\x7e\x2f\x6a\x84\xc3\xe1\x33\x87\x7b\xed\x30\xa0\xb8\x52\x5a\x90\x96\x82\x45\x65\x35\xa4\xba\x91\x98\x51\x0d\x1a\x50\xa4\x25\xe8\xdc\xd7\xe6\xc4\xa6\x42\xe8\x24\xb1\x9c\x4d\x26\x14\xb2\xa6\x68\x5b\xea\xb6\xca\x60\xab\xcd\x83\x2f\x64\x28\x79\x62\xbf\x54\x7c\x36\x05\xa1\xb2\x73\xdb\xfa\x89\x33\x2a\xd5\x73\x1f\xd8\xee\x59\x34\x7f\xc2\x34\xb1\xce\x48\x55\x8c\x81\x73\x3e\x2c\xee\x0f\x23\x48\x9a\xe2\x89\xdf\xe8\xba\x16\x2a\x5b\x8b\x62\x0c\x68\x8c\x36\x23\x16\xfd\xde\xa2\xd9\x3d\x1f\xf6\x96\xe2\x56\x7a\x6b\x2f\x22\x56\x7a\xfb\x6c\x50\x1f\xc3\x0e\xbe\x47\x1f\x74\x01\x79\xab\x52\x92\x9f\xc3\xe2\x11\x8d\x91\x19\x06\xf1\x3c\x65\x92\xa8\xd2\x45\x81\x86\x04\xdb\xe9\xd6\x40\x5a\x6a\x99\x22\x7b\x14\xc6\x87\x5f\x7b\x80\x67\x13\xee\x43\xa2\x1b\xad\x32\xd9\x35\xb9\x35\xca\x82\x80\x4a\x5a\x47\xa0\xe9\x71\x89\xba\x43\xde\xf6\x4b\x05\x69\x25\x5a\x8b\xd6\x8b\xdc\x08\x23\x6a\xcb\x28\xd1\x09\x52\x42\x91\x96\x32\x0e\xb6\x11\x24\x14\xdb\x17\x13\xe2\xe0\xaf\xbf\x4f\x4a\xf2\x62\x75\x82\x51\x6b\x88\xc7\xb6\x44\x83\xe4\x17\x02\x83\xb1\x30\xba\x6d\x36\xbb\x4b\xb3\x36\x19\x9a\xaf\xcd\x95\xac\xa5\xbb\x34\x92\x82\x52\x39\xc6\x22\xda\xf1\xff\x8c\x3d\x57\xb8\xba\x06\x23\x54\x81\x10\xea\xdf\xb3\x28\x0a\x64\x69\x85\x6c\xfc\xc6\x7f\x26\x23\x16\x45\x32\xef\x94\xe0\x73\x2a\x19\x7e\xb8\x06\x25\x2b\x1f\x14\x19\x24\x2d\x49\xad\x9e\xea\xf8\xcc\x99\x45\xd1\x81\x45\x91\xdd\x4a\x97\x96\xfd\xca\x9a\xf6\xa7\xcf\x49\x87\x2f\xfe\xf3\x97\xf9\x6a\x1e\x5f\x11\x1c\x55\x6c\x30\xbf\xd0\x8b\x56\xba\xea\x7d\x8e\x93\xf2\x03\xe0\x32\x88\xec\x2b\x8a\xa4\x2b\xdf\xbd\xf3\xff\x3c\xd2\x35\x88\xa6\x41\x95\x25\xf4\x35\x86\xf8\x4d\xfc\xce\x3a\x93\x6a\xf5\xc8\xef\x9c\x16\x89\x74\xe5\x68\xe4\xdd\xbb\x56\x0d\x01\x3d\x1f\xff\xeb\x5d\x7c\x25\x5d\xa7\x06\xb7\xf0\x3d\x86\xbc\x76\xfc\x63\x63\xa4\x72\x79\xd2\xd5\xf5\xb3\x36\xb5\x70\x63\x4f\x89\x73\xee\xf3\x04\xce\xb7\xab\xc5\x1f\x4b\x98\x7e\x7a\x3d\xb4\x87\xbd\x38\x38\xf6\x96\xef\xa4\xbe\x58\xcd\xe6\xab\x57\x45\x7d\x38\x6f\x83\x63\x6f\xf9\x4e\xea\x1f\xee\x7e\xbb\x5b\xbf\x1e\xde\xdd\x85\x32\xb8\x85\xef\xff\xcd\x39\xc3\x5c\xb4\x95\xbb\x7a\xee\x9e\x20\x18\x7f\x49\xe4\x49\xdc\xaa\x07\xa5\xb7\xea\x78\x13\xfb\xf7\x36\x1e\x85\xfb\xe3\xc0\x58\x34\x99\x40\xd3\x3a\xc0\x47\x34\x3b\x57\x4a\x55\x80\xd3\x05\xba\x12\x4d\x77\x29\xb6\xee\xe4\xea\x93\x39\x54\xa8\xba\xb3\x39\x82\x9f\xe0\x47\xaf\x19\x39\x1d\x9b\xd8\xba\x71\x77\xfb\x80\x97\x4a\xaa\xc2\xf2\x5f\xb5\x54\xc3\x99\x8e\xe1\xfd\xfd\x0c\x62\xa2\x73\x18\x40\xfb\x7d\xff\x22\x6c\x7f\xc0\x2f\x91\x8f\x87\x26\x1e\x5f\x02\xf7\xbb\xea\x45\xe0\xfe\xf8\x5c\x02\x1f\xb7\xe4\xd7\xc0\xa1\x71\x2f\xc2\xfa\xad\x79\x89\xd9\x37\xfc\x88\xc8\x86\x4e\x9e\xe5\xf6\x10\x10\x8f\x8e\xcd\x55\xb2\x62\x17\xef\xee\x71\x1e\x09\x13\xca\x37\x16\xa8\xba\xfe\xe5\x81\xb7\xe1\x5f\x0f\x13\xde\x27\xeb\x4c\x9b\xba\x0e\xe0\xd4\x44\xa1\xfe\x61\x01\xe8\x37\x41\xd8\x94\xc3\xe7\xf2\x1b\x4f\x31\x8b\xc2\x9b\x16\x5e\xe3\x2e\xd5\x9d\xb2\x68\xc2\x54\xd6\x4d\x82\xd2\x5b\xfa\xe1\x8d\x26\x92\xd9\x74\x18\xd2\x24\x8d\x12\x74\xcc\x50\x49\x54\x34\x5b\x76\xe3\x8c\x1f\x32\xad\xac\x9b\x0a\xc9\x39\x80\x9c\x0c\x9b\x81\xc5\x49\xb6\x33\x1d\x82\x3d\xc9\x36\x30\x9b\x8e\x20\x59\xe9\xed\x30\x64\x85\x32\x57\x7a\x7b\x12\x21\xaa\x4a\x6f\x2d\xcd\x47\xe0\x34\x34\x6d\x55\xd1\x91\xf0\x93\x6b\x89\x60\x1b\x4c\x65\x2e\x53\xa8\x75\x86\x15\x8d\x39\x20\xa0\x40\x85\x46\xa6\xb0\x15\xbb\x50\xca\x39\xe2\x9e\x45\x33\x4c\x75\x86\xc9\x23\x9c\x0d\x54\xbd\x56\xff\x05\x00\x00\xff\xff\x51\xce\x6a\xc5\xc6\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xe7, 0xc, 0xcf, 0x12, 0xd4, 0xb0, 0xd, 0x9c, 0x49, 0xca, 0x67, 0xee, 0x60, 0xcf, 0xb5, 0xa6, 0x9f, 0xb6, 0xea, 0x5e, 0xd0, 0x80, 0x61, 0xde, 0xa, 0xc8, 0x3c, 0xa6, 0x3f, 0x3f, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/pg_enum.gotmpl": templatesPg_enumGotmpl,

	"templates/pg_model.gotmpl": templatesPg_modelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"pg_enum.gotmpl":  &bintree{templatesPg_enumGotmpl, map[string]*bintree{}},
		"pg_model.gotmpl": &bintree{templatesPg_modelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":     &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
