// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\xd1\x6a\xdb\x40\x10\x7c\xae\xbe\x62\x30\x81\x48\xc1\x3d\xbd\x17\xf2\xd0\xc4\x22\x04\x8a\x65\x6a\x53\x28\xa5\x94\xb3\xbc\xb2\x45\xa5\x95\x7a\x77\x0a\x98\xe3\xfe\xbd\x9c\xa4\x1a\x1b\xa5\xf8\xc5\x31\x44\x4f\x62\x77\x6e\x66\x77\xe6\xae\x91\xd9\x6f\xb9\x25\x58\x7b\x23\x16\xd2\xec\xc4\xa2\x2f\x38\x17\x04\x71\x8c\xa7\x64\x9e\x7c\xfd\xbc\x4a\x66\x78\xf8\x8e\x45\xfa\x94\x0a\xcc\x52\xcc\xd3\x15\x92\xd9\xf3\x4a\x04\x81\xb5\xf1\xdd\xa5\xbe\xd8\xb9\x8e\x0f\x69\xab\x40\xdc\x56\x30\xfb\x86\x70\xa8\x5f\x52\xc7\x2f\xe7\x77\x4e\xb8\xad\xc4\x42\xea\x4c\x96\xce\xa1\xd0\x30\x3b\xc2\xe4\xd0\x99\xcb\x8a\x9c\x9b\x1c\x4d\x93\xab\xba\xea\x01\xcb\x6c\x47\x95\xfc\x07\x11\x41\xd7\x1e\x73\x6a\xa3\x0a\xde\xbe\x63\xa7\xb2\x9a\xb5\x41\x18\x00\xd6\x7e\x84\x92\xbc\x25\xdc\xbc\xc8\x12\x9f\xee\x31\x2c\xfb\x4d\x96\x2d\x69\x38\x17\x00\xc0\x6b\xd6\x5a\xeb\x8f\x8c\x9c\xbe\x1d\xea\x5f\xe4\x9a\x4a\xe7\x6e\xc7\x07\x45\x47\x79\x96\xef\x7e\x0c\x09\x27\xa7\xe4\x93\x68\x58\x81\x78\xe3\x47\x8d\xde\x28\x93\xa5\x34\x85\xce\xf7\xdd\x7e\xfa\x4f\x19\x6f\x54\xf1\x42\xaa\xf7\x48\xa1\x60\x43\x2a\x97\xd9\x1b\xde\xeb\x4e\x09\xba\x1b\xa3\x20\x7d\x76\x90\xbc\x56\xaf\xf9\x1e\xc7\xc8\x5b\xce\x10\x1e\x7a\x8f\xb2\xf2\x46\x8e\xc1\x51\xaf\x19\x46\x08\x8f\x45\xa6\x20\xa5\x6a\x15\xc1\x7a\x32\x40\x91\x69\x15\x0f\x2f\x62\x44\x1b\x4d\xc1\x45\xe9\x91\xee\x0a\xc9\x34\x5b\xff\x64\xb4\x48\x38\xab\x37\xf4\x50\xb0\x54\xfb\x6b\x84\x73\xa2\xb7\x3c\xc9\xe8\xcc\x48\x97\x88\xe9\x98\x3a\xfc\x85\xbb\x5e\x52\x3c\xd6\xcc\xcf\x9c\xd7\x53\xac\xf1\xe3\xe7\x7a\x6f\x28\x42\xd8\xff\xfc\x27\x43\xd9\x34\xc4\x9b\x70\x3d\x1d\xf0\xe3\x34\x85\x10\x47\x89\x7e\xf8\x1b\x00\x00\xff\xff\x7f\x7c\x2a\x1d\x69\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x60, 0x8e, 0x6c, 0x2c, 0xda, 0xc7, 0x72, 0xc1, 0x5, 0x76, 0x93, 0x4c, 0xc1, 0xcf, 0xa6, 0x57, 0x3a, 0xbe, 0x5f, 0x2f, 0xd1, 0x53, 0xa, 0xb7, 0x8c, 0xbb, 0x4e, 0xfc, 0x10, 0xea, 0xa9}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xdd\x73\xdb\xb8\x8f\xcf\xd6\x5f\x81\xf3\xf4\x5a\x29\xf1\xca\xb7\xaf\xbd\xcb\xcd\x24\xb1\xb3\x97\xbd\xd6\xee\x25\xce\xee\xed\x74\x3a\xb1\x22\xd1\x89\x36\xb2\xe8\x92\xb4\x93\x8c\x47\xff\xfb\x6f\xc0\x0f\x7d\xcb\x1f\x89\xd3\x6e\xda\xf4\xa5\x0a\x09\x82\x20\x08\x80\x00\x08\x7a\xe6\xf9\xb7\xde\x35\x81\xe5\xf2\x8d\xfb\xc9\x13\x37\xee\x27\xd5\x90\x24\x96\x15\x4e\x67\x94\x09\xb0\x2d\x80\xb6\x4f\x63\x41\xee\x45\x1b\xbf\x49\xec\xd3\x20\x8c\xaf\xbb\x7f\x73\x1a\xb7\xad\x56\x9b\x30\x46\x19\xc7\x2f\x2e\x58\x18\x5f\xcb\x4f\x11\x4e\x49\xdb\xb2\x5a\xed\xeb\x50\xdc\xcc\xaf\x5c\x9f\x4e\xbb\x7f\x7b\xfe\xad\xdf\x9d\x5d\xdf\xb7\x2d\xc7\xb2\xba\x5d\xf8\xad\x3f\xe8\x9f\x1d\x8e\xfa\x3d\x38\xfa\x0b\x3e\x0d\x7f\x1b\xba\xd0\x1b\xc2\x60\x38\x82\x7e\xef\x74\xe4\x4a\x98\x3e\x63\x48\xdd\xc8\xbb\x8a\x88\xfb\xc9\xe3\xbe\x17\x25\xc9\x80\x8a\x13\x3a\x8f\x03\x60\x44\xcc\x59\x4c\x02\x08\x27\x20\x6e\xd4\x42\x14\xe8\xc0\x9b\x92\x24\x81\x90\x43\x4c\x05\x4c\x10\xda\x5a\x78\x6c\x0d\xbe\x03\x50\xab\x71\x07\xe4\xce\x6e\x67\x80\xc7\xde\x94\x44\x49\x92\xe1\x6a\xab\x15\x54\x51\x01\x23\x7c\x1e\x09\x08\x3c\xe1\xc1\x84\x32\x90\x58\xce\xfd\x1b\x32\xf5\x34\x51\x6d\xb7\x5d\xa6\xb3\x6d\x89\x87\x19\xa9\x43\xc7\x05\x9b\xfb\x02\x96\x16\xc0\x72\xf9\x0b\x30\x2f\xbe\x26\xf0\xc6\xa7\x11\xbc\x3f\x80\x94\x3c\x1a\xcd\xa7\x31\x87\x24\x91\x60\xd8\x9d\x61\x58\x2e\x91\x3b\xb2\x6d\x40\xc5\x60\x1e\x45\x90\x24\x1a\x68\x84\xb3\x1a\xf2\xb0\x15\x48\xc4\x09\x24\xc9\x5e\x33\x40\x1c\x40\x92\xc0\x18\xb7\xff\x7d\x5b\x83\x9d\xc7\xde\x2d\x49\x92\x0e\x9d\x86\x82\x4c\x67\xe2\xa1\x3d\xd6\x04\x2b\x70\x2b\x91\xec\x1a\x90\xbb\x0d\xf9\x01\x61\x3c\x9b\x0b\x6b\x32\x8f\x7d\x1c\x65\x3b\xb0\x77\x8a\x2d\x92\x11\x6a\xd7\xe1\xad\x6c\x59\x1a\xe4\xaa\xff\x51\x7c\x57\x43\x1f\xc3\x6a\xc5\x57\x29\x1e\xc8\x95\x3d\xd3\x52\xe0\x9b\x01\xce\x73\x63\xb9\x5c\x3f\x81\x12\xb0\xc2\x66\x72\x22\xb8\x94\x74\xc3\x79\xb3\x0e\xc9\x29\x3b\x5b\xdf\xf9\x0d\x65\x02\x29\x92\x6b\x73\xca\x88\x6c\xfd\xb7\x11\xec\xfa\xed\x2e\x70\xbd\x82\xdb\x2d\xe1\x38\x80\xb7\xc5\x96\x6c\xab\x2a\x63\xad\xc4\xca\xf1\x03\x57\xfa\xd1\x63\xfc\xc6\x8b\x7e\x3f\x1f\x0e\x60\xaa\xbe\xb3\x95\x16\xd5\x10\xa5\x43\x50\x40\xd0\xb5\xeb\xce\xa1\xb5\x1d\xb0\x3f\x7f\xb9\x7a\x10\xa4\xa3\xd4\xdc\xc9\x4b\x13\xca\xb3\xab\xa1\xab\xf8\x1c\x2d\x64\x17\xf1\x34\x47\xe7\x3c\x4e\x29\xc5\xe1\x20\x28\x78\x75\xf4\xae\xa5\xb2\x80\xd6\x96\x32\xac\x28\x75\x14\xa5\x15\x42\xd3\x01\x12\xb8\x53\x65\xb0\x24\x78\xdd\xb4\xe7\xd2\x60\xdb\x0e\x28\xcb\x9d\x9f\xa5\x46\x55\x36\x40\xe8\x2b\xe1\xb5\x1d\x98\x7a\xb3\xcf\x0a\xeb\x97\x30\x16\x84\x4d\x3c\x9f\x2c\x13\x39\x83\x06\x42\xa1\x9f\x7a\xb7\xc4\xae\x07\x75\x2c\xa5\x60\x1b\xa8\x61\x38\x59\x2f\x9c\xff\x76\x00\x71\x18\xc9\xf9\x53\x0a\x3e\x97\x94\xe8\x0b\x1c\xa0\x06\xaf\xc6\x64\x01\x68\xd5\x37\xc2\x9b\xf2\x4c\xa3\xcd\x8c\xdd\x49\x18\x09\xc2\xc0\x67\xc4\x13\x84\x83\x07\x31\xb9\x83\x89\x6c\x4c\x4d\x9b\x82\x41\x03\xa7\xa1\xf3\x16\x4e\x35\xa5\x26\x4e\x43\x28\x0c\x7c\x6b\x33\xa7\x87\xa7\x76\xae\x35\xa1\x6c\xea\x09\x0e\x9f\xbf\x28\xfe\x5b\xad\x85\x17\xcd\x09\x07\xf8\x9c\xdf\x0a\x9c\x1d\xcf\xce\x4b\x98\xd1\x6b\xea\x1e\xd3\x38\x08\x45\x48\x63\x38\x00\x5b\x53\xed\xd8\x71\x18\xa9\x33\xf1\x38\xf2\xe6\x9c\xc0\x24\xd6\xd2\x32\x31\x2b\x73\x74\x17\xae\x55\x21\x52\x90\x4b\xab\x65\xd6\x9b\x6b\x5e\x5a\xad\x16\x9a\xa3\xf7\x00\xd0\xfe\xf3\x7f\xfa\x67\xfd\x76\xc7\x6a\xb5\x4e\x24\xc9\xef\xb5\xc4\x72\xf7\x77\x1a\xc6\xf6\xc4\xd5\x2b\xe9\x40\x1b\x0e\x07\x3d\x68\x3b\x08\xfb\xc9\x63\xde\x94\xbf\x87\x89\xab\x96\xd5\xb1\x5a\x86\x93\x87\x71\x60\x36\xa2\xdb\x85\x0a\xa1\x87\x71\x60\x1b\x2e\xbb\xae\x9b\xb6\x67\x7b\xd4\xed\x02\x00\x32\xc5\x97\xd4\xe6\x78\x28\x7b\x70\x6b\x2e\x3b\x7a\x0a\x14\x5c\x25\xc6\x06\xa7\x1e\x0f\x70\x09\x07\x39\x3a\xf0\x5f\xb7\x9b\xa2\x3c\x00\x6f\x36\x23\x71\x60\xeb\x86\x8e\x5e\xb5\x26\x2d\xdb\x08\xdb\x71\x1c\x35\x3e\xd1\xd3\xbb\x15\x1c\x69\x53\xa7\xc8\xbb\xb4\xd5\x70\x4e\x63\xd2\x5b\x32\xc1\xbf\x14\xcf\x86\x6c\x15\xcb\x86\xec\x27\xe4\xd8\xf0\xac\x91\x61\x99\xe9\xca\x96\x64\xb4\xf2\x44\x2f\x2a\x49\x0a\x60\x24\x0a\x24\x94\x26\xf6\x04\x1b\x78\xc1\x8b\x90\x1e\x81\x06\xd5\x67\x39\x28\x17\x4f\xb7\xf5\x08\xf7\x59\x38\x93\xda\x99\x24\x55\x0d\xac\x19\x6d\x2f\x72\xad\x65\xbf\xa5\x68\x96\xf0\xc8\x46\x5f\x52\xc1\x9e\xcf\x18\xf1\x02\x65\x82\x71\x5f\x59\xde\x90\xe0\x76\xaa\x85\x2d\x50\xc1\x5b\x2c\xc7\x58\x86\xbc\xfb\x77\xde\x76\x50\x1f\x91\xf5\xc6\x0e\xe5\x58\x9f\x2a\xf4\x64\x2a\x70\xa6\x30\x16\x13\x7b\x9c\x11\xaa\xec\x00\x24\xc9\xb8\xb4\x3b\x88\x3c\x07\x97\x12\x39\xc6\x1d\x4f\xc5\x2c\xcc\x24\x6c\xa1\x0f\x05\x63\x25\xf2\x54\x68\xbb\x01\xa1\x93\x9a\xfd\x5f\x8c\x8b\xbc\x96\xf2\x5a\x6a\x1d\xab\xb5\x6a\xa2\x85\x53\xf4\x14\x5b\xa9\x54\x15\x1c\xa6\x92\xef\x34\x64\x01\x61\x47\x0f\xc0\x67\xc4\x0f\x27\xa1\x1f\x12\xe5\x3a\x0d\xcf\x7a\xfd\xb3\xa3\x07\x0c\xaf\xfe\x8b\x22\xcc\x7f\xab\x83\x20\x85\x57\x9b\x65\xf9\x34\xe6\x18\xea\xb5\xd0\x32\x72\x1f\x38\x65\x82\xc3\xd5\x03\x78\xdc\x27\x31\x46\x7b\x20\x87\x5b\xad\xc3\xf3\xe3\x74\xf4\x01\xb4\x0f\xcf\x8f\x31\xca\xeb\x76\x01\x05\x2f\x1b\x17\x90\xf2\xc0\x5e\xbf\x38\x12\xff\x36\x71\xe0\x80\xdc\xc9\x9e\xf4\xcc\x30\x0d\x78\x52\xa8\x9e\xdc\x19\x21\x1b\xd2\x23\x51\x75\xcb\x49\xd4\x9a\xaf\xc3\x05\x89\x41\xb2\x9d\xe7\x56\xbb\xea\xd4\x4b\x6a\xcf\x2d\xaa\xe7\x7e\xc2\xb1\x25\xf9\x0f\x47\x7f\x35\x9f\x5c\x34\x77\x72\x75\xd4\xb1\x55\x0a\x0f\x32\xb3\xa0\x8d\xc7\x50\xad\xb5\xd9\x1a\xa8\x5d\xc8\x49\x1f\x3a\x01\x28\x7b\x72\x47\x63\x20\xf7\x33\x46\x38\x0f\x69\x75\xa5\x75\xe6\x41\xf2\xd6\x6c\x5d\x7e\x43\x68\x55\xfa\xe9\x56\x7a\x2b\x31\x3b\x4e\xca\x47\x5a\x8d\x0a\x4e\x63\x4e\x98\x28\x7a\xd5\x59\x88\x28\x68\x16\x21\xac\xf7\x81\xe4\x62\x15\x42\x3b\xb8\x52\xbe\x4c\xef\x28\xef\x3b\x1b\x67\xd1\xb8\xb3\xf6\x5e\x35\x22\x2f\xc4\x0e\xdd\x2e\x5c\x13\x01\x5e\x14\x49\x42\x62\x1a\xff\x82\x5e\xa6\xf1\x70\xbd\x38\x80\x19\x23\x33\x8f\x11\xec\x9f\x4a\xeb\x83\x80\x5f\xe7\x84\x3d\x58\x00\x97\x7e\x07\x2e\xc3\x0e\x5c\x2e\x70\x87\x79\x14\xfa\xc4\xae\x90\xe3\xa6\x5e\x75\x07\xfe\x43\xba\xc5\xdd\x2e\xf0\xaf\x11\x84\x8a\x39\x12\x59\x07\x66\x2c\x9c\x7a\xec\x01\x6e\xc9\x03\xcc\x18\x5d\x84\x01\x09\x70\xc7\x39\xf9\x3a\x27\xb1\x4f\x2c\xc0\x41\x5c\xc8\x93\x68\x2c\x4d\xde\xe9\xe0\xbc\x7f\x36\x82\xd3\xc1\x68\xb8\x69\x5c\x6e\x8f\x61\xbf\x28\xc2\xb8\x06\x29\xbb\xb0\x0f\x63\x47\xe2\xfd\xe3\xf0\xc3\x45\xff\xbc\x0e\x36\xac\xc0\x9e\xf5\x47\x17\x67\x83\xd3\xc1\x6f\xb9\x7d\x38\x93\xf2\x10\xc6\xd7\xd2\xca\x8e\xf5\x92\x23\x7a\xad\xd6\x8a\x67\xd0\x1d\x79\xb7\x20\xd9\x3a\x3d\xec\xbd\x26\x4c\x45\x03\x72\x6b\x3f\xd0\xeb\xa2\xd7\x6f\x5a\x6d\xc5\x06\xe4\xba\xeb\xba\xca\xb2\xeb\x23\xec\xb2\x2a\x0b\x55\x09\x40\xff\x9c\xde\x21\x17\x83\x2b\xf7\xff\x90\xa0\x33\x7a\x57\x45\x1a\x4e\x80\xc8\x53\x86\xde\xb9\xe7\xbe\x17\xe7\xc3\x26\xdf\x8b\x93\xc4\xf9\x4f\x20\x45\x0a\xb5\x1e\xc4\x61\xd4\x01\x62\xe8\x32\x46\xa6\x4a\x5b\x07\x21\x95\xb5\xe8\xee\xc1\x49\x18\x23\x1f\x90\x34\xd4\x73\xe0\x44\x00\x9d\x80\x6f\x5c\x1e\x0e\x7b\x5d\x65\x34\x34\xe4\xb8\xba\x34\x69\x22\x38\x9d\x92\xdc\x30\x57\x29\x0e\x0e\x2a\xa8\x0d\x42\x48\x5f\xaf\x18\x14\x6c\xa0\x35\x97\x1c\xd9\x24\x9b\x90\x41\xc5\xf1\xdc\x96\x88\x25\x13\x5b\xc8\x43\xc6\x32\x26\xb5\x5a\x05\x16\x31\x86\xe6\x32\x53\x08\x4e\x22\xe2\x3f\x52\x21\xce\xfb\x1f\xfa\xc7\x23\x58\x2e\xcd\x1e\x49\x5c\x49\x02\x63\xd8\x97\x9b\x33\x3e\x39\x1b\x7e\xdc\x54\x4d\xcc\xa0\x4b\xfe\xd3\x08\xaf\x1c\x72\x70\x00\xb3\xeb\x7b\xb7\xcf\xd8\x80\x9e\xd1\x3b\xae\xfb\x8a\xa2\xbd\x32\x07\x2b\xe1\x93\xdd\xa8\xc3\xd1\x03\x7c\xd2\x42\xf0\xbf\xe4\x41\xc9\xbf\x4a\x87\x9a\xc9\x55\x2f\x76\xaa\xae\x37\xb3\x5b\x5c\x76\x6d\xb7\xd6\x9c\xa3\x87\xe5\xf2\xcd\xec\x36\xcb\xc9\x3d\x46\x93\xca\x48\xca\x07\xd2\xec\x36\xbf\x87\xb3\xdb\x6a\x66\x6e\x93\xb3\xe9\xa9\x3a\x21\x77\xa1\x49\x31\x64\xe7\x16\x3a\x21\xe1\x65\x20\x2f\x07\xcc\x6e\x53\x65\x39\x80\x37\xbf\x3e\xa7\x9d\x7f\x5b\x60\xe8\xae\x75\xa6\x8a\xfd\x25\x2b\x4f\x2e\xaf\x95\x57\xa3\x8b\x38\xfc\x3a\x27\xda\xb1\x49\x15\x49\xbb\xa8\x61\x70\x9f\x53\x9a\xd3\x38\x20\xf7\x84\x9b\x30\x25\x9c\x80\x8d\x7e\x10\x42\xb9\xa7\x5c\x23\xb2\x63\x2a\x4c\x93\xd6\x32\xc7\x29\x2b\x19\x76\x7f\x24\xe2\x86\x06\x49\x02\x13\x75\x68\x55\xf7\xeb\xea\x01\x34\x6c\x2e\xf8\x35\xb1\x6f\x2d\xae\xb2\xb2\x61\x9f\xca\x15\x7d\x67\x0d\x7b\xb3\x3b\x15\xd3\xcb\xfa\xf3\x86\x30\xf2\xbc\x5e\x94\x9e\xe9\x0f\x8f\x85\x48\x0b\xdf\xbd\x86\xd5\xcf\xa0\xbd\x87\x66\x25\xd3\x9a\x98\xf7\x1f\x8c\xaa\x31\xb6\x99\xb2\x3d\x4e\xdb\x18\xdb\x46\xdf\x72\x41\x7d\x55\xf5\x3e\x7a\xf1\x83\x72\xe7\xd2\x63\xa4\xe0\xc6\xc9\x7e\x54\x0d\x0e\x53\xfc\xdc\xd0\x3d\x29\x62\xcc\x54\x05\xd1\x6d\xe8\xe4\x7d\xfe\xb2\x4e\x3d\x70\xf7\x73\x20\xd1\x9c\x79\x91\x11\x81\xda\xd1\xd6\x6e\x7c\xc3\x86\x39\x5f\xfd\xc5\x9c\xbf\xc8\xe8\x1d\x4f\x99\x6c\x74\xae\xde\x0d\x2c\xeb\xcf\x26\x5c\x56\x6a\x11\x90\x09\x61\x72\x2a\xf7\x38\xa2\x9c\xd8\x32\x78\x95\x99\x41\x6c\x1b\x90\x7b\x61\x3b\x1a\xeb\x36\xa6\xa2\x70\xc2\xf2\x4d\x8f\xd8\x75\x87\xec\xfa\x95\xad\x37\x06\xc6\x1c\x6c\xca\x25\x03\xdf\xa4\x26\x69\x62\xa5\x11\x4f\x8d\x69\x31\xb9\xca\x70\xa2\xf8\xd3\x67\xcc\x76\xb6\xdb\xc3\x6c\x5c\xc9\x92\x35\x8e\xc8\xbb\xde\x17\xb3\xc0\x13\x64\xe7\xce\xb7\x41\x5b\x71\xbf\xeb\x6f\x88\xb7\xb0\x85\xa1\xe0\x25\x9f\x54\x99\xc4\xfa\x19\xb7\xf5\xd5\x9f\x94\x61\x52\x89\x4c\x64\xcb\x8a\xbc\x90\xb6\x19\x01\x8d\xdf\x09\x98\x4b\xa2\x65\x9a\x29\x67\xd1\xa4\x3a\x46\x44\x10\x5b\x61\xec\x94\x16\x6c\x70\xe4\xd2\x55\x2a\x1f\xc5\x1b\xd2\x54\x06\xcd\xaf\x69\x46\x8a\x88\xf9\x4c\x8e\xd3\x14\xe8\x1c\x6c\x4b\xaa\xf6\xbc\x74\x37\x10\x76\xc0\xcf\x72\xf0\x97\xbe\x34\xe0\x97\xf3\x4c\xe2\x2f\xe7\x1d\xf0\xf7\x31\x38\x68\xef\x5f\x86\x9f\xc3\x2f\xf2\xb6\x40\xe6\x9a\xd1\x74\xab\x0c\x5a\x2b\x67\x90\x2f\x3e\xf5\x0e\x47\xfd\x4d\x77\xfd\xbc\x3f\x92\x46\xb7\xd5\x2a\x26\xa8\xe6\xb9\x04\x95\x06\x18\x37\x06\x2d\x06\x60\x4d\x0e\x6b\x5c\xe0\x90\xc9\xfd\xe9\x4b\x80\xf7\xe9\x8a\x0b\x77\xae\xcb\x62\x58\x91\xa4\x46\xf9\x99\x8e\x07\x45\x4d\xfe\x88\xe8\x76\x81\xcd\xe3\x42\xba\x72\x47\xfe\x5c\x61\xae\x67\x0d\x96\xbe\x75\xb4\x94\x5a\xbe\xb9\x0a\x73\x42\x1d\x0b\xad\x0c\x98\x54\x48\xc4\xab\x56\x6e\x75\xfc\x93\xf2\xba\x6c\xaa\xb6\x0e\x75\x9e\x9a\x02\xf7\x82\xc0\x48\xb3\xa0\xaa\x72\xab\x03\x74\x41\x18\x0b\xe5\x15\x10\xb9\x0f\xb9\xc0\x8f\x5b\xf2\xc0\xa5\x4c\x32\xc2\x49\x2c\xd0\x48\xa3\x78\xa9\x5a\x2f\xa8\xa1\xa2\xc6\xea\x55\x4b\x42\x70\x4d\x59\x3d\x88\xbb\xba\xd2\xc9\x29\x14\x6e\xe8\xfc\x3d\x12\x61\x8a\x37\x9e\x68\x72\x71\x89\xc5\x02\xb2\x1c\x79\x49\x52\x6b\x86\x33\x1b\x5c\xb8\xfb\x7b\xa4\x41\x5e\x2e\x23\x12\x97\xa6\xfd\xb6\x36\x3a\xf5\xaf\x8d\xdd\x78\xb2\x95\x46\x15\x5d\x63\xa7\xa5\xcb\x5d\x17\xfb\x66\xbd\x5b\x99\xe9\xa2\xdd\x33\xa6\xba\x68\xa3\x93\xfa\x52\xc1\xf2\x8e\x97\xaf\x7b\xcd\x65\x6f\x49\x32\x8b\xbb\xdf\x3c\xec\xf5\x20\x78\x11\x59\xb3\xcd\xee\x62\x7a\xd2\x1a\xd4\x66\x90\x79\x5d\x0a\x19\x94\xc0\xaa\xbb\xee\x49\xc8\xb8\xd0\x15\xc7\x3a\xb9\xac\xf0\xfd\xd3\x2f\x6a\x94\x0d\xac\xb3\x0f\xbd\xfe\x87\xfe\xa8\xbf\x4d\xd2\x0b\xf5\x1b\x74\xf0\x5c\xb4\x06\x1b\xea\xfb\xeb\xd5\xcc\x77\xb8\x9a\xd9\x46\x3b\x64\x92\x6b\x53\x0d\xe9\x68\x32\xd0\xdf\xf0\xa2\x48\x6b\x07\x2f\xa8\xc7\x4f\x96\xe6\xfa\x99\xb4\xed\x35\xb1\xf5\x9a\xd8\x7a\x9e\xc4\xd6\x13\x32\x57\xca\xea\x6c\x98\xb9\x9a\x30\x3a\xdd\xa2\xac\x09\x04\xfe\x95\xb7\x6e\xdf\xee\x6e\xf9\x79\x0c\xcb\x9a\x7c\xcb\x77\x35\x36\xf5\x37\xc9\xcf\xe7\x21\xff\xb8\x77\xcb\x9b\xe4\x42\x72\xf2\x5c\xc8\x85\x28\xb9\xe3\xab\x1e\xdb\x34\x0c\xdd\xf1\xd5\xef\xb3\x2a\xc0\xa3\xc3\x58\x80\x6f\x7f\xd5\xfb\xac\x2a\x50\x33\xe9\x0f\xa3\x07\xdd\x3d\x94\x74\xb9\xc9\xba\xb0\x38\x44\xc1\xd6\xe5\xca\x82\xc2\x8d\x17\x07\x11\x81\x3b\x84\x30\x0f\x1d\x54\x61\x73\x7e\x50\xee\xf1\x62\x76\x53\xac\x93\x39\x00\x33\x25\xe2\x50\xf3\xb0\xc7\x4c\x6e\x8a\xc7\x75\xe9\x78\xe6\x50\x2b\x7d\x92\x30\x76\x19\x75\xc7\x60\x76\x5d\x37\xff\x76\x0b\xf6\xf2\xb4\xe5\x5f\x34\xe5\xda\xcd\x5b\x2c\x8d\xf2\x7d\xf6\xd9\x51\xe2\xa7\x9f\xef\xa4\x9f\x1d\xc9\x62\x45\x73\xef\x08\xf9\xa4\x28\x9d\x4e\x69\x0c\xe9\xf4\xd2\x0f\x0b\x3c\xe1\x5d\x79\x9c\x00\x9d\x11\xe6\xa9\xa0\x42\xdc\x78\x02\x7c\x2f\x86\x2b\x02\x73\x4e\x02\xb8\x0b\xc5\x0d\xe2\x42\x66\x72\x75\xee\x72\xf5\xf0\x41\x16\x2c\xe7\x55\x16\x92\x64\xec\x5a\xdd\x2e\x82\x8f\x6e\x42\x0e\xfc\x86\xce\xa3\x00\xee\x28\xbb\x95\x78\xd2\x19\xbb\xfc\x6b\xe4\xf6\x8e\x64\xed\x6f\xa1\x6d\x74\xef\xaa\x6d\x43\xd2\x53\x62\x97\x56\xab\x7f\x4f\x7c\xdb\xf0\xb3\xcc\x48\x1b\xa5\xf5\x98\x4e\xa7\x5e\x1c\x8c\xbc\x6b\x63\x84\xac\x96\x76\x6c\x9b\x86\xed\xe1\xb8\x33\xe3\x0c\x67\x23\xa4\x66\x35\x0c\x32\x63\x34\x8b\x3f\xd2\x80\x44\x92\x9b\x35\x2a\x2b\x57\xa2\x20\x72\xa2\xd7\x3b\x82\xde\x91\x05\x80\xa6\x04\xc5\xa6\x69\x2a\xab\xb9\xba\xbb\xf8\xc6\x73\xdb\xf2\x6e\x7b\x0a\x7b\x92\x2a\xc7\x54\x7a\xfb\xe2\x1e\xf4\xfb\x75\x8c\xb0\xf0\xff\x9a\x7c\xb7\x7a\xe6\xfa\x5d\xeb\xbe\x4d\x6a\xb9\x9e\xb6\xd7\xda\xef\x0d\x8f\xb2\x69\xf5\x1c\x9b\xae\xc9\xce\x6c\x77\x46\x4d\xdd\xde\xd1\x37\x2c\xfb\x5e\x95\x4b\x79\x62\x25\xeb\x8a\xca\xd5\x50\xbc\xe3\x05\xa9\x1a\xe7\xbd\xf1\x71\x45\xd9\x64\x75\x78\x93\xaa\xbd\x16\xb3\xee\x44\x70\x57\x94\xb1\xee\x42\x82\x5f\x62\x1d\xeb\x53\x42\x8d\x7f\x54\x9d\x6a\x49\x95\xaa\x71\x4b\x93\x6e\xbd\xd6\xae\x3e\x4e\x99\xd6\x54\xad\xee\x42\xa1\x5e\x7e\xd9\xea\x0a\xf5\xaa\xab\x5a\xd5\x3a\x31\x8c\x89\xd2\x02\x1a\x93\x7a\x3d\xa8\xd4\x9e\x96\xc4\x7f\x18\x93\x7a\x81\x57\x41\x50\x3e\xb8\xf8\x66\xa2\xbe\xe2\xe4\xd8\x4e\xca\x95\x8c\xa3\x7b\x24\x57\xe3\x66\xac\xd8\xb9\x90\xab\x09\x54\xf0\xf4\x1c\x4e\x4f\x0d\xfe\x17\x50\xce\xd3\x24\xd5\xad\x54\x82\x55\x40\x2c\x65\x38\xab\xaa\x2e\x86\x27\xef\xd4\xfb\x68\xfd\xdc\x78\xb5\x38\xeb\xd8\x79\x63\x81\x5e\x7f\xe7\xd4\x94\x56\x97\x15\x0a\x35\x83\x97\xbb\xaa\x7a\xfe\xc1\x14\xa1\x70\x5b\x94\xc9\xf8\x3a\x01\xff\x76\x37\x47\xaf\x17\x47\xdb\x5f\x1c\xfd\xa3\xee\x8d\xb4\x45\x39\x8c\x22\xed\x19\x46\x51\xbd\x39\xa9\xb5\x1c\x87\x51\x54\x67\x37\xb6\xb4\x11\x2f\xcf\x3a\xec\xdc\xe1\xdb\x50\xe3\x5f\x15\xfc\x55\xc1\xb7\x57\x70\x55\x7b\xab\x9c\x06\xc4\xb3\xdd\xe3\x83\xf5\x3e\x44\x0e\xff\xa6\x5e\xc4\xfa\x14\xe7\x33\x3a\x19\x1b\x97\xac\xae\x4d\x79\x46\x24\xb6\xf3\x67\xb0\xe3\xec\xba\xba\xd4\xae\x2f\x2f\x2d\xe4\x35\xe1\xa0\x09\xac\x90\xd2\x2c\x97\xa1\xd6\x78\x36\x8f\xaa\x98\xd9\xae\x1e\xb5\xa9\x6a\xb4\xc6\x95\xd9\x71\x81\xe9\x5a\x2f\xac\xb1\xb4\xd4\xac\x6b\x9d\x3b\x56\xa9\x17\x7d\xb5\xd3\xaf\x76\x7a\x73\x3b\xad\x6a\x02\x94\x9d\xd6\x37\xf7\xab\xc3\xbb\xec\xf7\xa4\x9a\x8d\x73\x0e\xe9\xe6\x21\x5e\xf6\xa3\x9e\x3b\xf0\xba\x1e\x51\x6a\xd0\x1c\x7a\x6d\x5f\x3b\xf0\xe8\xe0\x2b\x9c\xc0\x65\x47\x29\x8b\xd4\x75\x75\x0f\xda\x30\xa8\xe9\xd2\xa4\x1c\xdd\xef\xe2\x6e\xe4\x62\x26\xef\xd6\x9a\x7e\x7c\xb6\xf6\xc1\xa0\x5b\x73\x6a\xff\xc8\xf7\x8f\x35\x87\xef\x33\xdc\x28\xea\xb3\x72\xbc\xe1\xa5\xa2\x01\x1f\x0e\xe0\x78\x38\x38\xf9\x70\x7a\x3c\x02\xbb\xf4\xce\xd1\xc0\xf4\x86\xa0\xbd\x05\xe3\x06\xac\x73\x01\xa0\xff\xff\xc7\x1f\x2e\x7a\xfd\x9e\xdb\x04\x9c\x02\x94\xe8\xd9\x79\xb5\xda\x96\x97\x9c\xa5\x63\xf6\xe5\xde\x79\x66\xc9\x66\x59\x21\xbe\xf1\x93\x3a\xd4\xc4\xc6\xab\x9a\x76\x75\xe5\xe9\xfb\xdf\xda\x81\xa5\x22\x32\x78\x7d\x55\x57\xfb\xaa\xee\x3b\xfd\x2a\xde\xcb\xb1\x4c\x5a\xac\x14\x97\x3f\x84\x5c\x24\xc9\x8f\x61\x9e\x1e\x55\xb9\x5f\x63\xa4\xbe\xdb\xb3\x99\xb7\x6f\xd5\x77\x9d\x3b\xfe\xf4\xa2\x3f\x14\x54\x14\x6a\xf4\x0b\x16\x84\x09\x0e\x74\xce\x52\xf5\x90\x75\x4f\x9c\x4e\x89\xb8\x41\xed\x96\x41\xf4\xd7\x08\x02\x16\x2e\x08\x93\xf5\x6b\xf3\x38\x20\x8c\x0b\x2f\x0e\x94\x99\x2a\x9c\xdf\x0d\xbf\xbc\xde\x01\x3a\x99\x70\x82\xd6\x01\xed\x8f\x9f\x3e\xf5\xec\x40\x98\xfb\x5e\x14\x23\x4a\x34\x46\xad\x18\xd9\xa6\x47\xef\xc3\xaf\xea\x6d\xa8\x4f\x23\x19\x8f\x65\xef\x43\xcd\xfc\x4b\xab\xd5\xf2\x73\xbf\xc4\xdc\x81\x71\x7b\xbc\xef\xd3\x68\x7f\xdc\x1e\x3b\x56\xab\x15\x66\x9d\xa8\x23\x6f\xda\xfb\x5c\x30\x64\x85\x7b\x2a\xa8\x67\xc7\x0e\x02\x2d\x72\x61\xa9\x9c\x08\x1b\xe3\xfd\x7d\xab\x95\xfd\x28\xae\xdf\x81\xb0\x03\x0b\x2b\xb1\xfe\x15\x00\x00\xff\xff\xb5\x4c\x53\xdc\xc9\x64\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xb, 0xdf, 0xa1, 0xc6, 0xe7, 0x71, 0xc0, 0xf3, 0xc2, 0xeb, 0x6a, 0x92, 0x47, 0xf1, 0xf7, 0x5c, 0x24, 0x5b, 0x12, 0x20, 0xfe, 0xa1, 0xab, 0x54, 0xab, 0x3f, 0xc0, 0x5f, 0xf8, 0x2d, 0xbb}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xd1\x6f\xdb\xb6\x13\x7e\x16\xff\x8a\x83\xd0\x07\xb9\x31\xe8\xdf\x73\x81\xfc\x80\x26\xd6\xb2\x0c\x9d\xed\xb9\x1e\x86\x62\x18\x56\x9a\xa2\x24\x2e\x12\xa9\x92\x54\x1c\xc3\xd0\xff\x3e\x1c\x29\xc9\xae\xda\x04\xeb\x63\xde\xc4\xe3\xdd\x77\xf7\x7d\x3c\x1e\xd5\x30\xfe\xc0\x0a\x01\xa7\xd3\x1b\xba\x61\xae\xa4\x9b\x60\xe8\x3a\x42\x64\xdd\x68\xe3\x20\x21\x51\x5c\x48\x57\xb6\x7b\xca\x75\xbd\xf8\x87\xf1\x07\xbe\x68\x8a\xa7\x98\xcc\x08\x59\x2c\xe0\x2e\x5d\xa5\xdb\xf7\xbb\x74\x09\x37\x9f\x60\xb3\xbe\x5b\x53\x58\xae\x61\xb5\xde\x41\xba\xbc\xdf\x51\xef\xb3\xbc\x01\x69\xc1\x95\x02\xb8\xae\x6b\xad\x40\x2a\x27\x4c\xce\xb8\x80\x5c\x1b\xc8\x98\x63\x7b\x66\x05\xe8\x46\x18\xe6\xa4\x56\xe8\xcc\x1c\x70\xa6\x60\x2f\xa0\xb5\x22\x83\x83\x74\x25\x62\xb9\x63\x23\x2c\xe4\x46\xd7\x60\x79\x29\x6a\x06\x9f\x4f\x27\xa0\x1f\xfd\x37\x5d\xb1\x5a\x40\xd7\x7d\xa6\xb0\xd2\x4e\x04\x14\x57\x4a\x8b\xf9\x31\x9a\x55\x56\x03\xd7\x8d\x14\x19\x16\xa1\x41\x30\x5e\x82\xce\x7d\x71\x8e\xed\x2b\x01\xbd\x26\x96\x92\xc5\x02\x43\x76\x18\x6e\x4b\xdd\x56\x19\x1c\xb4\x79\xf0\x95\x8c\x35\x2f\xec\x97\x8a\x2e\x6f\x80\xa9\xec\x6b\xdb\xee\x89\x12\xac\xd5\x93\x1f\xe9\x9e\x48\x94\x3e\x09\x9e\x58\x67\xa4\x2a\xe6\x40\x29\x1d\x37\x4f\xdd\x0c\x92\xa6\x78\xa2\xb7\xba\xae\x99\xca\x76\xac\x98\x83\x30\x46\x9b\x19\x89\x7e\x6b\x85\x39\x3e\x1f\xf6\x16\xe3\xb6\xfa\x60\x27\x11\x5b\x7d\x78\x36\x68\x88\x21\x9d\x3f\xa4\x0f\xba\x80\xbc\x55\x1c\xf5\xa7\xb0\x7e\x14\xc6\xc8\x4c\x04\xf5\x3c\x65\x94\xa8\xd2\x45\x21\x0c\x0a\x76\xd4\xad\x01\x5e\x6a\xc9\x05\x79\x64\xc6\x87\x5f\x7b\x80\x67\x13\x9e\x42\xa2\x5b\xad\x32\xd9\x9f\x72\x6b\x94\x05\x06\x95\xb4\x0e\x41\xf9\x79\x0b\x4f\x07\xbd\xed\x97\x0a\x78\xc5\x5a\x2b\xac\x17\xb9\x61\x86\xd5\x96\x60\xa2\x0b\xa4\x04\x23\x2d\x66\x1c\x6d\x33\x48\x30\x76\x28\x26\xc4\xc1\x9f\x7f\x5d\x94\xe4\xc5\xea\x05\xc3\xa3\x41\x1e\x87\x52\x18\x81\x7e\x21\x30\x18\x0b\xa3\xdb\x66\x7f\x9c\x9a\xb5\xc9\x84\xf9\xd6\x5c\xc9\x5a\xba\xa9\x11\x15\x94\xca\x11\x12\x61\xcb\xff\x3d\xf7\x5c\xe1\xdd\x35\x18\xa6\x0a\x01\xa1\xfe\x13\x89\xa2\x40\x16\x77\xd0\x46\x6f\xfd\x32\x99\x91\x28\xb2\x07\xe9\x78\xd9\xab\x41\x77\xd8\x5c\x3e\x00\xaf\x4e\xfc\xc7\xcf\xe9\x36\x8d\xdf\x91\x28\xf2\xe9\x8c\xc8\x27\x64\x71\xa7\x4f\xed\xb5\xb8\xc8\x1d\x00\x37\x41\x21\x84\x8c\x22\xe9\xca\xab\x2b\xff\xe5\x91\xae\x81\x35\x8d\x50\x59\x82\xab\x39\xc4\x6f\xe2\x2b\xeb\x0c\xd7\xea\x91\xde\x3b\xcd\x12\xe9\xca\xd9\xcc\xbb\xf7\x3a\x8f\x01\x61\xdd\xe7\xf4\x2e\xbe\x92\x5e\xe6\xd1\x2d\xac\xe7\x90\xd7\x8e\x7e\x6c\x8c\x54\x2e\x4f\xfa\xba\x7e\xd2\xa6\x66\x6e\xee\x29\x51\x4a\x7d\x9e\xc0\xf9\x6e\xbb\xfe\x7d\x03\x37\x9f\x5e\x0f\xed\xb1\x91\x46\xc7\xc1\xf2\x83\xd4\xd7\xdb\x65\xba\x7d\x55\xd4\xc7\xcb\x32\x3a\x0e\x96\x1f\xa4\xfe\xe1\xfe\xd7\xfb\xdd\xeb\xe1\xdd\x4f\x83\xd1\x2d\xac\xff\x33\xe7\x4c\xe4\xac\xad\x9c\xa7\x6b\x04\x0e\x4c\x1c\x89\xc3\x3c\x0b\x30\x29\x4e\xb0\x3c\x89\x5b\xf5\xa0\xf4\x41\x9d\xc7\xa8\x7f\x2d\x63\x84\xe9\x48\xd4\x11\x12\x2d\x16\xd0\xb4\x0e\xc4\xa3\x30\x47\x57\x4a\x55\x80\xd3\x85\x70\xa5\x30\xfd\x44\x6b\xdd\xc5\xdc\x92\x39\x54\x42\xf5\x77\x73\x06\xff\x87\xff\x79\xcd\xd0\xe9\x7c\x88\xad\x9b\xf7\xd3\x07\xbc\x54\x52\x15\x96\xfe\xa2\xa5\x1a\xef\x74\x0c\xef\x57\x4b\x88\x91\x4e\x37\x82\x0e\x7d\xff\x22\xec\x70\xc1\xa7\xc8\xe7\x4b\x13\xcf\xa7\xc0\x43\x57\xbd\x08\x3c\x5c\x9f\x29\xf0\xb9\x25\xbf\x05\x0e\x07\xf7\x22\xac\x6f\xcd\x29\xe6\x70\xe0\x67\x44\x32\x9e\xe4\x57\xb9\x3d\x04\xc4\xb3\xf3\xe1\x2a\x59\x91\xc9\xa3\x79\xfe\x99\x08\xbf\x17\xdf\xd9\xc0\xea\x86\x67\x03\xde\x86\xaf\x01\x26\x3c\x2e\xd6\x99\x96\xbb\x1e\xe0\xd2\x84\xa1\xfe\x61\x01\x18\x9a\x20\x34\xe5\xb8\xdc\x7c\xe7\x1d\x25\xdd\xbf\x01\x00\x00\xff\xff\xdf\x8d\x80\xfb\x49\x0a\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x39, 0xc9, 0xfb, 0x16, 0x3b, 0x90, 0x8e, 0xb, 0x71, 0x7f, 0x2e, 0x40, 0x97, 0x5f, 0xc0, 0xd7, 0x80, 0x64, 0x72, 0xdb, 0x2b, 0x2d, 0xef, 0xf3, 0xce, 0x72, 0x93, 0xff, 0xaf, 0x1a, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
