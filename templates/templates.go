// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\x4d\x7e\x8a\x2d\x27\x4d\xa9\x58\xa5\x9a\xff\x4b\xff\xcf\x37\x13\xdb\x72\xcf\x3d\x47\xf2\xf9\xa1\xbd\x4e\x26\x23\x31\x14\x64\xb3\xa6\x00\x05\xa0\x64\x6b\x34\xfc\xee\x37\x8b\x07\x12\x14\xa9\x27\x3f\x25\x69\xec\x57\x32\xb0\x58\x2c\x16\xbb\xbf\x5d\x2c\x20\x8d\xc3\xe8\x26\xbc\x22\x30\x9f\xbf\x0a\x4e\xc3\xf4\x3a\x38\x55\x0d\x59\xe6\xba\xf1\x68\xcc\x78\x0a\xbe\x0b\xe0\x45\x8c\xa6\xe4\x2e\xf5\xf0\x33\xa1\x11\x1b\xc4\xf4\xaa\xf5\x97\x60\xd4\x73\x1d\x8f\x70\xce\xb8\xc0\x4f\x22\xe5\x31\xbd\x92\x1f\xd3\x78\x44\x3c\xd7\x75\xbc\xab\x38\xbd\x9e\x7c\x0a\x22\x36\x6a\xfd\x15\x46\x37\x51\x6b\x7c\x75\xe7\xb9\x0d\xd7\x6d\xb5\xe0\xd7\x76\xa7\x7d\xf6\xee\xa2\x7d\x08\xfb\x7f\xc2\x69\xf7\xd7\x6e\x00\x87\x5d\xe8\x74\x2f\xa0\x7d\x78\x7c\x11\x48\x9a\x36\xe7\x28\xdd\x45\xf8\x29\x21\xc1\x69\x28\xa2\x30\xc9\xb2\x0e\x4b\x8f\xd8\x84\x0e\x80\x93\x74\xc2\x29\x19\x40\x3c\x84\xf4\x5a\x2d\x44\x91\x76\xc2\x11\xc9\x32\x88\x05\x50\x96\xc2\x10\xa9\xdd\x69\xc8\xd7\xf0\xdb\x03\xb5\x9a\xa0\x43\x6e\x7d\xaf\x20\x3c\x08\x47\x24\xc9\xb2\x82\x97\xa7\x56\x50\x65\x05\x9c\x88\x49\x92\xc2\x20\x4c\x43\x18\x32\x0e\x92\xcb\x79\x74\x4d\x46\xa1\x16\xca\x0b\xbc\x45\x39\x3d\x37\x9d\x8d\x49\x1d\x3b\x91\xf2\x49\x94\xc2\xdc\x05\x98\xcf\x7f\x06\x1e\xd2\x2b\x02\xaf\x22\x96\xc0\xee\x1e\xe4\xe2\xb1\x64\x32\xa2\x02\xb2\x4c\x92\x61\x77\xc1\x61\x3e\x47\xed\xc8\xb6\x0e\x4b\x3b\x93\x24\x81\x2c\xd3\x44\x17\x38\xab\x11\x0f\x5b\x81\x24\x82\x40\x96\xbd\x59\x4e\x40\x07\x90\x65\xd0\xc7\xed\xdf\xf5\x34\xd9\x39\x0d\x6f\x48\x96\x35\xd9\x28\x4e\xc9\x68\x9c\xce\xbc\xbe\x16\x58\x91\xbb\x99\x2b\xb5\xdf\x83\x31\xbb\x62\xc1\x19\xbb\x85\x3d\xf0\xdf\x54\xd7\xdb\xf0\x69\x9c\x28\xdd\x1e\x92\x88\x0d\x08\xc4\xa3\x71\x42\x46\x84\xa6\x22\x1f\xeb\x0e\x27\x34\x02\xbf\x18\x7d\x7e\xcd\x78\x9a\x65\x50\xc7\x50\xf3\xf1\xab\x9b\x19\xd3\x94\xf0\x61\x18\x91\x79\xd6\x50\xfb\x2e\xd5\xdc\xab\x50\x36\x81\xdd\xa0\xba\x2b\x1d\x41\xed\x12\x5c\x40\x85\xff\xc0\x6e\x24\x3b\xd0\x46\x0a\xc3\x51\x1a\xb4\x71\x96\xa1\xdf\xaf\x0a\x33\x90\x52\xee\x82\xf7\xe3\x85\x67\xac\x36\x04\xaf\x86\xbf\xd7\x6f\x56\x25\xc1\x49\x71\xf3\xdf\x54\xa5\x87\x3d\x5b\x2f\x5a\x55\x6e\x2e\x16\x8d\x13\xdc\x9d\x56\x0b\x3a\xe4\x76\x43\x6b\x85\x98\x8e\x27\xa9\xda\x06\xf4\x94\x06\xbc\x39\xc6\x16\xb9\x60\xcd\xf7\xb5\x6c\x99\x67\x9a\xb9\xea\xbf\x97\x57\xa8\xa1\xf7\x71\x04\x65\xf5\x52\x0f\xa0\xcc\x03\xaa\x56\x6d\x88\x7f\x2e\xdc\x64\x92\x24\xc8\x4e\xf5\x00\x50\xfd\xbf\x19\xae\x76\x42\x72\x5c\xc7\x52\x9b\xff\x0a\x5f\x38\xa6\x82\xf0\x54\x4e\x87\x2e\x21\x17\x6b\xbc\x60\x3e\x5f\xbf\x4e\x85\x42\x25\x8f\x17\x24\x15\x12\x0e\x8d\x7b\x1a\x75\x2e\xf5\x1b\x35\xeb\x22\x23\x5f\xff\x6f\x0c\xa9\x1e\x13\x4a\x9b\x5f\xe1\x1d\x2c\xf0\xd8\x83\xd7\xe5\x96\xc2\x62\xaa\x46\x9a\xa1\x0a\xea\xf7\x05\xed\x75\xe9\xb6\xdc\xc6\x49\x82\x5a\x90\x4a\xe8\x9b\x7e\xd4\x02\x64\x59\x1f\x52\x06\x9d\xcb\x93\x13\xe4\xdb\x2f\x0b\xd3\x97\xae\x37\x49\x92\xb5\xaa\x5a\x3a\xf9\xa2\xd2\x96\x5a\xc8\x1a\xbd\x2d\x37\xba\x2d\x55\x68\x59\x9e\xf5\x11\x15\xf8\x3e\xe4\xe2\x3a\x4c\x7e\x3b\xef\x76\x60\xa4\x3e\x17\x76\x53\x06\x11\x74\xf9\x94\x01\x92\xae\x55\x8d\xc5\xd6\x6f\x80\xff\xe1\xe3\xa7\x59\x4a\x9a\x0a\x61\x1b\x36\x44\x60\x08\x09\x34\x75\x95\x5f\x43\x23\xc7\x25\x1d\x59\x72\x4e\x68\x2e\x29\x0e\xc7\xbd\x0c\xeb\xe4\x5d\x2b\x65\x89\xad\x2f\x81\x49\x49\x6a\xc7\x02\x5b\xd0\x7c\x80\x24\x6e\x56\x75\x2d\x05\x5e\x37\xed\xb9\xcc\x91\xfc\x06\xa8\x64\xc9\x9e\xa5\x06\xff\x36\x60\x18\x29\x28\xf0\x1b\x30\x0a\xc7\x1f\x14\xd7\x8f\x56\x68\x93\x33\x68\x22\x84\x90\x51\x78\x43\xfc\x7a\xd2\x86\xab\x50\x73\x03\x6c\x5d\x0d\x98\x32\x00\x6e\x63\xd2\x3f\xec\x61\x1c\xd2\xf1\x12\xff\xb4\xc0\x1f\x16\x10\xec\x63\x6d\x30\x5b\xce\x58\xf3\x2b\x24\xce\xf1\x78\x89\x88\x0b\xce\xbb\x20\xd7\x76\x52\x55\x9c\x54\x09\x92\xe7\x50\x6e\xb1\xf5\x9a\x71\x1e\x2b\x31\x24\x54\x32\x9f\x22\x52\xac\x35\x0a\x45\xea\x0f\x3e\xa9\x91\x87\xfb\x0d\xf0\x4d\xf6\x54\xe7\x89\x39\xfd\x32\xb3\x56\xe9\xc1\x51\x9c\xa4\x84\x43\xc4\x49\x98\x12\x01\x21\x50\x72\x0b\x43\xd9\x98\x27\x03\x8a\x06\x53\x02\x4d\x6d\xe7\x04\xaa\x29\x4f\x0a\x34\x85\xe2\x20\xb6\x4e\x0c\xf4\xf0\x3c\x33\x70\x86\x8c\x8f\xc2\x54\xc0\x87\x8f\xca\xb8\x5d\x67\x1a\x26\x13\x22\x00\x3e\xd8\x76\xbe\x10\x81\x0f\x18\x1d\xc4\x69\xcc\xa8\x0c\xc0\x8a\xa9\x95\x87\x1e\x24\xe1\x44\x10\x18\x52\xad\xf5\xa1\x59\x59\x43\x77\xe1\x5a\x15\x23\x45\x39\x77\x1d\xb3\x5e\xab\x79\xee\x3a\x0e\x86\x80\x5d\x00\xf0\xfe\xf8\x57\xfb\xac\xed\x35\x5d\xc7\x39\x92\x22\xef\x6a\x38\x10\xc1\x6f\x2c\xa6\xfe\x30\xd0\x2b\x69\x82\x07\xef\x3a\x87\xe0\x35\x90\xf6\x34\xe4\xe1\x48\xec\xc2\x30\x50\xcb\x6a\xba\x8e\xd1\xe4\x3b\x3a\x30\x1b\xd1\x6a\x41\x45\xd0\x77\x74\xe0\x1b\x2d\x07\x41\x90\xb7\x17\x7b\xd4\x6a\x01\x00\x2a\x25\x92\xd2\x5a\x3a\x94\x3d\xb8\x35\xbd\xa6\x9e\x02\x51\x41\x61\x84\xe1\xa9\xc7\x03\xf4\x60\xcf\x92\x03\xff\x5a\xad\x9c\xe5\x1e\x84\xe3\x31\xa1\x03\x5f\x37\x34\xf5\xaa\xb5\x68\xc5\x46\xf8\x8d\x46\x43\x8d\xcf\xf4\xf4\x41\x85\x47\xde\xd4\x2c\xeb\x2e\x6f\x35\x9a\xd3\x9c\x4c\x16\x8e\xff\x29\x9d\x75\xf9\x2a\x95\x75\xf9\x77\xa8\xb1\xee\xd9\x52\x85\x15\x71\xa1\x58\x92\xf1\xca\x23\xbd\x28\x99\x62\x14\x64\x24\x19\x48\x2a\x2d\xec\x11\x36\x88\x52\x92\x2c\x93\x57\x4d\x6a\x85\x83\xa2\xed\x90\x88\x88\xc7\x63\xe9\x9d\x59\x56\xf5\xc0\x9a\xd1\xfe\xd4\x6a\xad\x49\xba\x2c\x58\x32\x31\x4c\xd1\x9e\x8f\x39\x09\x75\x78\xc0\x7d\xe5\x36\x90\xe0\x76\xaa\x85\x4d\xd1\xc1\x1d\x6e\x29\x96\xa3\xee\x7e\x14\x5e\x03\xfd\x11\x55\x6f\x70\xc8\x52\x7d\xee\xd0\x78\x0c\x3c\x1f\xf3\x98\xa6\xf2\x1c\x68\x26\x57\x38\x80\xe9\xe9\xc2\xee\x20\x73\x8b\x2e\x17\xb2\x8f\x3b\x9e\x9b\x59\x5c\x58\xd8\x54\x87\x2b\x83\x12\xb6\x14\x1a\x37\x2c\x05\x1d\x30\xc2\x23\x02\x5e\xec\x41\x71\x8a\x94\x91\x52\x15\x02\x2a\x5a\x2a\xc7\xfa\x78\x08\x53\xd8\xb3\xa3\xe4\xea\xd5\x5b\x2b\x41\x46\xc5\xaa\x1b\xa5\xa3\xb2\x2d\x87\x89\xd8\x1b\x33\xb6\x99\x3a\xdb\x69\x61\x6a\xb4\x60\xcd\xec\xe4\x42\xad\xca\xa5\xbb\x7c\x40\xf8\xfe\x0c\xc4\x98\x44\xf1\x30\x8e\x62\xa2\x52\xe9\xee\xd9\x61\xfb\x6c\x7f\x06\xfb\x7f\xc2\x3f\x18\xd2\xfc\x53\xc5\xae\x9c\x5e\xd9\x97\x1b\x31\x2a\x52\xf0\x5d\x07\xc1\xfc\xfc\x00\x04\xe3\xa9\x80\x4f\x33\x08\x45\x44\xe8\x00\x53\x45\x39\xdc\x75\xb0\xd7\x8c\xde\x03\xef\xdd\xf9\x81\xe7\xca\x61\x87\x6d\x7b\xdc\x80\x2c\x0e\x94\xfd\xd6\x48\xfc\xdf\x94\xe2\x3a\xe4\x56\xf6\xe4\x61\xce\x34\x60\x70\x53\x3d\x56\x58\x93\x0d\x6b\xe2\xa8\xa4\xb1\xc2\xa8\x62\x22\x45\x51\x9a\xb9\x8a\xa7\x84\x82\xd4\xbf\xb0\x74\xb2\x2a\x9c\x67\xb5\x01\x99\x69\x09\x1f\x10\x8f\xe5\x2e\xc1\xfe\x9f\xcb\x43\x32\xb3\x42\x72\x53\xc5\x63\x7d\x3e\xad\xe2\x9d\x46\xc5\xae\x5a\xeb\x72\x98\x53\x7b\x65\xbb\x84\x39\xa1\xe2\xbe\x53\x20\x77\x63\x4e\x84\x88\x59\x75\xa5\x75\xb8\x27\x75\x6b\x36\xd8\xde\x36\x56\xf5\x1c\xb6\x15\x20\x49\xce\x8d\x46\xae\x47\xe6\x56\xec\x5f\xe7\xac\x61\xcd\x29\x46\x1d\x1d\xf3\x73\xe5\xfa\xe4\x4e\x2e\xb6\x92\xc2\xd6\x54\xbd\xf2\x7c\xb7\xae\x0e\x57\xca\x73\x5b\x2d\xb8\x22\x29\x84\x49\x22\x05\xa1\x8c\xfe\x8c\x90\x65\xce\x45\x21\x1d\xc0\x98\x93\x71\xc8\x09\xf6\x8f\x24\xac\x22\xe1\xe7\x09\xe1\x33\x17\xa0\x17\x35\xa1\x17\x37\xa1\x37\xc5\x1d\x16\x49\x1c\xd5\x54\x14\x83\xfc\x2c\xd6\x84\x5f\xe4\x61\xaa\xd5\x02\xf1\x39\x81\x58\x29\x47\x32\x6b\xc2\x98\xc7\xa3\x90\xcf\xe0\x86\xcc\x60\xcc\xd9\x34\x1e\x90\x01\xee\xb8\x20\x9f\x27\x84\x46\xc4\x05\x1c\x24\x52\x19\x62\xfb\x12\x17\x8f\x3b\xe7\xed\xb3\x0b\x38\xee\x5c\x74\x37\x2d\xd1\xf9\x7d\xd8\x29\x9b\x30\xae\x41\xda\x2e\xec\x80\xc6\xdb\xdf\xdf\x9d\x5c\xb6\xcf\xeb\x68\xe3\x0a\xed\x59\xfb\xe2\xf2\xac\x73\xdc\xf9\xd5\xda\x87\x33\x69\x0f\x31\xbd\x92\x08\xdd\xd7\x4b\x4e\xd8\x95\x5a\x2b\x86\x87\x5b\xf2\xd3\x94\x14\xeb\x0c\xb1\xf7\x8a\x70\x15\x3b\xe4\xd6\x9e\xb0\xab\xf2\x41\xcb\xb4\xfa\x4a\x0d\xa8\xf5\x20\x08\x54\x70\xd2\xb1\xb9\xa6\xcc\x59\xb5\x00\x3c\x78\xb0\x5b\xd4\xe2\xe0\x53\xf0\x1f\x14\xe8\x8c\xdd\x56\x99\xc6\x43\x20\x32\x7c\xb2\xdb\xe0\x3c\x0a\xa9\x7d\xae\x8a\x42\x9a\x65\x8d\xff\x07\x52\x96\xb0\xa8\x9d\x36\x81\x18\xb9\x0c\xc8\xd4\x15\x90\x8b\x2a\xab\xb2\xeb\xf7\x21\x9d\x3d\xb2\xab\x20\xcb\x25\xee\x72\x9a\x4c\x78\x98\x18\x45\x61\x3a\x6b\xfc\xe6\xc3\xc7\xd5\x9e\xe3\xf4\x96\x71\xd9\xdd\x83\xda\xc1\xf3\x4c\x25\x4b\xbd\x3a\x7f\xcd\x93\x94\x65\x5c\x11\x95\xeb\xf4\x47\xb8\xf4\x86\xda\x73\x6a\x5e\x02\x77\x1c\xdc\x4a\xce\x8b\xbd\x72\x1c\x03\x59\xcb\xd6\x21\x59\xbb\x8e\x93\x95\x27\x2e\x4b\x95\xc3\xe6\x72\x2e\x55\xa1\x65\x36\xb8\x7e\x7a\x6d\x19\xf3\x79\xeb\x0d\x1c\xc5\x14\x3d\x04\x8d\x16\x23\x80\x2c\x61\xb2\x21\x44\x26\xb0\x0a\x78\xd3\x52\xe1\x44\x53\xf6\xab\xfa\x97\xc1\x43\xb0\x11\xb1\x86\x05\xca\x4e\x70\x50\xc9\x42\x90\x42\x1e\x6f\xca\xf1\x7b\x03\x3c\xed\x09\x74\xa0\x7c\x5f\xca\xe3\x85\x2f\x19\x4b\xf7\xaa\xd9\x92\x92\xf3\xa0\xf2\x33\x0b\x2a\x05\x49\x48\x74\x4f\xa8\x3c\x6f\x9f\xb4\x0f\x2e\x60\x3e\x37\xde\x2b\x79\x65\x19\xf4\x61\x47\xba\x6d\xff\xe8\xac\xfb\x7e\x53\x00\x35\x83\x7a\xe2\xbb\x81\x35\x39\x64\x6f\x0f\xc6\x57\x77\x41\x9b\xf3\x0e\x3b\x63\xb7\x22\xaf\x7e\xd9\xfb\xb6\xf2\x1a\xd5\x2d\x6a\x6e\xf7\x05\xca\xdc\x1d\xf6\x67\x70\xaa\x8d\xe0\xdf\x64\xa6\xec\x5f\xdd\x68\x9a\xc9\x55\x2f\x76\xaa\xae\x57\x63\x79\x59\x57\xdb\xad\x3d\x67\x7f\x36\x9f\xbf\x1a\xdf\x14\x37\x26\xf7\xf1\xa4\x45\x26\x8b\xd8\x3b\xbe\xb1\xf7\x70\x7c\x53\xbd\x37\xd9\x24\x6b\x79\xa8\x4f\xc8\x5d\x58\xe6\x18\xb2\x73\x0b\x9f\x90\xf4\xb2\x76\x25\x07\x8c\x6f\x72\x67\xd9\x83\x57\x6f\x9f\x32\x03\x78\x5d\x52\xe8\x63\xfb\x4c\x95\xfb\xb7\xec\x3c\x56\x81\xd9\x76\xa3\x4b\x1a\x7f\x9e\x10\x9d\xf2\xe6\x8e\xa4\x0f\x2f\xf1\xe0\xce\x72\x9a\x63\x3a\x20\x77\x44\x98\x63\x6e\x3c\x04\x1f\x33\x64\xa4\x0a\x8e\x85\x66\xe4\x53\x96\x9a\x26\xed\x65\x8d\xc6\xa2\x93\x61\xf7\x7b\x92\x5e\xb3\x41\x96\xc1\x50\x05\xad\xea\x7e\x7d\x9a\x81\xa6\xb5\xea\x3d\xa6\xdc\x53\xcb\x6b\xd1\xd9\xb0\x4f\x95\x47\xbf\xb0\x87\xbd\x7a\x3c\x17\xd3\xcb\xfa\xe3\x9a\x70\xf2\xb4\xf9\xb5\x9e\xe9\xf7\x90\xc7\x28\x8b\x78\x7c\x0f\xab\x9f\x41\x67\x0f\xcb\x9d\x4c\x7b\xa2\x9d\x3f\x18\x57\xe3\x7c\x33\x67\xbb\x9f\xb7\x71\xbe\x8d\xbf\x59\x45\xa1\xaa\xeb\xc9\x54\x5f\xa6\x73\x79\x18\x29\xa5\x71\xb2\x1f\x5d\x43\xc0\x28\x3f\x15\xac\x4f\x4f\xca\x1c\x0b\x57\xa9\x1c\x03\x96\x27\x79\xeb\x92\x7f\x58\x9a\xa6\xaf\x48\xfe\x1f\x27\x39\x5c\x9d\xad\xbf\x24\x8c\xae\x72\x37\x91\x2b\xd9\x38\x5d\x7d\x1e\xb8\xe8\x40\x9b\x68\x59\xf9\xc5\x80\x0c\x09\x97\x53\x05\x07\x09\x13\xc4\x97\x75\x0d\x59\x0d\xc7\xb6\x0e\xb9\x4b\xfd\x86\xe6\xba\x0d\x56\x94\x42\xac\xd8\x34\xc6\xae\x8b\xb2\xeb\x57\xb6\x1e\x0d\x0c\x1e\x6c\xaa\xa5\xe2\x7a\x79\xcd\xe1\x71\x29\x9f\x1a\x6c\x31\x95\xf8\x78\xa8\xf4\xd3\xe6\xdc\x6f\x6c\xb7\x87\xc5\xb8\x05\x28\xdb\xe8\x28\x7a\x39\x1e\x84\x29\x81\x51\x98\x46\xd7\x31\xbd\x92\xdc\x16\x30\xa7\xa9\x19\x62\xf7\x5b\xf3\xee\xd1\x20\x9b\x1e\x5f\xe3\x26\x92\x53\x4c\xef\x87\x73\x75\x73\x2a\xec\x53\x13\x6e\x54\x2f\xfc\xba\x0e\xbe\xaa\x02\x5e\xff\xbe\x30\x2f\x28\x6a\x44\xb1\x6a\x94\xaa\x08\x29\x4a\xb5\xc9\xff\x2b\x8a\x93\x8a\x6b\x13\x12\x42\xfd\xde\x54\x5e\x15\xf5\xa6\x56\x21\x63\x2a\xe9\xa5\xa4\x1a\x4b\x49\x3a\x19\x4b\xc6\x13\xb5\x75\xba\x32\xef\x48\xaf\x9e\x2c\x5c\x85\xc5\x4d\x88\x8a\x6a\x4e\x2f\x52\x85\x9b\x89\x35\xc1\xa4\x09\xd1\x0e\x1e\x0c\xbc\x9d\x5e\xfc\x21\xfe\xd8\x28\x60\x5b\xeb\x21\xa4\xfa\xa5\x4d\x3c\x04\xca\xcc\xb4\xf2\x69\x21\xc4\x22\x87\x4a\xe5\x05\x72\x1d\x93\x06\xba\xfe\x2f\x75\x45\xb8\x85\x67\xbb\xe5\xd7\xcc\x81\x32\x8e\x5d\x9c\x46\xf1\x37\xcc\x3d\xed\x1c\x8e\x8e\x26\xaa\xde\xeb\x58\x31\xe2\xf2\xf4\xf0\xdd\x45\x7b\x53\x6b\x3d\x6f\x5f\xc8\x38\xe0\x38\xe5\x72\xea\xc4\x2a\xa7\x6a\x82\x9e\xb0\xfe\xe9\xaf\xa9\xae\x3e\x53\x69\x15\x37\x67\x42\x4b\x95\xef\x6f\xaa\x2c\xf1\x3c\x75\x89\xc7\xc1\x46\x99\xf7\x29\xa3\x17\x8f\x83\x93\x45\x99\xc2\x9e\x3e\x4c\x12\x2d\x80\xb0\x91\x72\x45\xb9\x78\x73\xb4\xfc\x8a\x33\xc8\x17\x94\xfd\x42\x28\x8b\x86\xf5\x82\xb4\x2f\xc9\xfb\x4b\xf2\xfe\x85\x93\xf7\x47\x2f\x9d\x1b\xb6\x95\xe2\x79\xfd\x7b\xf1\x2d\x22\x57\x9c\x8a\x85\x8a\xb2\x1d\xaa\x1e\x5a\x69\x7f\xd0\xcb\x81\x6d\x02\xc7\x80\xd1\x9f\x52\x03\xb1\x08\xf2\x56\x39\x42\xba\x63\x42\xd2\x22\x68\x94\x17\xbc\x61\xf0\xa9\xc6\x9e\xb7\xdf\x51\x6c\x59\xb4\x84\x67\x88\x33\x3a\x6a\xe8\x70\x03\x6b\x83\x4d\x7f\xe9\xfd\xc8\x96\x01\x48\x6d\x67\x91\x86\xcb\x57\x6c\xbb\xf9\xf6\x94\x5e\x34\xcf\xcb\x37\x18\x59\x1e\x41\x9e\x28\x96\x29\x69\x9e\xe7\xe4\x50\x9a\xeb\x9b\x3e\x3d\x2c\x56\x87\x73\x98\x9e\xa8\x1b\x95\x58\x5f\xbb\xac\xbc\x9b\x51\xb7\x2f\xa2\x0a\xc9\xab\xaf\x5a\x72\x5d\x2f\xe2\xea\xd6\xb7\x2a\x0f\x7d\x87\x15\x0e\x06\xc6\x9a\x53\xed\xbc\x4d\x60\x53\xc2\x79\x2c\x5f\x2b\x92\xbb\x58\xa4\xf8\xe1\x86\xcc\x84\xb4\x49\x4e\x04\xa1\x29\x46\x14\x34\x2f\xf5\xdd\x43\xa8\x91\xa2\x06\xa2\xab\xdf\x66\xc1\x35\x15\x5f\x65\x09\x56\x7f\xe5\xad\x51\xfa\xb2\x86\x7e\x44\x86\x42\x98\x2f\x6c\x3c\x30\x3e\xe0\x12\xcb\x5f\x68\xb4\xc4\xcb\xb2\xda\x98\x51\x04\x8c\xd2\x33\xd5\x7b\x46\x8f\xf9\x3c\x21\x74\x61\xda\xef\x2d\xa0\xd8\x2e\xb0\x22\xa2\xe4\x57\x0e\x06\xe0\x1e\x7c\x76\x41\x91\xd7\x04\x14\x79\x0b\x51\x77\x1f\x58\xf4\x6e\x15\x4f\xca\x00\x6d\x62\x4a\x39\x98\x64\xf5\xdf\xb1\x5d\x34\xcd\xc5\x87\xd5\xc5\xb3\xea\x92\x0b\x2d\xbe\xe3\x5e\x36\xec\x25\x62\x7d\x13\x2f\x09\x36\x7b\x9f\x76\x28\x61\xab\xf6\x55\x8d\xa8\x7b\x56\x03\xca\x60\xd5\xcb\xf0\x61\xcc\x45\xaa\x6b\x56\xfa\xc1\x8d\xe2\xf7\xb5\x3f\x5e\x53\x60\x5d\x87\x0f\x87\xed\x93\xf6\x45\x7b\x9b\x87\x00\xd6\x75\x62\x19\x0c\xbe\x8e\xfa\xc5\x37\x55\x16\x7e\xb6\xd7\x6a\xdb\x38\x87\xac\xff\x6e\xea\x20\x4b\x0a\xba\x25\xef\xf8\xde\x6e\xfe\xbf\x23\x6f\x7b\xa9\x16\xbe\x54\x0b\x9f\xa6\x5a\xf8\x80\x72\xa0\x42\x9d\x0d\xcb\x81\x43\xce\x46\x5b\x7c\xb1\x01\xac\xef\xb9\xd7\xcf\xf3\x74\xcf\x6d\x9f\x04\x57\xd6\x94\x85\xbe\x28\xd6\xd4\xbf\xad\x7d\xba\xfc\xf8\xef\xfb\xda\x76\x93\x92\x8d\x65\xce\xa5\x92\x8d\x32\x3b\xb1\xea\xe7\x4c\x96\x0c\x7d\xe4\xc7\xb0\x4f\x69\xff\x0f\x3c\xc3\x3e\xe7\xcb\xd7\x27\xb5\xff\x9a\x49\xff\x26\x4e\xf0\xd0\x2b\x26\x41\x78\x5a\x89\x29\xea\x0b\x94\xa2\xfc\x3d\x0d\x65\x62\xfd\xa6\x2a\x13\x61\x66\x8c\x7b\x85\x7a\xd7\x3f\xec\x64\x71\xe8\x43\x98\x70\x12\x0e\x66\xaa\xbc\x68\x12\xe7\xfa\xe9\x9e\xf1\x7e\xc9\x79\xb4\x82\xa8\xb3\x51\x3d\x34\x58\x58\xe9\x02\x14\xbb\xce\x86\xe5\x4c\xa7\xbe\xd6\xe8\xac\x2a\x35\xfe\xa2\xc7\x6d\x57\x56\xec\x6d\x5e\x56\x6c\xff\xf7\xe0\xe4\xf2\xb0\x7d\x18\x78\x3b\xd1\x17\xae\x2d\xd6\x99\xd5\x3d\x4b\x8b\x4f\xf0\xdd\x5f\x8d\xbb\xfd\x0d\xbf\xfe\x6b\xc8\xbb\x1d\x38\xe8\x76\x8e\x4e\x8e\x0f\x2e\xc0\xb7\x13\x99\x9c\xe2\xb0\x0b\xba\x12\xba\xe1\x7d\xd9\x57\x73\xc2\xd2\x68\xff\x55\xbc\x7a\x7b\xfd\x5a\x7d\xae\x83\xf5\xe7\xca\x52\x2c\x13\x2e\x65\x29\xf7\x43\xe2\xa2\x74\x7c\x12\x8b\x74\x13\x38\x5e\x91\xdf\xc0\xcb\xbd\x54\xed\xbd\xd4\x17\xfa\x71\x83\x6f\x0a\xb2\x16\x0d\x71\x09\x72\xad\x95\x66\x0f\xfc\x22\xdc\x2c\x23\x2e\xe2\x51\x59\xa8\x17\xc4\x7b\x5e\xc4\x43\x43\x45\xa3\x86\x88\xd1\xa9\x44\x2f\x36\xe1\xb9\x7b\xc8\x9f\x5c\x10\x6c\x44\xd2\x6b\x83\x5c\xf2\x14\xc4\xe3\x29\xe1\x10\x85\x14\x26\x74\x40\xb8\x48\x43\x3a\x50\x30\xa5\x3c\xc4\x8c\xaf\xff\x2d\xc5\x26\xb0\xe1\x50\x10\x44\x07\xc4\x9f\x28\xcf\x6a\x9a\x10\x5b\x9f\xa7\xe5\xab\x37\x99\x12\x52\x54\x9b\x1e\xbd\x03\x6f\x55\x1a\x14\xb1\x44\x5e\x2c\x15\xa9\x90\x99\x1f\xf3\xa1\xc8\xfa\xa5\xb0\x26\xf4\xbd\xfe\x4e\xc4\x92\x9d\xbe\xd7\x97\x3f\x8a\x50\x74\xa2\x8f\xbc\xf2\x76\x44\xca\x51\x15\xc1\x71\xca\x42\x9f\x36\x90\xc8\x7a\xb5\x3a\x95\x13\x61\x23\xdd\xd9\xb1\x7f\xc4\x20\x6a\x42\xdc\x84\xa9\x9b\xb9\xff\x0b\x00\x00\xff\xff\x73\x7b\x3a\x02\x39\x5c\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x28, 0x50, 0xc9, 0x5c, 0x5, 0x45, 0x57, 0xf9, 0x14, 0xc4, 0xfa, 0xcb, 0x40, 0x3b, 0xf4, 0xe8, 0x9, 0xf1, 0xe5, 0x63, 0x2d, 0x61, 0x98, 0x4b, 0xf4, 0xb3, 0x17, 0x3f, 0xab, 0x2c, 0x6}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x8f\xdb\xb6\x0f\x7f\xb6\x3e\x05\x61\xf4\xc1\x69\x03\xe5\xff\x5c\xa0\x7f\xa0\x69\xb2\xee\x86\xee\x92\xa5\x19\x86\x62\x18\x56\x45\xa6\x6d\xed\x6c\xc9\x95\xe4\xcb\x05\x41\xbe\xfb\x40\xc9\x76\x72\x69\x7b\x58\x1f\xef\xcd\xa2\xc9\x1f\xf9\xa3\x48\x8a\xad\x90\x77\xa2\x44\x38\x1e\x5f\xf0\xb5\xf0\x15\x5f\x47\xc1\xe9\xc4\x98\x6a\x5a\x63\x3d\x64\x2c\x49\x4b\xe5\xab\x6e\xc7\xa5\x69\x66\xff\x08\x79\x27\x67\x6d\xf9\x90\xb2\x09\x63\xb3\x19\xbc\x5f\xde\x2e\x37\x6f\xb7\xcb\x05\xcc\x3f\xc1\x7a\xf5\x7e\xc5\x61\xb1\x82\xdb\xd5\x16\x96\x8b\x9b\x2d\x0f\x3a\x8b\x39\x28\x07\xbe\x42\x90\xa6\x69\x8c\x06\xa5\x3d\xda\x42\x48\x84\xc2\x58\xc8\x85\x17\x3b\xe1\x10\x4c\x8b\x56\x78\x65\x34\x29\x0b\x0f\x52\x68\xd8\x21\x74\x0e\x73\xd8\x2b\x5f\x11\x96\x3f\xb4\xe8\xa0\xb0\xa6\x01\x27\x2b\x6c\x04\x7c\x3e\x1e\x81\x7f\x0c\xdf\xfc\x56\x34\x08\xa7\xd3\x67\x0e\xb7\xc6\x63\x44\xf1\x95\x72\xa0\x1c\x19\x8b\xda\x19\x90\xa6\x55\x98\x53\x0c\x06\x50\xc8\x0a\x4c\x11\x62\xf3\x62\x57\x23\xf4\x29\x71\x9c\xcd\x66\x64\xb2\x25\x6b\x57\x99\xae\xce\x61\x6f\xec\x5d\x08\x64\x0c\x79\xe6\xbe\xd4\x7c\x31\x07\xa1\xf3\xc7\xb2\xed\x03\x67\x14\x6a\xe0\x3e\xb2\x3d\xb2\x64\xf9\x80\x32\x73\xde\x2a\x5d\x4e\x81\x73\x3e\xfe\x3c\x9e\x26\x90\xb5\xe5\x03\x7f\x67\x9a\x46\xe8\x7c\x2b\xca\x29\xa0\xb5\xc6\x4e\x58\xf2\x5b\x87\xf6\xf0\x7d\xb3\x97\x64\xb7\x31\x7b\x77\x65\xb1\x31\xfb\xef\x1a\x0d\x36\xec\x14\xee\xe8\x83\x29\xa1\xe8\xb4\xa4\xf4\x73\x58\xdd\xa3\xb5\x2a\xc7\x98\xbc\x40\x99\x52\x54\x9b\xb2\x44\x4b\x09\x3b\x98\xce\x82\xac\x8c\x92\xc8\xee\x85\x0d\xe6\x6f\x02\xc0\x77\x1d\x1e\xa3\xa3\x77\x46\xe7\xaa\xbf\xe4\xce\x6a\x07\x02\x6a\xe5\x3c\x81\xca\xf3\x2f\xba\x1d\xd2\x76\x5f\x6a\x90\xb5\xe8\x1c\xba\x90\xe4\x56\x58\xd1\x38\x46\x8e\x2e\x90\x32\xb2\x74\xe4\x71\x94\x4d\x20\x23\xdb\x21\x98\x68\x07\x7f\xfe\x75\x11\x52\x48\x56\x9f\x30\xba\x1a\xe2\xb1\xaf\xd0\x22\xe9\x45\xc3\x28\x2c\xad\xe9\xda\xdd\xe1\x5a\x6c\x6c\x8e\xf6\x6b\x71\xad\x1a\xe5\xaf\x85\x94\x41\xa5\x3d\x63\x09\x55\xfc\xdf\xd3\xc0\x15\x5e\xbf\x01\x2b\x74\x89\x10\xe3\x3f\xb2\x24\x89\x64\xe9\x0f\xc9\xf8\xbb\x70\xcc\x26\x2c\x49\xdc\x5e\x79\x59\xf5\xd9\xe0\x5b\x2a\xae\x60\x40\x9d\x93\xfe\xf1\xf3\x72\xb3\x4c\x5f\xb3\x24\x09\xee\x2c\x16\x57\x64\xe9\x4f\xef\x3a\xe4\xe2\xc2\x77\x04\x5c\xc7\x0c\x11\x64\x92\x28\x5f\xbd\x7a\x15\xbe\x02\xd2\x1b\x10\x6d\x8b\x3a\xcf\xe8\x34\x85\xf4\x45\xfa\xca\x79\x2b\x8d\xbe\xe7\x37\xde\x88\x4c\xf9\x6a\x32\x09\xea\x7d\x9e\x47\x83\x78\xee\x7d\x06\x95\x10\x49\x9f\xe6\x51\x2d\x9e\xa7\x50\x34\x9e\x7f\x6c\xad\xd2\xbe\xc8\xfa\xb8\x7e\x32\xb6\x11\x7e\x1a\x28\x71\xce\x83\x9f\xc8\xf9\xfd\x66\xf5\xfb\x1a\xe6\x9f\x9e\x0f\xed\xb1\x90\x46\xc5\x41\xf2\x83\xd4\x57\x9b\xc5\x72\xf3\xac\xa8\x8f\xcd\x32\x2a\x0e\x92\x1f\xa4\xfe\xe1\xe6\xd7\x9b\xed\xf3\xe1\xdd\x4f\x83\x51\x2d\x9e\xff\x33\xe7\x1c\x0b\xd1\xd5\x3e\xd0\xb5\x48\x03\x93\x46\xe2\x30\xcf\x22\xcc\x92\x26\x58\x91\xa5\x9d\xbe\xd3\x66\xaf\xcf\x63\x34\x3c\x96\x29\xc1\x9c\x58\x72\x62\x2c\x99\xcd\xa0\xed\x3c\xe0\x3d\xda\x83\xaf\x94\x2e\xc1\x9b\x12\x7d\x85\xb6\x9f\x68\x9d\xbf\x98\x5b\xaa\x80\x1a\x75\xdf\x9b\x13\xf8\x3f\xfc\x2f\xe4\x8c\x94\xce\x97\xd8\xf9\x69\x3f\x7d\x20\xa4\x4a\xe9\xd2\xf1\x5f\x8c\xd2\x63\x4f\xa7\xf0\xf6\x76\x01\x29\xd1\x39\x8d\xa0\x43\xdd\x3f\x09\x3b\x34\xf8\x35\xf2\xb9\x69\xd2\xe9\x35\xf0\x50\x55\x4f\x02\x0f\xed\x73\x0d\x7c\x2e\xc9\xaf\x81\xe3\xc5\x3d\x09\x1b\x4a\xf3\x1a\x73\xb8\xf0\x33\x22\x1b\x6f\xf2\x91\xef\x00\x01\xe9\xe4\x7c\xb9\x5a\xd5\xec\xea\xd1\x3c\x2f\x13\x71\xbd\xf8\xc6\x0f\x8a\x6e\x78\x36\xe0\x65\xfc\x1a\x60\xe2\xe3\xe2\xbc\xed\xa4\xef\x01\x2e\x45\x64\x1a\x1e\x16\x80\xa1\x08\x62\x51\x8e\xc7\xf5\x37\xde\xd1\x1e\xfc\x46\x3b\xb4\x71\x89\xea\x17\x37\x15\x24\xc3\xae\x45\x0b\xc4\x62\x3e\xee\x54\x8a\x5e\x7e\x6a\x2c\xd4\x0a\x35\xad\x82\xfd\xf6\x11\x76\x42\xa7\x9a\xb6\x46\x52\x8e\x20\x17\xbb\x61\x8c\xfb\xc2\xdb\x23\xe6\x51\x9e\xe5\x3b\x58\xcc\x27\x90\x6d\xcc\x7e\xdc\x89\x62\x98\x1b\xb3\xbf\xb0\x10\x75\x6d\xf6\x8e\xd6\x19\xf0\x06\xda\xae\xae\xa9\x09\xc2\xa2\x59\x21\xb8\x16\xa5\x2a\x94\x84\xc6\xe4\x58\xd3\x56\x02\x02\x4a\xd4\x68\x95\x84\xbd\x38\xc4\x50\x1e\x23\x1e\x59\xb2\x40\x69\x72\xcc\xee\xe1\xd1\xfe\x13\xa2\x60\x27\xf6\x6f\x00\x00\x00\xff\xff\xb4\x51\xba\xd6\x75\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x4a, 0x88, 0x16, 0x8f, 0x33, 0x4e, 0xcc, 0xa0, 0xfa, 0x1e, 0x65, 0xc2, 0x90, 0x3b, 0x72, 0x51, 0x38, 0x87, 0xf, 0x91, 0x56, 0xf0, 0xea, 0x35, 0xe2, 0xea, 0xd9, 0xa0, 0xb1, 0xa7, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
