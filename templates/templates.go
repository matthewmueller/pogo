// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x5d\x6b\xdb\x40\x10\x7c\xbf\x5f\x31\x98\x40\xa4\xe0\x9e\xde\x0b\x79\x68\x62\x11\x02\xc5\x32\xb5\x29\x94\x52\xca\x59\x5e\xd9\xa2\xd2\x4a\xbd\x3b\x05\xcc\x71\xff\xbd\xe8\x23\xc6\x46\x06\x3f\x34\x31\x44\x4f\x62\x77\x6f\x66\x67\xe6\xae\x56\xe9\x1f\xb5\x25\x38\x77\x23\x17\xca\xee\xe4\xa2\x2f\x78\x2f\x44\x14\xe1\x29\x9e\xc7\xdf\xbe\xac\xe2\x19\x1e\x7e\x60\x91\x3c\x25\x12\xb3\x04\xf3\x64\x85\x78\xf6\xbc\x92\x42\x38\x17\xdd\xbd\xd5\x17\x79\xdf\xe1\x21\x69\x34\x88\x9b\x12\x76\x5f\x13\x0e\xf5\xb7\xe4\x69\xc5\xb5\x9a\x63\x6e\x4a\xb9\x50\x26\x55\x85\xf7\xc8\x0d\xec\x8e\x30\x39\x74\xe6\xaa\x24\xef\x27\x47\xdb\x64\xba\x2a\xfb\x81\x65\xba\xa3\x52\xbd\x8e\x48\xd1\xb5\xc7\x98\xc6\xea\x9c\xb7\x1f\xd8\xa9\xb4\x62\x63\x11\x08\xc0\xb9\x4f\xd0\x8a\xb7\x84\x9b\x17\x55\xe0\xf3\x3d\x06\xb1\xdf\x55\xd1\x90\x81\xf7\x02\x00\xce\x59\xeb\x5c\x7b\x64\xe4\xf4\xed\x50\xff\xaa\xd6\x54\x78\x7f\x3b\x3e\x28\x3b\xc8\x8b\x78\xf7\xe3\x91\x60\x72\x0a\x3e\x09\x07\x09\xc4\x9b\x76\xd5\xf0\x9d\x32\x59\x2a\x9b\x9b\x6c\xdf\xe9\x33\x7f\x8b\x68\xa3\xf3\x17\xd2\xbd\x47\x1a\x39\x5b\xd2\x99\x4a\xdf\xf1\x5e\x77\x4c\x30\xdd\x1a\x39\x99\x8b\x8b\x64\x95\x3e\xe7\x7b\xd6\x70\x8a\xe0\xd0\x78\x54\x65\xeb\xe2\x78\x32\xec\x09\x83\x10\xc1\x31\xc3\x14\xa4\x75\xa5\x43\x38\x01\x68\xb2\x8d\xe6\xe1\x2d\x8c\x30\xc3\x29\x38\x2f\x84\xbf\x42\x20\xf5\xb6\x7d\x29\x46\xc6\x9c\x56\x1b\x7a\xc8\x59\xe9\xfd\x35\x32\x39\xe1\x5b\x9e\x44\x73\x61\xa5\xff\x4e\xe7\x18\x37\xf8\x8d\xbb\x9e\x4f\x3e\x56\xcc\xcf\x9c\x55\x53\xac\xf1\xf3\xd7\x7a\x6f\x29\x44\xd0\xff\x9c\x8b\x4e\xd5\x35\xf1\x26\x58\x4f\x87\xe1\x71\x88\x52\xca\xd7\x20\xff\x05\x00\x00\xff\xff\x44\x4a\x6b\xbd\x56\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xce, 0x6b, 0xe4, 0xc4, 0x87, 0x4d, 0xc8, 0x12, 0xbc, 0xf0, 0x4f, 0x45, 0x4, 0x83, 0x2f, 0x3c, 0x9a, 0xd9, 0xb5, 0x80, 0xd9, 0x98, 0xdd, 0xdf, 0xf1, 0x11, 0x6, 0xfa, 0xf2, 0xb7, 0x7d}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x59\x73\xdb\x38\xf2\x7f\x26\x3f\x45\x0f\x2b\x93\x21\x63\x0d\x35\xf9\x3f\xfa\xbf\xde\xaa\xd8\x92\x67\x3d\xeb\x48\x5e\x1f\x33\x3b\x95\x4a\x49\x0c\x09\xc9\x1c\x53\x80\x02\x50\xb2\x55\x2a\x7e\xf7\x2d\x5c\x24\x78\xe8\xf2\x95\x64\x62\x3f\xc9\x04\xd0\x68\xf4\xf1\xeb\x46\x03\xe4\x34\x08\x6f\x82\x31\x82\xe5\xf2\x95\x7f\x16\xa4\xd7\xfe\x99\x7c\x90\x65\xb6\x1d\x4f\xa6\x84\xa6\xe0\xda\x00\x4e\x48\x70\x8a\xee\x52\x87\xff\x46\x38\x24\x51\x8c\xc7\xed\xbf\x18\xc1\x8e\x6d\x39\x88\x52\x42\x19\xff\xc5\x52\x1a\xe3\xb1\xf8\x99\xc6\x13\xe4\xd8\xb6\xe5\x8c\xe3\xf4\x7a\xf6\xc9\x0f\xc9\xa4\xfd\x57\x10\xde\x84\xed\xe9\xf8\xce\xb1\x3d\xdb\x6e\xb7\xe1\xd7\x6e\xaf\x7b\xfe\xee\xb2\xdb\x81\xc3\x3f\xe1\xac\xff\x6b\xdf\x87\x4e\x1f\x7a\xfd\x4b\xe8\x76\x4e\x2e\x7d\xd1\xa7\x4b\x29\xe7\xee\x32\xf8\x94\x20\xff\x2c\x60\x61\x90\x64\x59\x8f\xa4\xc7\x64\x86\x23\xa0\x28\x9d\x51\x8c\x22\x88\x47\x90\x5e\xcb\x85\xc8\xae\xbd\x60\x82\xb2\x0c\x62\x06\x98\xa4\x30\xe2\xbd\xed\x79\x40\x37\xd0\x3b\x00\xb9\x1a\xbf\x87\x6e\x5d\xa7\xe8\x78\x14\x4c\x50\x92\x65\x05\x2d\x47\xae\xa0\x4e\x0a\x28\x62\xb3\x24\x85\x28\x48\x03\x18\x11\x0a\x82\xca\x45\x78\x8d\x26\x81\x62\xca\xf1\x9d\x2a\x9f\x8e\x9d\x2e\xa6\xa8\x89\x1c\x4b\xe9\x2c\x4c\x61\x69\x03\x2c\x97\x3f\x03\x0d\xf0\x18\xc1\xab\x90\x24\xb0\x7f\x00\x39\x7b\x24\x99\x4d\x30\x83\x2c\x13\xdd\x78\x73\x41\x61\xb9\xe4\xd2\x11\xcf\x7a\x24\xed\xcd\x92\x04\xb2\x4c\x75\xba\xe4\xb3\x6a\xf6\xf8\x53\x40\x09\x43\x90\x65\x6f\x56\x77\xc0\x11\x64\x19\x0c\xb9\xfa\xf7\x1d\xd5\xed\x02\x07\x37\x28\xcb\x5a\x64\x12\xa7\x68\x32\x4d\x17\xce\x50\x31\x2c\xbb\xdb\x99\x2d\xa4\x3f\x80\x29\x19\x13\xff\x9c\xdc\xc2\x01\xb8\x6f\xea\xeb\xf5\x5c\x1c\x27\x52\xb6\x1d\x14\x92\x08\x41\x3c\x99\x26\x68\x82\x70\xca\xf2\xb1\xf6\x68\x86\x43\x70\x8b\xd1\x17\xd7\x84\xa6\x59\x06\x4d\x04\x15\x1d\xb7\xae\xcc\x18\xa7\x88\x8e\x82\x10\x2d\x33\x4f\xea\x5d\x88\x79\x50\xeb\xd9\x02\x72\xc3\xc5\x5d\x6b\xf0\x1b\x97\x60\x03\x17\xf8\x0f\xe4\x46\x90\x03\x65\xa4\x30\x9a\xa4\x7e\x97\xcf\x32\x72\x87\x75\x66\x22\xc1\xe5\x3e\x38\x3f\x5e\x3a\xda\x6a\x03\x70\x1a\xe8\x3b\xc3\x56\x9d\x13\x3e\x29\x57\xfe\x9b\x3a\xf7\x70\x60\xca\x45\x89\xca\xce\xd9\xc2\x71\xc2\xb5\xd3\x6e\x43\x0f\xdd\x6e\x69\xad\x10\xe3\xe9\x2c\x95\x6a\xe0\x9e\xe2\xc1\x9b\x13\xfe\x44\x2c\x58\xd1\x7d\x2d\x9e\x2c\x33\x45\x5c\xb6\xdf\xcb\x2b\xe4\xd0\xfb\x38\x82\xb4\x7a\x21\x07\x90\xe6\x01\x75\xab\xd6\x9d\x7f\x2e\xdc\x64\x96\x24\x9c\x9c\x6c\x01\xc0\xea\x7f\x3d\x5c\x6a\x42\x50\xdc\x44\x52\x99\xff\x1a\x5f\x38\xc1\x0c\xd1\x54\x4c\xc7\x5d\x42\x2c\x56\x7b\xc1\x72\xb9\x79\x9d\x12\x85\x4a\x1e\xcf\x50\xca\x04\x1c\x6a\xf7\xd4\xe2\x5c\xe9\x37\x72\xd6\x2a\x21\x57\xfd\xaf\x0d\xa9\x19\x13\x4a\xca\xaf\xd1\xf6\x2b\x34\x0e\xe0\x75\xf9\x49\x61\x31\x75\x23\xcd\xb8\x08\x9a\xf5\xc2\xed\x75\xa5\x5a\x6e\xe3\x24\xe1\x52\x10\x42\x18\xea\x76\x2e\x05\xc8\xb2\x21\xa4\x04\x7a\x57\xa7\xa7\x9c\xee\xb0\xcc\xcc\x50\xb8\xde\x2c\x49\x36\x8a\x6a\xe5\xe4\x55\xa1\xad\xb4\x90\x0d\x72\x5b\x6d\x74\x3b\x8a\xd0\xb0\x3c\xe3\x27\x17\xe0\xfb\x80\xb2\xeb\x20\xf9\xed\xa2\xdf\x83\x89\xfc\x5d\xd8\x4d\x19\x44\xb8\xcb\xa7\x04\x78\xd7\x8d\xa2\x31\xc8\xba\x1e\xb8\x1f\x3e\x7e\x5a\xa4\xa8\x25\x11\xd6\x33\x21\x82\x87\x10\x5f\xf5\xae\xd3\xf3\x14\x72\x5c\xe1\x89\xc1\xe7\x0c\xe7\x9c\xf2\xe1\x5c\x97\x41\x13\xbf\x1b\xb9\x2c\x91\x75\x05\x30\x49\x4e\xcd\x58\x60\x32\x9a\x0f\x10\x9d\x5b\x75\x59\x0b\x86\x37\x4d\x7b\x21\x72\x24\xd7\x03\x99\x2c\x99\xb3\x34\xe0\xdf\x16\x04\x43\x09\x05\xae\x07\x93\x60\xfa\x41\x52\xfd\x68\x84\x36\x31\x83\xea\xc4\x21\x64\x12\xdc\x20\xb7\xb9\xab\x67\x4b\xd4\xdc\x02\x5b\xd7\x03\xa6\x08\x80\xbb\x98\xf4\x0f\x07\x3c\x0e\xa9\x78\xc9\xff\x14\xc3\x1f\x2a\x08\xf6\xb1\x31\x98\xad\x26\xac\xe8\x15\x1c\xe7\x78\xbc\x82\xc5\x8a\xf3\x56\xf8\xda\x8d\xab\x9a\x93\x4a\x46\xf2\x1c\xca\x2e\x54\xaf\x08\xe7\xb1\x92\x87\x84\x5a\xe6\x53\x44\x8a\x8d\x46\x21\xbb\xba\xd1\x27\x39\xb2\x73\xe8\x81\xab\xb3\xa7\x26\x4f\xcc\xfb\xaf\x32\x6b\x99\x1e\x1c\xc7\x49\x8a\x28\x84\x14\x05\x29\x62\x10\x00\x46\xb7\x30\x12\x0f\xf3\x64\x40\xf6\xe1\x29\x81\xea\x6d\xe6\x04\xf2\x51\x9e\x14\xa8\x1e\x92\x02\xdb\x39\x31\x50\xc3\xf3\xcc\xc0\x1a\x11\x3a\x09\x52\x06\x1f\x3e\x4a\xe3\xb6\xad\x79\x90\xcc\x10\x03\xf8\x60\xda\x79\x25\x02\x1f\x11\x1c\xc5\x69\x4c\xb0\x08\xc0\x92\xa8\x91\x87\x1e\x25\xc1\x8c\x21\x18\x61\x25\xf5\x91\x5e\x99\xa7\x9a\xf8\x5a\x25\x21\xd9\x73\x69\x5b\x7a\xbd\xc6\xe3\xa5\x6d\x59\x3c\x04\xec\x03\x80\xf3\xc7\xbf\xba\xe7\x5d\xa7\x65\x5b\xd6\xb1\x60\x79\x5f\xc1\x01\xf3\x7f\x23\x31\x76\x47\xbe\x5a\x49\x0b\x1c\x78\xd7\xeb\x80\xe3\xf1\xbe\x67\x01\x0d\x26\x6c\x1f\x46\xbe\x5c\x56\xcb\xb6\xb4\x24\xdf\xe1\x48\x2b\xa2\xdd\x86\x1a\xa3\xef\x70\xe4\x6a\x29\xfb\xbe\x9f\x3f\x2f\x74\xd4\x6e\x03\x00\x17\x4a\x28\xb8\x35\x64\x28\x5a\xb8\x6a\x06\x2d\x35\x05\x47\x05\x89\x11\x9a\xa6\x1a\x0f\x30\x80\x03\x83\x0f\xfe\xd7\x6e\xe7\x24\x0f\x20\x98\x4e\x11\x8e\x5c\xf5\xa0\xa5\x56\xad\x58\x2b\x14\xe1\x7a\x9e\x27\xc7\x67\x6a\x7a\xbf\x46\x23\x7f\xd4\x2a\xcb\x2e\x7f\xaa\x25\xa7\x28\xe9\x2c\x9c\xff\x27\x65\xd6\xa7\xeb\x44\xd6\xa7\xdf\xa1\xc4\xfa\xe7\x2b\x05\x56\xc4\x85\x62\x49\xda\x2b\x8f\xd5\xa2\x44\x8a\x51\x74\x43\x49\x24\x7a\x29\x66\x8f\xf9\x03\x56\x4a\x92\x45\xf2\xaa\xba\x1a\xe1\xa0\x78\xd6\x41\x2c\xa4\xf1\x54\x78\x67\x96\xd5\x3d\xb0\x61\xb4\x3b\x37\x9e\x36\x24\x5d\x06\x2c\xe9\x18\x26\xfb\x5e\x4c\x29\x0a\x54\x78\xe0\x7a\xa5\x26\x90\x70\x75\xca\x85\xcd\xb9\x83\x5b\xd4\x10\x2c\xe5\xb2\xfb\x91\x39\x1e\xf7\x47\x2e\x7a\x8d\x43\x86\xe8\x73\x87\xe6\xdb\xc0\x8b\x29\x8d\x71\x2a\xf6\x81\x7a\x72\x89\x03\x3c\x3d\xad\x68\x87\x13\x37\xfa\xe5\x4c\x0e\xb9\xc6\x73\x33\x8b\x0b\x0b\x9b\xab\x70\xa5\x51\xc2\xe4\x42\xe1\x06\xc4\x7a\xbf\x28\x62\xa2\xdc\xf2\x6f\xe4\xbc\x91\x5b\xcf\xb6\xd6\x4d\x34\xf7\xca\x7b\x1f\x2b\xb7\xaa\x75\x89\x69\x9f\x46\x88\x1e\x2e\x80\x4d\x51\x18\x8f\xe2\x30\x46\x32\x2f\xed\x9f\x77\xba\xe7\x87\x0b\x38\xfc\x13\xfe\x41\x78\x9f\x7f\xca\x40\x90\xf7\x97\xca\xb2\x43\x82\x59\x0a\xae\x6d\x71\x64\xbc\x38\x02\x46\x68\xca\xe0\xd3\x02\x02\x16\x22\x1c\xf1\xbc\x4b\x0c\xb7\x2d\xde\xaa\x47\x1f\x80\xf3\xee\xe2\xc8\xb1\xc5\xb0\x4e\xd7\x1c\x17\xa1\xea\x40\xd1\x6e\x8c\xe4\xff\xeb\xba\x56\x0f\xdd\x8a\x96\x3c\x66\xe8\x07\x3c\x52\xc8\x16\x23\x46\x88\x07\x1b\x82\x92\xe8\x63\xc4\x24\x49\x44\xb0\x22\x25\x33\x8e\xe7\x08\x83\x50\x0e\x33\x64\xb2\x2e\x36\x66\x8d\xd1\x8d\x28\x0e\x1f\x10\xdc\x84\x96\xe0\xf0\xcf\xd5\xf1\x8d\x18\xf1\xad\x25\x83\x9b\xda\xec\xd5\xc1\x43\x41\x4c\x5f\xae\x75\x35\x66\x48\x5d\x19\x36\x9a\x6f\xf7\xb8\xde\x31\xa0\xbb\x29\x45\x8c\xc5\xa4\xbe\xd2\x26\x10\x11\xb2\xd5\x0a\x36\xd5\x46\xea\x3e\x42\x76\xf2\x6e\x41\xd9\xf3\x72\x39\x12\xbb\x66\xff\x2a\x01\x0c\x1a\xb6\x04\x72\x1f\x96\x6f\xd2\x36\x67\x4a\x62\xb1\xb5\x7c\xb0\xa1\x84\x94\x27\x8f\x4d\x45\xad\x52\xd2\xd8\x6e\xc3\x18\xa5\x10\x24\x89\x60\x04\x13\xfc\x33\xcf\x92\xf5\x26\x23\xc0\x11\x4c\x29\x9a\x06\x14\xf1\xf6\x89\xc0\x28\xde\xf1\xf3\x0c\xd1\x85\x0d\x30\x08\x5b\x30\x88\x5b\x30\x98\x73\x0d\xb3\x24\x0e\x1b\xca\x73\x7e\xbe\xb1\x69\xc1\x2f\x62\x67\xd2\x6e\x03\xfb\x9c\x40\x2c\x85\x23\x88\xb5\x60\x4a\xe3\x49\x40\x17\x70\x83\x16\x30\xa5\x64\x1e\x47\x28\xe2\x1a\x67\xe8\xf3\x0c\xe1\x10\xd9\xc0\x07\xb1\x54\xc4\xab\xa1\x00\xc6\x93\xde\x45\xf7\xfc\x12\x4e\x7a\x97\xfd\x6d\xeb\x5d\xee\x10\xf6\xca\x26\xcc\xd7\x20\x6c\x17\xf6\x60\xe8\x09\xba\xbf\xbf\x3b\xbd\xea\x5e\x34\xf5\x8d\x6b\x7d\xcf\xbb\x97\x57\xe7\xbd\x93\xde\xaf\x86\x1e\xce\x85\x3d\xc4\x78\x2c\xb0\x78\xa8\x96\x9c\x90\xb1\x5c\x2b\x8f\x54\xb7\xe8\xa7\x39\x2a\xd6\x19\xf0\xd6\x31\xa2\xb2\xe2\x28\x54\x7b\x4a\xc6\xe5\x5d\x8b\x7e\xea\x4a\x31\x70\xa9\xfb\xbe\x2f\xf1\x5f\x05\xba\x86\x9a\x61\xdd\x02\x78\x16\x4f\x6e\xb9\x14\xa3\x4f\xfe\x7f\x38\x43\xe7\xe4\xb6\x4e\x34\x1e\x01\x12\xb1\x88\xdc\xfa\x17\x61\x80\xcd\x4d\x4a\x18\xe0\x2c\xf3\xfe\x1f\x50\x99\xc3\xa2\x10\xd9\x02\xa4\xf9\xd2\x20\xd3\x54\x8d\x2d\x4a\x96\xd2\xae\xdf\x07\x78\xf1\xc8\xae\xc2\x49\xae\x70\x97\xb3\x64\x46\x83\x44\x0b\x8a\xe7\x86\xda\x6f\x3e\x7c\x5c\xef\x39\x56\x45\xd8\x65\x4a\x8d\xa3\x65\xe2\x31\x68\x72\xd7\x3c\xe0\xaf\x22\xc8\x41\xb9\x49\x7c\x88\x0a\x67\x68\xdc\xf3\xe5\xe5\x64\xcb\xe2\x9a\xa4\xb4\x50\x95\x65\x69\xc4\x5a\xb5\x04\x41\xda\xb6\xac\xac\x3c\x71\x99\xab\x1c\x35\x57\x53\xa9\x33\x2d\x32\xab\xcd\xd3\x2b\xc3\x58\x2e\xdb\x6f\xe0\x38\xc6\xdc\x41\xb8\xcd\xf2\x00\x20\xca\x81\x64\x04\xa1\x8e\xab\x0c\xde\xb4\x65\x34\x51\x3d\x87\x75\xe9\x8b\xd8\xc1\xc8\x04\x19\xc3\x7c\x69\x26\x7c\x50\xc9\x40\x78\x0f\xb1\x55\x28\x87\xef\x2d\xe0\x74\xc0\xb8\xff\xe4\x7a\x29\x8f\x67\xae\x20\x2c\xbc\xab\x41\x25\x25\xdf\xe1\xc2\xcf\x0c\xa4\x64\x28\x41\xe1\x3d\x91\xf2\xa2\x7b\xda\x3d\xba\x84\xe5\x52\x3b\xaf\xa0\x95\x65\x30\x84\x3d\xe1\xb5\xc3\xe3\xf3\xfe\xfb\x6d\xf1\x53\x0f\x1a\xb0\xef\x06\xd5\xc4\x90\x83\x03\x98\x8e\xef\xfc\x2e\xa5\x3d\x72\x4e\x6e\x59\x5e\x49\x32\xf5\xb6\xf6\x48\xd2\x2e\xea\x57\xf7\xc5\xc9\xdc\x1d\x0e\x17\x70\xa6\x8c\xe0\xdf\x68\x21\xed\x5f\x9e\x0e\xea\xc9\x65\x2b\x6f\x94\x4d\xaf\xa6\xe2\xe0\xab\xb1\x59\x79\xce\xe1\x62\xb9\x7c\x35\xbd\x29\x4e\x1f\xee\xe3\x49\x55\x22\x55\xe8\x9d\xde\x98\x3a\x9c\xde\xd4\xcf\x20\xb6\x49\x5a\x1e\xea\x13\x42\x0b\xab\x1c\x43\x34\xee\xe0\x13\xa2\xbf\xa8\x03\x89\x01\xd3\x9b\xdc\x59\x0e\xe0\xd5\xdb\xa7\x4c\x00\x5e\x97\x04\xfa\xd8\x3e\x53\xa7\xfe\x2d\x3b\x8f\x51\xac\x35\xdd\xe8\x0a\xc7\x9f\x67\x48\x65\xbc\xb9\x23\xa9\xbd\x4b\x1c\xdd\x19\x4e\x73\x82\x23\x74\x87\x98\xde\xe5\xc6\x23\x70\x79\x82\xcc\x7b\xf9\x27\x4c\x11\x72\x31\x49\xf5\x23\xe5\x65\x9e\x57\x75\x32\xde\xfc\x1e\xa5\xd7\x24\xca\x32\x18\xc9\xa0\x55\xd7\xd7\xa7\x05\xa8\xbe\x46\xed\x44\x97\x4e\x1a\x69\x55\x9d\x8d\xb7\xc9\x52\xe3\x17\xf6\xb0\x57\x8f\xe7\x62\x6a\x59\x7f\x5c\x23\x8a\x9e\x36\xbd\x56\x33\xfd\x1e\xd0\x98\xf3\xc2\x1e\xdf\xc3\x9a\x67\x50\xd9\xc3\x6a\x27\x53\x9e\x68\xe6\x0f\xda\xd5\x28\xdd\xce\xd9\xee\xe7\x6d\x94\xee\xe2\x6f\x46\x4d\xa8\xee\x7a\x22\xd3\x17\xe9\x5c\x1e\x46\x4a\x69\x9c\x68\xe7\xae\xc1\x60\x92\x6f\x0a\x36\xa7\x27\x65\x8a\x85\xab\xd4\x76\x01\xab\x93\xbc\x4d\xb9\xbf\xd4\xfe\x6e\xb9\xff\xe3\xe4\x86\xeb\x93\xf5\x97\x7c\xd1\x96\xde\xc6\x72\x21\x6b\x9f\x6b\x4e\x03\xab\xfe\xb3\x8d\x94\xa5\x5b\x44\x68\x84\xa8\x98\xca\x3f\x4a\x08\x43\xae\xa8\x6a\x88\xc2\x32\x7f\xd6\x43\x77\xa9\xeb\x29\xaa\xbb\x40\x45\x29\xc2\xb2\x6d\x43\xec\xa6\x20\xbb\x79\x65\x9b\xc1\x40\xc3\xc1\xb6\x52\x2a\x4e\x6a\x37\xec\x1d\x57\xd2\x69\x80\x16\x5d\xea\x8e\x47\x52\x3e\x5d\x4a\x5d\x6f\x37\x1d\x16\xe3\x2a\x48\xb6\xd5\x4e\xf4\x6a\x1a\x05\x29\x82\x49\x90\x86\xd7\x31\x1e\x0b\x6a\x15\xc8\x69\x29\x82\xbc\xf9\xad\xbe\x42\xa8\x81\x4d\x8d\x6f\x70\x13\x41\x29\xc6\xf7\x83\xb9\xa6\x39\x25\xf4\xc9\x09\xb7\xaa\x16\x7e\x5d\xfb\x5e\x59\xff\x6e\xbe\xaa\x97\x97\x13\x15\xa2\x18\x15\x4a\x59\x82\x64\xa5\xca\xe4\xff\x15\xa5\x49\x49\xb5\x05\x09\xc2\xee\x60\x2e\x4e\x5d\x06\x73\xa3\x8e\x31\x17\xfd\x05\xa7\x0a\x4b\x51\x3a\x9b\x0a\xc2\x33\xa9\x3a\x55\x97\x97\xf5\x9f\x59\xe5\x54\x29\x6e\x41\x58\x14\x73\x06\xa1\xac\xdb\xcc\x8c\x09\x66\x2d\x08\xf7\xf8\xbe\xc0\xd9\x1b\xc4\x1f\xe2\x8f\x5e\x01\xdb\x4a\x0e\x01\x56\x97\x56\xe2\x11\x60\xa2\xa7\x15\xb7\xf4\x20\x66\x39\x54\x4a\x2f\x10\xeb\x98\x79\xdc\xf5\x7f\x69\x2a\xc1\x55\x6e\xc0\x96\x2f\x06\xfb\xd2\x38\xf6\xf9\x34\x92\xbe\x26\xee\x28\xe7\xb0\x54\x34\x91\xd5\x5e\xcb\x88\x11\x57\x67\x9d\x77\x97\xdd\x6d\xad\xf5\xa2\x7b\x29\xe2\x80\x65\x95\x8b\xa9\x33\xa3\x98\xaa\x3a\x0c\x98\xf1\xcf\x70\x43\x6d\xf5\x99\x0a\xab\x5c\x39\x33\x5c\xaa\x7b\x7f\x53\x55\x89\xe7\x29\x4b\x3c\x0e\x36\x8a\xb4\x4f\x1a\x3d\x7b\x1c\x9c\x2c\xaa\x14\xe6\xf4\x41\x92\x28\x06\x98\x89\x94\x6b\x8a\xc5\xdb\xa3\xe5\xd7\x9b\x40\xbe\x80\xec\x17\x02\x59\x6e\x57\x2f\x40\xfb\x92\xbb\xbf\xe4\xee\x5f\x38\x77\x7f\xf4\xc2\xb9\x26\x5b\x2b\x9d\x37\xdf\xbc\xde\x21\x70\xc5\x29\xab\xd4\x93\xcd\x48\xf5\xd0\x3a\xfb\x83\xae\x0d\xec\x12\x38\x22\x82\x7f\x4a\x35\xc4\x72\x90\x37\xaa\x11\xc2\x1d\x13\x94\x16\x41\xa3\xbc\xe0\x2d\x83\x4f\x3d\xf6\xbc\xfd\x8e\x62\x4b\xd5\x12\x9e\x21\xce\xa8\xa8\xa1\xc2\x0d\x6c\x0c\x36\xc3\x95\xa7\x23\x3b\x06\x20\xa9\xce\x22\x0b\x17\x97\xd5\xf6\x73\xf5\x94\xee\x06\x2f\xcb\xe7\x17\x59\x1e\x41\x9e\x28\x96\x49\x6e\x9e\x67\xe3\x50\x9a\xeb\x9b\xde\x3c\x54\x6b\xc3\x39\x4c\xcf\xe4\x79\x4a\xac\x0e\x5d\xd6\x9e\xcc\xc8\xb3\x17\x56\x87\xe4\xf5\x07\x2d\xb9\xac\xab\xb8\xba\xf3\x99\xca\x43\x2f\x61\x05\x51\xa4\xad\x39\x55\xce\xdb\x02\x32\x47\x94\xc6\xe2\xaa\x22\xba\x8b\x59\xca\x7f\xdc\xa0\x05\x13\x36\x49\x11\x43\x38\xe5\x11\x85\x9b\x97\x7c\x8b\x0f\x1a\xb8\x68\x80\xe8\xfa\x7b\x21\x7c\x4d\xc5\x4b\x21\xfe\xfa\x97\xc7\xbc\xd2\x6b\x0f\xea\x06\x19\x67\x42\xbf\xfa\xf0\xc0\xf8\xc0\x97\x58\x7e\x35\xd0\x60\x2f\xcb\x1a\x63\x46\x11\x30\x4a\x77\x54\xef\x19\x3d\x96\xcb\x04\xe1\xca\xb4\xdf\x5b\x40\x31\x5d\x60\x4d\x44\xc9\x4f\x1c\x34\xc0\x3d\x78\xef\xc2\x59\xde\x10\x50\xc4\x21\x44\xd3\x69\x60\xd1\xba\x53\x3c\x29\x03\xb4\x8e\x29\xe5\x60\x92\x35\xbf\xad\x5a\x35\xcd\xea\xfd\x69\x7d\x7b\xba\xe2\x42\xd5\x77\x4a\x57\x0d\x7b\x89\x58\xdf\xc4\x3d\x82\xed\x6e\xa7\x75\x04\x6c\x35\xde\xa9\x61\x4d\x97\x6a\x40\x1a\xac\xbc\x16\x3e\x8a\x29\x4b\x55\xc9\x4a\x5d\xb7\x91\xf4\xbe\xf6\xab\x6b\x12\xac\x9b\xf0\xa1\xd3\x3d\xed\x5e\x76\x77\xb9\x06\x60\x9c\x26\x96\xc1\xe0\xeb\xa8\x5f\x7c\x53\x55\xe1\x67\xbb\xab\xb6\x8b\x73\x88\xf2\xef\xb6\x0e\xb2\xa2\x9e\x5b\xf2\x8e\xef\xec\xdc\xff\x3b\x72\xb6\x97\x62\xe1\x4b\xb1\xf0\x69\x8a\x85\x0f\xa8\x06\x4a\xd0\xd9\xb2\x1a\x38\xa2\x64\xb2\xc3\x4b\x0d\x60\xbc\x30\xde\x3c\xcf\xd3\xdd\xb5\x7d\x12\x5c\xd9\x50\x15\xfa\xa2\x58\xd3\x7c\xb1\xf6\xe9\xd2\xe3\xbf\xef\x55\xdb\x6d\x2a\x36\x86\x39\x97\x2a\x36\xd2\xec\xd8\xba\xef\x82\xac\x18\xfa\xc8\x37\x61\x9f\xd2\xfe\x1f\xb8\x85\x7d\xce\x6b\xaf\x4f\x6a\xff\x0d\x93\xfe\x4d\x9c\xe0\xa1\x27\x4c\x0c\xd1\xb4\x16\x53\xe4\xcb\x93\xac\xfc\x92\x86\x34\xb1\x61\x4b\x56\x89\x78\x62\xcc\x75\xc5\xe5\xae\xbe\x90\x64\x50\x18\x42\x90\x50\x14\x44\x0b\x59\x5d\xd4\x79\x73\xf3\x74\xcf\x78\xbc\x64\x3d\x5a\x3d\xd4\xda\xaa\x1c\xea\x57\x56\x5a\x81\x62\xdb\xda\xb2\x9a\x69\x35\x97\x1a\xad\x75\x95\xc6\x5f\xd4\xb8\xdd\xaa\x8a\x83\xed\xab\x8a\xdd\xff\x1e\x9d\x5e\x75\xba\x1d\xdf\xd9\x0b\xbf\x70\x69\xb1\xc9\xac\xee\x59\x59\x7c\x82\xf7\x7e\x15\xee\x0e\xb7\x7c\xf5\x57\x77\xef\xf7\xe0\xa8\xdf\x3b\x3e\x3d\x39\xba\x04\xd7\x4c\x64\xf2\x1e\x9d\x3e\xa8\x42\xe8\x96\xc7\x65\x5f\xcd\x0e\x4b\xa1\xfd\x57\x71\xe7\xed\xf5\x6b\xf9\xbb\x09\xd6\x9f\x2b\x4b\x31\x4c\xb8\x94\xa5\xdc\x0f\x89\x8b\xca\xf1\x69\xcc\xd2\x6d\xe0\x78\x4d\x7e\x03\x2f\xc7\x52\x8d\xc7\x52\x5f\xe8\xc3\x06\xdf\x14\x64\x55\x0d\x71\x05\x72\x6d\xe4\xe6\x00\xdc\x22\xdc\xac\xea\x5c\xc4\xa3\x32\x53\x2f\x88\xf7\xbc\x88\xc7\x0d\x95\x1b\x35\x84\x04\xcf\x05\x7a\x91\x19\xcd\xdd\x43\x7c\x6e\x81\x91\x09\x4a\xaf\x35\x72\x89\x5d\x10\x8d\xe7\x88\x42\x18\x60\x98\xe1\x08\x51\x96\x06\x38\x92\x30\x25\x3d\x44\x8f\x6f\xfe\x28\x61\x0b\xc8\x68\xc4\x10\x47\x07\x8e\x3f\x61\x9e\xd5\xb4\x20\x36\x7e\xcf\xcb\x27\x6f\x22\x25\xc4\x5c\x6c\x6a\xf4\x1e\xbc\x95\x69\x50\x48\x12\x71\xae\x54\xa4\x42\x7a\x7e\x9e\x0f\x85\xc6\x27\xb7\x5a\x30\x74\x86\x7b\x21\x49\xf6\x86\xce\x50\x7c\x11\xa1\x68\xe4\x3e\xf2\xca\xd9\x63\x29\xe5\xa2\xf0\x4f\x52\x12\xb8\xd8\xe3\x9d\x8c\x4b\xab\x73\x31\x11\x7f\x88\xf7\xf6\xcc\x2f\x18\x84\x2d\x88\x5b\x30\xb7\x33\xfb\x7f\x01\x00\x00\xff\xff\xe9\x08\xae\xbe\x82\x5b\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x39, 0x1, 0xc8, 0xad, 0xac, 0x7e, 0xbf, 0xbf, 0xc6, 0x97, 0x89, 0x91, 0xe7, 0x9b, 0xad, 0xf7, 0xbe, 0x1e, 0x44, 0x9, 0x2a, 0xc9, 0x7e, 0x84, 0x20, 0xc9, 0xa, 0xb3, 0x1, 0xa, 0x3a}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x8f\xdb\xb6\x0f\x7f\xb6\x3e\x05\x61\xf4\xc1\x69\x03\xe5\xff\x5c\xa0\x7f\xa0\x69\xb2\xee\x86\xee\x92\xa5\x19\x86\x62\x18\x56\x45\xa6\x6d\xed\x6c\xc9\x95\xe4\xcb\x05\x41\xbe\xfb\x40\xc9\x76\x72\x69\x7b\x58\x1f\xef\xcd\xa2\xc9\x1f\xf9\xa3\x48\x8a\xad\x90\x77\xa2\x44\x38\x1e\x5f\xf0\xb5\xf0\x15\x5f\x47\xc1\xe9\xc4\x98\x6a\x5a\x63\x3d\x64\x2c\x49\x4b\xe5\xab\x6e\xc7\xa5\x69\x66\xff\x08\x79\x27\x67\x6d\xf9\x90\xb2\x09\x63\xb3\x19\xbc\x5f\xde\x2e\x37\x6f\xb7\xcb\x05\xcc\x3f\xc1\x7a\xf5\x7e\xc5\x61\xb1\x82\xdb\xd5\x16\x96\x8b\x9b\x2d\x0f\x3a\x8b\x39\x28\x07\xbe\x42\x90\xa6\x69\x8c\x06\xa5\x3d\xda\x42\x48\x84\xc2\x58\xc8\x85\x17\x3b\xe1\x10\x4c\x8b\x56\x78\x65\x34\x29\x0b\x0f\x52\x68\xd8\x21\x74\x0e\x73\xd8\x2b\x5f\x11\x96\x3f\xb4\xe8\xa0\xb0\xa6\x01\x27\x2b\x6c\x04\x7c\x3e\x1e\x81\x7f\x0c\xdf\xfc\x56\x34\x08\xa7\xd3\x67\x0e\xb7\xc6\x63\x44\xf1\x95\x72\xa0\x1c\x19\x8b\xda\x19\x90\xa6\x55\x98\x53\x0c\x06\x50\xc8\x0a\x4c\x11\x62\xf3\x62\x57\x23\xf4\x29\x71\x9c\xcd\x66\x64\xb2\x25\x6b\x57\x99\xae\xce\x61\x6f\xec\x5d\x08\x64\x0c\x79\xe6\xbe\xd4\x7c\x31\x07\xa1\xf3\xc7\xb2\xed\x03\x67\x14\x6a\xe0\x3e\xb2\x3d\xb2\x64\xf9\x80\x32\x73\xde\x2a\x5d\x4e\x81\x73\x3e\xfe\x3c\x9e\x26\x90\xb5\xe5\x03\x7f\x67\x9a\x46\xe8\x7c\x2b\xca\x29\xa0\xb5\xc6\x4e\x58\xf2\x5b\x87\xf6\xf0\x7d\xb3\x97\x64\xb7\x31\x7b\x77\x65\xb1\x31\xfb\xef\x1a\x0d\x36\xec\x14\xee\xe8\x83\x29\xa1\xe8\xb4\xa4\xf4\x73\x58\xdd\xa3\xb5\x2a\xc7\x98\xbc\x40\x99\x52\x54\x9b\xb2\x44\x4b\x09\x3b\x98\xce\x82\xac\x8c\x92\xc8\xee\x85\x0d\xe6\x6f\x02\xc0\x77\x1d\x1e\xa3\xa3\x77\x46\xe7\xaa\xbf\xe4\xce\x6a\x07\x02\x6a\xe5\x3c\x81\xca\xf3\x2f\xba\x1d\xd2\x76\x5f\x6a\x90\xb5\xe8\x1c\xba\x90\xe4\x56\x58\xd1\x38\x46\x8e\x2e\x90\x32\xb2\x74\xe4\x71\x94\x4d\x20\x23\xdb\x21\x98\x68\x07\x7f\xfe\x75\x11\x52\x48\x56\x9f\x30\xba\x1a\xe2\xb1\xaf\xd0\x22\xe9\x45\xc3\x28\x2c\xad\xe9\xda\xdd\xe1\x5a\x6c\x6c\x8e\xf6\x6b\x71\xad\x1a\xe5\xaf\x85\x94\x41\xa5\x3d\x63\x09\x55\xfc\xdf\xd3\xc0\x15\x5e\xbf\x01\x2b\x74\x89\x10\xe3\x3f\xb2\x24\x89\x64\xe9\x0f\xc9\xf8\xbb\x70\xcc\x26\x2c\x49\xdc\x5e\x79\x59\xf5\xd9\xe0\x5b\x2a\xae\x60\x40\x9d\x93\xfe\xf1\xf3\x72\xb3\x4c\x5f\xb3\x24\x09\xee\x2c\x16\x57\x64\xe9\x4f\xef\x3a\xe4\xe2\xc2\x77\x04\x5c\xc7\x0c\x11\x64\x92\x28\x5f\xbd\x7a\x15\xbe\x02\xd2\x1b\x10\x6d\x8b\x3a\xcf\xe8\x34\x85\xf4\x45\xfa\xca\x79\x2b\x8d\xbe\xe7\x37\xde\x88\x4c\xf9\x6a\x32\x09\xea\x7d\x9e\x47\x83\x78\xee\x7d\x06\x95\x10\x49\x9f\xe6\x51\x2d\x9e\xa7\x50\x34\x9e\x7f\x6c\xad\xd2\xbe\xc8\xfa\xb8\x7e\x32\xb6\x11\x7e\x1a\x28\x71\xce\x83\x9f\xc8\xf9\xfd\x66\xf5\xfb\x1a\xe6\x9f\x9e\x0f\xed\xb1\x90\x46\xc5\x41\xf2\x83\xd4\x57\x9b\xc5\x72\xf3\xac\xa8\x8f\xcd\x32\x2a\x0e\x92\x1f\xa4\xfe\xe1\xe6\xd7\x9b\xed\xf3\xe1\xdd\x4f\x83\x51\x2d\x9e\xff\x33\xe7\x1c\x0b\xd1\xd5\x3e\xd0\xb5\x48\x03\x93\x46\xe2\x30\xcf\x22\xcc\x92\x26\x58\x91\xa5\x9d\xbe\xd3\x66\xaf\xcf\x63\x34\x3c\x96\x29\xc1\x9c\x58\x72\x62\x2c\x99\xcd\xa0\xed\x3c\xe0\x3d\xda\x83\xaf\x94\x2e\xc1\x9b\x12\x7d\x85\xb6\x9f\x68\x9d\xbf\x98\x5b\xaa\x80\x1a\x75\xdf\x9b\x13\xf8\x3f\xfc\x2f\xe4\x8c\x94\xce\x97\xd8\xf9\x69\x3f\x7d\x20\xa4\x4a\xe9\xd2\xf1\x5f\x8c\xd2\x63\x4f\xa7\xf0\xf6\x76\x01\x29\xd1\x39\x8d\xa0\x43\xdd\x3f\x09\x3b\x34\xf8\x35\xf2\xb9\x69\xd2\xe9\x35\xf0\x50\x55\x4f\x02\x0f\xed\x73\x0d\x7c\x2e\xc9\xaf\x81\xe3\xc5\x3d\x09\x1b\x4a\xf3\x1a\x73\xb8\xf0\x33\x22\x1b\x6f\xf2\x91\xef\x00\x01\xe9\xe4\x7c\xb9\x5a\xd5\xec\xea\xd1\x3c\x2f\x13\x71\xbd\xf8\xc6\x0f\x8a\x6e\x78\x36\xe0\x65\xfc\x1a\x60\xe2\xe3\xe2\xbc\xed\xa4\xef\x01\x2e\x45\x64\x1a\x1e\x16\x80\xa1\x08\x62\x51\x8e\xc7\xf5\x37\xde\xd1\x1e\xfc\x46\x3b\xb4\x71\x89\xea\x17\x37\x15\x24\xc3\xae\x45\x0b\xc4\x62\x3e\xee\x54\x8a\x5e\x7e\x6a\x2c\xd4\x0a\x35\xad\x82\xfd\xf6\x11\x76\x42\xa7\x9a\xb6\x46\x52\x8e\x20\x17\xbb\x61\x8c\xfb\xc2\xdb\x23\xe6\x51\x9e\xe5\x3b\x58\xcc\x27\x90\x6d\xcc\x7e\xdc\x89\x62\x98\x1b\xb3\xbf\xb0\x10\x75\x6d\xf6\x8e\xd6\x19\xf0\x06\xda\xae\xae\xa9\x09\xc2\xa2\x59\x21\xb8\x16\xa5\x2a\x94\x84\xc6\xe4\x58\xd3\x56\x02\x02\x4a\xd4\x68\x95\x84\xbd\x38\xc4\x50\x1e\x23\x1e\x59\xb2\x40\x69\x72\xcc\xee\xe1\xd1\xfe\x13\xa2\x60\x27\xf6\x6f\x00\x00\x00\xff\xff\xb4\x51\xba\xd6\x75\x0b\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x4a, 0x88, 0x16, 0x8f, 0x33, 0x4e, 0xcc, 0xa0, 0xfa, 0x1e, 0x65, 0xc2, 0x90, 0x3b, 0x72, 0x51, 0x38, 0x87, 0xf, 0x91, 0x56, 0xf0, 0xea, 0x35, 0xe2, 0xea, 0xd9, 0xa0, 0xb1, 0xa7, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
