// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\xd1\x6a\xdb\x40\x10\x7c\xae\xbe\x62\x30\x81\x48\xc1\x3d\xbd\x17\xf2\xd0\xc4\x22\x04\x8a\x65\x6a\x53\x28\xa5\x94\xb3\xbc\xb2\x45\xa5\x95\x7a\x77\x0a\x98\xe3\xfe\xbd\x9c\xa4\x1a\x1b\xa5\xf8\xc5\x31\x44\x4f\x62\x77\x6e\x66\x77\xe6\xae\x91\xd9\x6f\xb9\x25\x58\x7b\x23\x16\xd2\xec\xc4\xa2\x2f\x38\x17\x04\x71\x8c\xa7\x64\x9e\x7c\xfd\xbc\x4a\x66\x78\xf8\x8e\x45\xfa\x94\x0a\xcc\x52\xcc\xd3\x15\x92\xd9\xf3\x4a\x04\x81\xb5\xf1\xdd\xa5\xbe\xd8\xb9\x8e\x0f\x69\xab\x40\xdc\x56\x30\xfb\x86\x70\xa8\x5f\x52\xc7\x2f\xe7\x77\x4e\xb8\xad\xc4\x42\xea\x4c\x96\xce\xa1\xd0\x30\x3b\xc2\xe4\xd0\x99\xcb\x8a\x9c\x9b\x1c\x4d\x93\xab\xba\xea\x01\xcb\x6c\x47\x95\xfc\x07\x11\x41\xd7\x1e\x73\x6a\xa3\x0a\xde\xbe\x63\xa7\xb2\x9a\xb5\x41\x18\x00\xd6\x7e\x84\x92\xbc\x25\xdc\xbc\xc8\x12\x9f\xee\x31\x2c\xfb\x4d\x96\x2d\x69\x38\x17\x00\xc0\x6b\xd6\x5a\xeb\x8f\x8c\x9c\xbe\x1d\xea\x5f\xe4\x9a\x4a\xe7\x6e\xc7\x07\x45\x47\x79\x96\xef\x7e\x0c\x09\x27\xa7\xe4\x93\x68\x58\x81\x78\xe3\x47\x8d\xde\x28\x93\xa5\x34\x85\xce\xf7\xdd\x7e\xfa\x4f\x19\x6f\x54\xf1\x42\xaa\xf7\x48\xa1\x60\x43\x2a\x97\xd9\x1b\xde\xeb\x4e\x09\xba\x1b\xa3\x20\x7d\x76\x90\xbc\x56\xaf\xf9\x1e\xc7\xc8\x5b\xce\x10\x1e\x7a\x8f\xb2\xf2\x46\x8e\xc1\x51\xaf\x19\x46\x08\x8f\x45\xa6\x20\xa5\x6a\x15\xc1\x7a\x32\x40\x91\x69\x15\x0f\x2f\x62\x44\x1b\x4d\xc1\x45\xe9\x91\xee\x0a\xc9\x34\x5b\xff\x64\xb4\x48\x38\xab\x37\xf4\x50\xb0\x54\xfb\x6b\x84\x73\xa2\xb7\x3c\xc9\xe8\xcc\x48\x97\x88\xe9\x98\x3a\xfc\x85\xbb\x5e\x52\x3c\xd6\xcc\xcf\x9c\xd7\x53\xac\xf1\xe3\xe7\x7a\x6f\x28\x42\xd8\xff\xfc\x27\x43\xd9\x34\xc4\x9b\x70\x3d\x1d\xf0\xe3\x34\x85\x10\x47\x89\x7e\xf8\x1b\x00\x00\xff\xff\x7f\x7c\x2a\x1d\x69\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x60, 0x8e, 0x6c, 0x2c, 0xda, 0xc7, 0x72, 0xc1, 0x5, 0x76, 0x93, 0x4c, 0xc1, 0xcf, 0xa6, 0x57, 0x3a, 0xbe, 0x5f, 0x2f, 0xd1, 0x53, 0xa, 0xb7, 0x8c, 0xbb, 0x4e, 0xfc, 0x10, 0xea, 0xa9}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x59\x73\xdb\xb8\x93\x7f\x26\x3f\x45\xaf\x2a\x9b\x21\x63\x0d\x35\x99\xc7\xec\x7a\xab\x12\x5b\x9e\xf5\xac\x23\x65\x7d\xcc\xfc\xa7\x52\x29\x89\xa1\x20\x99\x63\x0a\x50\x00\x48\xb6\x4a\xc5\xef\xfe\xaf\x06\x40\x12\x3c\x64\x49\xbe\x92\x4c\xec\x27\x09\x47\xa3\xd1\xc7\xaf\x1b\x0d\xc8\xb3\x30\xba\x0a\x27\x04\x56\xab\x17\xc1\x87\x50\x5e\x06\x1f\x74\x43\x9a\xba\x6e\x3c\x9d\x31\x2e\xc1\x73\x01\x5a\x11\xa3\x92\xdc\xc8\x16\x7e\x26\x34\x62\xa3\x98\x4e\x3a\x7f\x0b\x46\x5b\xae\xd3\x22\x9c\x33\x2e\xf0\x93\x90\x3c\xa6\x13\xf5\x51\xc6\x53\xd2\x72\x5d\xa7\x35\x89\xe5\xe5\xfc\x73\x10\xb1\x69\xe7\xef\x30\xba\x8a\x3a\xb3\xc9\x4d\xcb\xf5\x5d\xb7\xd3\x81\xdf\xba\xbd\xee\xe9\xdb\xf3\xee\x21\xbc\xfb\x0b\x3e\xf4\x7f\xeb\x07\x70\xd8\x87\x5e\xff\x1c\xba\x87\xc7\xe7\x81\x1a\xd3\xe5\x1c\xb9\x3b\x0f\x3f\x27\x24\xf8\x10\x8a\x28\x4c\xd2\xb4\xc7\xe4\x11\x9b\xd3\x11\x70\x22\xe7\x9c\x92\x11\xc4\x63\x90\x97\x7a\x23\x7a\x68\x2f\x9c\x92\x34\x85\x58\x00\x65\x12\xc6\x38\xda\x5d\x84\x7c\x03\xbd\x7d\xd0\xbb\x09\x7a\xe4\xda\x6b\x15\x03\x0f\xc2\x29\x49\xd2\xb4\xa0\xd5\xd2\x3b\xa8\x93\x02\x4e\xc4\x3c\x91\x30\x0a\x65\x08\x63\xc6\x41\x51\x39\x8b\x2e\xc9\x34\x34\x4c\xb5\x82\x56\x95\xcf\x96\x2b\x97\x33\xd2\x44\x4e\x48\x3e\x8f\x24\xac\x5c\x80\xd5\xea\x67\xe0\x21\x9d\x10\x78\x11\xb1\x04\xde\xec\x43\xce\x1e\x4b\xe6\x53\x2a\x20\x4d\xd5\x30\xec\x2e\x28\xac\x56\x28\x1d\xd5\xd6\x63\xb2\x37\x4f\x12\x48\x53\x33\xe8\x1c\x57\xcd\xd8\xc3\x56\x20\x89\x20\x90\xa6\xaf\xd6\x0f\xa0\x23\x48\x53\x18\xa2\xfa\xdf\xb4\xcc\xb0\x33\x1a\x5e\x91\x34\x6d\xb3\x69\x2c\xc9\x74\x26\x97\xad\xa1\x61\x58\x0f\x77\x53\x25\xae\x1e\xb9\xde\x52\x1e\x10\xd3\xd9\x5c\xba\xe3\x39\x8d\x70\x96\xe7\xc3\xab\x63\x6c\x51\x82\xd0\x5a\x87\x97\xaa\x65\x95\x11\xd7\xfd\x77\x92\xbb\x9e\x7a\x17\x51\x6b\xb9\x2a\xf3\x40\xa9\xbc\xca\x5a\x4a\x72\xcb\x06\xff\x5c\x28\x62\x9e\x24\x48\x4e\xf7\x00\x50\xf3\x3d\x9b\xae\x95\xa7\x28\x6e\x22\x69\x04\x5c\x95\xf6\x6a\xb5\x79\x03\xda\x80\x4b\xc6\x22\x88\x14\xca\x93\x32\xcd\x66\x72\x52\x9a\xf0\x0a\xf9\x9d\x5d\x32\x2e\x91\x3f\x25\x3b\xbf\x4a\xc8\x33\xdf\x33\xc7\x69\x36\xa7\x92\x56\x6b\xb4\x83\x0a\x8d\x7d\x78\x59\x6e\x29\x4c\xa1\x36\x57\x8b\xa0\x59\xe0\x68\x88\x6b\xe5\x7d\x1d\x27\x09\x4a\x41\x09\x61\x98\xf5\xa3\x14\x20\x4d\x87\x20\x19\xf4\x2e\x4e\x4e\x90\xee\xb0\xcc\xcc\x50\x61\xcd\x3c\x49\x36\x8a\x6a\xed\xe2\x55\xa1\xad\x55\xfd\x06\xb9\xad\xb7\xa6\x1d\x45\x68\x99\x94\xf5\x11\x05\xf8\x3e\xe4\xe2\x32\x4c\x7e\x3f\xeb\xf7\x60\xaa\x3f\x17\x76\x53\x06\x4d\xf4\x65\xc9\x00\x87\x6e\x14\x8d\x45\xd6\xf3\xc1\xfb\xf8\xe9\xf3\x52\x92\xb6\x06\x65\xdf\xf6\x7d\x44\x9f\xc0\x8c\xae\xd3\xf3\x0d\x24\x5c\xd0\xa9\xc5\xe7\x9c\xe6\x9c\xe2\x74\xd4\x65\xd8\xc4\xef\x46\x2e\x4b\x64\x3d\x85\x38\x9a\x53\x5f\x73\x5a\x63\x34\x9f\xa0\x06\xb7\xeb\xb2\x56\x0c\x6f\x5a\xf6\x4c\x85\x57\xcf\x07\x1d\x67\xed\x55\x1a\x80\x6d\x0b\x82\x91\x86\x02\xcf\x87\x69\x38\xfb\xa8\xa9\x7e\x8a\xa9\x24\x7c\x1c\x46\x64\x95\xaa\x15\xcc\x20\x84\x90\x69\x78\x45\xbc\xe6\xa1\xbe\xab\xe1\x70\x0b\xd0\xbc\x1d\x09\x01\x7b\x76\x31\xe9\xff\xd8\x07\x1a\x27\x8a\x55\xfd\x67\x18\xfe\x58\x41\xb0\x4f\xb0\x8f\x0e\xb5\x35\x61\x43\xaf\xe0\x38\x07\xda\x35\x2c\x56\x9c\xb7\xc2\xd7\x6e\x5c\xd5\x9c\x54\x33\x92\x87\x5f\xb7\x50\xbd\x21\x5c\x44\xd8\xa3\x38\x91\x84\x43\xc4\x49\x28\x89\x80\x10\x28\xb9\x86\xb1\x6a\xcc\xe3\xa9\x1e\x83\x51\xd5\x8c\xb6\xc3\xaa\x6e\xca\xe3\xaa\x19\xa1\x29\x88\x9d\x63\xab\x99\x9e\x07\x57\x67\xcc\xf8\x34\x94\x02\x3e\x7e\xd2\x66\xe4\x3a\x8b\x30\x99\x13\x01\xf0\xd1\xb6\x28\x5c\x1d\x13\xb6\x01\xcc\xd8\x84\x05\x07\x8c\x8e\x62\x19\x33\x0a\xfb\xe0\x19\xae\x7d\x8f\xc6\x89\x4e\xc4\x0e\x92\x70\x2e\x08\x8c\xa9\x31\xfa\x71\xb6\x33\xdf\x74\xe1\x5e\x35\x21\x3d\x72\xe5\x3a\xd9\x7e\xad\xe6\x95\xeb\x38\x08\xb6\x6f\x00\xa0\xf5\xe7\xff\x76\x4f\xbb\xad\xb6\xeb\x38\x47\x8a\xe5\x37\xc6\xf1\x44\xf0\x3b\x8b\xa9\x37\x0e\xcc\x4e\xda\xd0\x82\xb7\xbd\x43\x68\xf9\x38\xf6\x43\xc8\xc3\xa9\x78\x03\xe3\x40\x6f\xab\xed\x3a\x99\x24\xdf\xd2\x51\xa6\x88\x4e\x07\x6a\x8c\xbe\xa5\x23\x2f\x93\x72\x10\x04\x79\x7b\xa1\xa3\x4e\x07\x00\x50\x28\x91\xe2\xd6\x92\xa1\xea\x41\xd5\x0c\xda\x66\x09\xf4\x3f\xed\x8d\x19\x4d\x33\x1f\x60\x00\xfb\x16\x1f\xf8\xd7\xe9\xe4\x24\xf7\x21\x9c\xcd\x08\x1d\x79\xa6\xa1\x6d\x76\x6d\x58\x2b\x14\xe1\xf9\xbe\xaf\xe7\xa7\x66\xf9\xa0\x46\x23\x6f\x6a\x97\x65\x97\xb7\x66\x92\x33\x94\x8c\x4a\xc6\xf8\x4d\xcb\xac\xcf\x6f\x13\x59\x9f\xff\x80\x12\xeb\x9f\xae\x15\x58\x81\xc0\xc5\x96\x32\xaf\x3c\x32\x9b\x52\xc1\xbc\x18\x46\x92\x91\x1a\x65\x98\x3d\xc2\x06\x51\xca\x33\x55\x9a\x68\x86\x5a\xc0\x5b\xb4\x1d\x12\x11\xf1\x78\xa6\xbc\x33\x4d\xeb\x1e\xd8\x30\xdb\x5b\x58\xad\x0d\xe9\x8d\x05\x4b\x59\xb4\xd0\x63\xcf\x66\x9c\x84\x06\x88\x51\xaf\xdc\x06\x12\x54\xa7\xde\xd8\x02\x1d\xdc\xe1\x96\x60\x39\xca\xee\x3f\x45\xcb\x47\x7f\x44\xd1\x67\x38\x64\x89\x3e\x77\xe8\xf1\x54\xe2\x4a\x31\x95\x63\x6f\x58\x30\xaa\x71\x00\x13\xc1\x8a\x76\x90\xb8\x35\x2e\x67\x72\x88\x1a\xcf\xcd\x2c\x2e\x2c\x6c\x61\x02\x43\x86\x12\x36\x17\x06\x37\x20\xc6\xa9\x79\x66\xaf\xcf\x65\x1b\x39\x6f\xe4\xd6\x77\x9d\xdb\x16\x5a\xf8\xe5\xe3\x83\x93\x5b\xd5\x6d\x29\x60\x9f\x8f\x08\x7f\xb7\x04\x31\x23\x51\x3c\x8e\xa3\x98\xe8\x0c\xb0\x7f\x7a\xd8\x3d\x7d\xb7\xc4\x33\xfd\x7f\x33\x1c\xf3\x3f\x3a\x10\xe4\xe3\xb5\xb2\xdc\x88\x51\x21\xc1\x73\x1d\x44\xc6\xb3\x03\x10\x8c\x4b\x01\x9f\x97\x10\x8a\x88\xd0\x11\x66\x38\x6a\xba\xeb\x60\x6f\x36\x7b\x1f\x5a\x6f\xcf\x0e\x5a\xae\x9a\x76\xd8\xb5\xe7\x8d\x48\x75\xa2\xea\xb7\x66\xe2\xf7\xac\xf8\xd0\x23\xd7\xaa\x27\x8f\x19\x59\x03\x46\x0a\xdd\x63\xc5\x08\xd5\xb0\x21\x28\xa9\x31\x56\x4c\xd2\x44\x14\x2b\x5a\x32\x93\x78\x41\x28\x28\xe5\x08\x4b\x26\xb7\xc5\xc6\xb4\x31\xba\x31\xc3\xe1\x3d\x82\x9b\xd2\x12\xbc\xfb\x6b\x7d\x7c\x63\x56\x7c\x6b\xeb\xe0\x56\x39\x59\x16\xe0\x61\x20\xa6\xaf\xf7\xba\x1e\x33\xb4\xae\x2c\x1b\xcd\x0f\x56\xa8\x77\x0a\xe4\x66\xc6\x89\x10\x31\xab\xef\xb4\x09\x44\x94\x6c\x33\x05\xdb\x6a\x63\x75\x1f\x61\x3b\x79\xb7\xa2\xec\xfb\xb9\x1c\x99\x5b\xb3\xff\x63\x2a\x08\x97\xe5\x23\x44\x51\xbd\x90\xac\x38\x0e\x6d\xce\x94\xd4\x66\x35\x41\x6f\xf4\x59\x1b\xd7\xe1\x3b\xfb\xa0\x90\x9f\x09\x4d\xee\xee\xbd\xaa\x17\x8b\x4a\x07\xa5\x4e\x07\x26\x44\x42\x98\x24\x8a\x11\xca\xe8\xcf\x98\x8f\x66\xe9\x7c\x48\x47\x30\xe3\x64\x16\x72\x82\xfd\x53\x85\x51\x38\xf0\xcb\x9c\xf0\xa5\x0b\x30\x88\xda\x30\x88\xdb\x30\x58\xa0\x86\x45\x12\x47\xc4\xab\xb1\x13\xe4\x47\x88\x36\xfc\xa2\xce\x00\x9d\x0e\x88\x2f\x09\xc4\x5a\x38\x8a\x58\x1b\x66\x3c\x9e\x86\x7c\x09\x57\x64\x09\x33\xce\x16\xf1\x88\x8c\x50\xe3\x82\x7c\x99\x13\x1a\x11\x17\x70\x92\x90\x2a\x5e\x0d\x15\x30\x1e\xf7\xce\xba\xa7\xe7\x70\xdc\x3b\xef\x6f\x5b\x32\xf2\x86\xb0\x57\x36\x61\xdc\x83\xb2\x5d\xd8\x83\xa1\xaf\xe8\xfe\xf1\xf6\xe4\xa2\x7b\xd6\x34\x36\xae\x8d\x3d\xed\x9e\x5f\x9c\xf6\x8e\x7b\xbf\x59\x7a\x38\x55\xf6\x10\xd3\x89\xc2\xe2\xa1\xd9\x72\xc2\x26\x7a\xaf\x18\xa9\xae\xc9\x4f\x0b\x52\xec\x33\xc4\xde\x09\xe1\xae\x3a\x37\x28\xd5\x9e\xb0\x49\xf9\x7c\x90\xb5\x7a\x5a\x0c\x28\xf5\x20\x08\x34\xfe\x9b\x40\x37\xa8\xdb\x42\xdd\x02\x30\x8b\x67\xd7\x28\xc5\xd1\xe7\xe0\xff\x91\xa1\x53\x76\x5d\x27\x1a\x8f\x81\xa8\x58\xc4\xae\x83\xb3\x28\xa4\xf6\x19\x31\x0a\x69\x9a\xfa\xff\x05\xa4\xcc\xa1\xf1\x03\x1a\x27\x6d\x20\x19\x5f\x19\xc8\xd4\x79\x6b\xe3\x48\x8d\x16\x9d\x57\x70\x14\x53\x94\x03\xb2\x86\x7e\xae\xea\x2b\x6c\x0c\x51\x06\x9f\x02\x5e\x75\x34\x68\x98\x91\xc3\xfa\xd6\x14\x44\x08\x36\x25\xd6\xb4\x40\x3b\x0e\x4e\x2a\xb9\x0d\x8e\x50\x19\x61\x19\xa5\xb7\xf0\x9a\x81\x40\x31\xa9\x26\x14\x50\x79\xbe\xf0\x14\x61\x25\x44\x07\x65\xc8\x79\x21\x24\xc7\x29\x89\x88\x73\x84\xcb\xc2\x21\x04\x49\x48\x74\x47\x87\x38\xeb\x9e\x74\x0f\xce\x61\xb5\xca\x74\xa4\x68\xa5\x29\x0c\x61\x4f\x29\x67\x78\x74\xda\x7f\xbf\xad\x9b\x64\x93\x06\xe2\x87\x31\x5e\x35\x65\x7f\x1f\x66\x93\x9b\xa0\xcb\x79\x8f\x9d\xb2\x6b\x91\x1f\xcd\x6d\xbd\xdd\x7a\x3d\xe0\x16\x05\x81\x7b\xbb\xc3\xbb\x25\x7c\x30\x46\xf0\x7f\x64\xa9\xed\x5f\x57\xea\xb3\xc5\x75\x2f\x76\xea\xae\x17\xb3\x2b\xdc\x76\x63\xb7\xf1\x9c\x77\xcb\xd5\xea\xc5\xec\xaa\x28\xe7\xde\xc5\x93\xaa\x44\xaa\x01\x69\x76\x65\xeb\x70\x76\x55\x2f\xea\x6e\x13\x9b\xee\xeb\x13\x4a\x0b\xeb\x1c\x43\x75\xee\xe0\x13\x6a\xbc\x3a\xee\xab\x09\xb3\xab\xdc\x59\xf6\xe1\xc5\xeb\xc7\xc4\xf9\x97\x25\x81\x3e\xb4\xcf\xd4\xa9\x7f\xcf\xce\x63\x55\xbf\x6c\x37\xba\xa0\xf1\x97\x39\x31\x89\x4d\xee\x48\x26\x45\x8d\x47\x37\x96\xd3\x1c\xd3\x11\xb9\x21\x22\x3b\xcc\xc4\x63\xf0\x30\x0f\xc2\x51\xc1\xb1\x30\x84\x3c\xca\x64\xd6\x64\xbc\xcc\xf7\xab\x4e\x86\xdd\xef\x89\xbc\x64\xa3\x34\x85\xb1\x0e\x5a\x75\x7d\x7d\x5e\x82\x19\x6b\x1d\x91\xb3\x13\x72\x23\xad\xaa\xb3\x61\x9f\xae\x28\x7d\x65\x0f\x7b\xf1\x70\x2e\x66\xb6\xf5\xe7\x25\xe1\xe4\x71\xb3\x28\xb3\xd2\x1f\x21\x8f\x91\x17\xf1\xf0\x1e\xd6\xbc\x82\xc9\x1e\xd6\x3b\x99\xf1\x44\x3b\x7f\xc8\x5c\x8d\xf3\xed\x9c\xed\x6e\xde\xc6\xf9\x2e\xfe\x66\x1d\xfd\xeb\xae\xf7\x3e\xa4\x4b\x9d\xce\xe5\x61\xa4\x94\xc6\xa9\x7e\x74\x0d\x01\x53\xfc\xb8\x65\x7a\x52\xa6\x58\xb8\x0a\x92\xdb\x32\xc9\xfb\xf8\x69\x93\x7b\xa0\xf6\xad\x21\xc9\x9c\x87\x49\x66\x02\x8d\xb3\xdd\x87\xc9\x0d\xd7\xac\xf9\x9c\x2f\x5a\xf9\x22\x67\xd7\x22\x17\x72\xe6\x73\xcd\x69\x60\xd5\x7f\xb6\x91\xb2\x76\x8b\x11\x19\x13\xae\x96\x0a\x0e\x12\x26\x88\xa7\x0e\xaf\xaa\x7e\x88\x6d\x3d\x72\x23\x3d\xdf\x50\xdd\x05\x2a\x4a\x11\x56\x6c\x1b\x62\x37\x05\xd9\xcd\x3b\xdb\x0c\x06\x19\x1c\x6c\x2b\xa5\xe2\xea\xab\xd9\x4d\xf2\xc2\xca\x5a\x3a\x0d\xd0\x92\x55\x34\xe3\xb1\x96\x4f\x97\x73\xcf\xdf\x4d\x87\xc5\xbc\x0a\x92\xad\x9d\x61\xa7\xde\x17\xb3\x51\x28\x09\x4c\x43\x19\x5d\xc6\x74\xa2\xa8\x55\x20\xa7\x6d\x08\x62\xf7\xeb\xec\x39\x4f\x06\x6c\x66\x7e\x83\x9b\x28\x4a\x31\xbd\x1b\xcc\x35\xad\xa9\xa1\x4f\x2f\xb8\x55\x51\xe8\xdb\x3a\xf7\xea\x32\x27\x12\xbb\xa5\x6a\x64\x10\xc5\x2a\x44\xe9\x4a\x93\x28\x15\xa0\x7e\x2d\x2a\x50\x9a\x6a\x1b\x12\x42\xbd\xc1\x42\x15\xd7\x07\x8b\xc2\x16\x71\x0b\x83\xc5\xaf\x8a\x53\x83\xa5\x44\xce\x67\x8a\xf0\x5c\xab\xce\x94\x5f\x1d\xe5\xd5\xf3\xca\xe5\x41\xdc\x86\xa8\x28\xd2\x0f\x22\xb5\xbf\xc1\xdc\x5a\x60\xde\x86\x68\x0f\xcf\x05\xad\xbd\x41\xfc\x31\xfe\xe4\x17\xb0\x6d\xe4\x10\x52\xf3\x0a\x20\x1e\x03\x65\xd9\xb2\xea\x3d\x13\xc4\x22\x87\x4a\xed\x05\x6a\x1f\x73\x1f\x5d\xff\x97\xa6\x4a\x4b\xe5\x35\x5a\xf9\x91\x5e\xa0\x8d\xe3\x0d\x2e\xa3\xe9\x67\xc4\x5b\xc6\x39\x1c\x13\x4d\x74\x51\xcf\xb1\x62\xc4\xc5\x87\xc3\xb7\xe7\xdd\x6d\xad\xf5\xac\x7b\xae\xe2\x80\xe3\x94\x6b\x66\x73\xab\x66\x66\x06\x0c\x84\xf5\x65\xb8\xa1\x84\xf6\x44\xf5\x33\x54\xce\x9c\x96\xca\x9b\xdf\x55\x55\xe2\x69\xca\x12\x0f\x83\x8d\x2a\xed\xd3\x46\x2f\x1e\x06\x27\x8b\x2a\x85\xbd\x7c\x98\x24\x86\x01\x61\x23\x65\x2d\x4d\xbc\x0b\x5a\x7e\xbb\x09\xe4\x33\xc8\x7e\x25\x90\x45\xbb\x7a\x06\xda\xe7\xdc\xfd\x39\x77\xff\xca\xb9\xfb\x83\x17\xce\x33\xb2\xb5\xd2\x79\xf3\x53\xd6\x1d\x02\x57\x2c\x45\xa5\x9e\x6c\x47\xaa\xfb\xd6\xd9\xef\x75\x3b\xbc\x4b\xe0\x18\x31\xfa\x93\xcc\x20\x16\x41\xde\xaa\x46\x28\x77\x4c\x88\x2c\x82\x46\x79\xc3\x5b\x06\x9f\x7a\xec\x79\xfd\x03\xc5\x96\xaa\x25\x3c\x41\x9c\x31\x51\xc3\x84\x1b\xd8\x18\x6c\x86\x6b\x6f\x47\x76\x0c\x40\x5a\x9d\x45\x16\xae\xde\x24\xbd\xc9\xd5\x53\x7a\x02\xba\x2a\xdf\x5f\xa4\x79\x04\x79\xa4\x58\xa6\xb9\x79\x9a\x83\x43\x69\xad\xef\xfa\xf0\x50\xad\x0d\xe7\x30\x3d\xd7\xf7\x29\xb1\xb9\x74\xb9\xf5\x66\x46\xdf\xbd\x88\x3a\x24\xdf\x7e\xd1\x92\xcb\xba\x8a\xab\x3b\xdf\xa9\xdc\xf7\xad\x4d\x38\x1a\x65\xd6\x2c\x8d\xf3\xb6\x81\x2d\x08\xe7\xb1\x7a\x91\x46\x6e\x62\x21\xf1\xc3\x15\x59\x0a\x65\x93\x9c\x08\x42\x25\x46\x14\x34\x2f\xfd\x7b\x27\x68\xe0\xa2\x01\xa2\xeb\x0f\xed\x71\x4f\xc5\x2b\xfb\xe0\xf6\x5f\xe3\xf8\xa5\x77\xe4\xe6\xa1\x10\x32\x91\xbd\x25\xbf\x67\x7c\xc0\x2d\x96\x7f\x44\x65\xb1\x97\xa6\x8d\x31\xa3\x08\x18\xa5\xa7\x88\x77\x8c\x1e\xab\x55\x42\x68\x65\xd9\x1f\x2d\xa0\xd8\x2e\x70\x4b\x44\xc9\x6f\x1c\x32\x80\xbb\xf7\xd9\x05\x59\xde\x10\x50\xd4\x25\x44\xd3\x6d\x60\xd1\xbb\x53\x3c\x29\x03\x74\x16\x53\xca\xc1\x24\x6d\xfe\x5d\x5f\xd5\x34\xab\xcf\x64\xb3\x47\xb2\x15\x17\xaa\xfe\xfa\x6e\xdd\xb4\xe7\x88\xf5\x5d\xbc\x23\xd8\xee\x75\xda\xa1\x82\xad\xc6\x37\x35\xa2\xe9\x51\x0d\x68\x83\xd5\xaf\x7f\xc7\x31\x17\xd2\x94\xac\xcc\x73\x1b\x4d\xef\x5b\x7f\xba\xa6\xc1\xba\x09\x1f\x0e\xbb\x27\xdd\xf3\xee\x2e\xcf\x00\xac\xdb\xc4\x32\x18\x7c\x1b\xf5\x8b\xef\xaa\x2a\xfc\x64\x6f\xd5\x76\x71\x0e\x55\xfe\xdd\xd6\x41\xd6\xd4\x73\x4b\xde\xf1\x83\xdd\xfb\xff\x40\xce\xf6\x5c\x2c\x7c\x2e\x16\x3e\x4e\xb1\xf0\x1e\xd5\x40\x0d\x3a\x5b\x56\x03\xc7\x9c\x4d\x77\xf8\x99\x07\x48\xfc\x66\x83\xdb\xd3\xbd\xb5\x7d\x14\x5c\xd9\x50\x15\xfa\xaa\x58\xd3\xfc\xb0\xf6\xf1\xd2\xe3\x7f\xee\x53\xdb\x6d\x2a\x36\x96\x39\x97\x2a\x36\xda\xec\xc4\x6d\xff\x68\x61\xcd\xd4\x07\x7e\x09\xfb\x98\xf6\x7f\xcf\x23\xec\x53\x3e\x7b\x7d\x54\xfb\x6f\x58\xf4\x1f\xe2\x04\xf7\xbd\x61\x12\x84\xcb\x5a\x4c\xd1\xbf\x91\x13\xe5\x1f\x69\x68\x13\x1b\xb6\x75\x95\x08\x13\x63\xd4\x15\xca\xdd\xfc\xcb\x19\x8b\xc2\x10\xc2\x84\x93\x70\xb4\xd4\xd5\xc5\x2c\x6f\x6e\x5e\xee\x09\xaf\x97\x9c\x07\xab\x87\x3a\x5b\x95\x43\x83\xca\x4e\x2b\x50\xec\x3a\x5b\x56\x33\x9d\xe6\x52\xa3\x73\x5b\xa5\xf1\x17\x33\x6f\xb7\xaa\xe2\x60\xfb\xaa\x62\xf7\x5f\x07\x27\x17\x87\xdd\xc3\xa0\xb5\x17\x7d\xe5\xd2\x62\x93\x59\xdd\xb1\xb2\xf8\x08\x3f\xef\x34\xb8\x3b\xdc\xf2\x17\x9e\xd9\xf0\x7e\x0f\x0e\xfa\xbd\xa3\x93\xe3\x83\x73\xf0\xec\x44\x26\x1f\x71\xd8\x07\x53\x08\xdd\xf2\xba\xec\x9b\x39\x61\x19\xb4\xff\x26\xde\xbc\xbd\x7c\xa9\x3f\x37\xc1\xfa\x53\x65\x29\x96\x09\x97\xb2\x94\xbb\x21\x71\x51\x39\x3e\x89\x85\xdc\x06\x8e\x6f\xc9\x6f\xe0\xf9\x5a\xaa\xf1\x5a\xea\x2b\xfd\x7e\xfd\xbb\x82\xac\xaa\x21\xae\x41\xae\x8d\xdc\xec\x83\x57\x84\x9b\x75\x83\x8b\x78\x54\x66\xea\x19\xf1\x9e\x16\xf1\xd0\x50\xd1\xa8\x21\x62\x74\xa1\xd0\x8b\xcd\x79\xee\x1e\xea\x1f\x50\x08\x36\x25\xf2\x32\x43\x2e\x75\x0a\xe2\xf1\x82\x70\x88\x42\x0a\x73\x3a\x22\x5c\xc8\x90\x8e\x34\x4c\x69\x0f\xc9\xe6\x37\xff\x97\xb7\x36\xb0\xf1\x58\x10\x44\x07\xc4\x9f\x28\xcf\x6a\xda\x10\x5b\x9f\x17\xe5\x9b\x37\x95\x12\x52\x14\x9b\x99\xbd\x07\xaf\x75\x1a\x14\xb1\x44\xdd\x2b\x15\xa9\x50\xb6\x3e\xe6\x43\x91\xf5\x9f\x95\xda\x30\x6c\x0d\xf7\x22\x96\xec\x0d\x5b\x43\xdf\x75\x9c\xb8\xe8\x44\x1f\x79\xd1\xda\x13\x92\xa3\x28\x82\x63\xc9\x42\x8f\xfa\x38\xc8\x7a\xb4\xba\x50\x0b\x61\x23\xdd\xdb\xc3\x34\x2a\x2b\xcd\x46\x6d\x88\xdb\xb0\x70\x53\xf7\xdf\x01\x00\x00\xff\xff\x27\xa5\xc8\x91\x0e\x57\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x8e, 0x65, 0xd7, 0x94, 0x24, 0x9f, 0x8a, 0xb5, 0x17, 0xa7, 0x89, 0x6f, 0xce, 0xa2, 0xad, 0xb8, 0x5a, 0x9f, 0x4a, 0xc9, 0x87, 0xb6, 0x49, 0x57, 0xbe, 0xa8, 0xa6, 0xbc, 0xc5, 0x58, 0x1f}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xd1\x6f\xdb\xb6\x13\x7e\x16\xff\x8a\x83\xd0\x07\xb9\x31\xe8\xdf\x73\x81\xfc\x80\x26\xd6\xb2\x0c\x9d\xed\xb9\x1e\x86\x62\x18\x56\x9a\xa2\x24\x2e\x12\xa9\x92\x54\x1c\xc3\xd0\xff\x3e\x1c\x29\xc9\xae\xda\x04\xeb\x63\xde\xc4\xe3\xdd\x77\xf7\x7d\x3c\x1e\xd5\x30\xfe\xc0\x0a\x01\xa7\xd3\x1b\xba\x61\xae\xa4\x9b\x60\xe8\x3a\x42\x64\xdd\x68\xe3\x20\x21\x51\x5c\x48\x57\xb6\x7b\xca\x75\xbd\xf8\x87\xf1\x07\xbe\x68\x8a\xa7\x98\xcc\x08\x59\x2c\xe0\x2e\x5d\xa5\xdb\xf7\xbb\x74\x09\x37\x9f\x60\xb3\xbe\x5b\x53\x58\xae\x61\xb5\xde\x41\xba\xbc\xdf\x51\xef\xb3\xbc\x01\x69\xc1\x95\x02\xb8\xae\x6b\xad\x40\x2a\x27\x4c\xce\xb8\x80\x5c\x1b\xc8\x98\x63\x7b\x66\x05\xe8\x46\x18\xe6\xa4\x56\xe8\xcc\x1c\x70\xa6\x60\x2f\xa0\xb5\x22\x83\x83\x74\x25\x62\xb9\x63\x23\x2c\xe4\x46\xd7\x60\x79\x29\x6a\x06\x9f\x4f\x27\xa0\x1f\xfd\x37\x5d\xb1\x5a\x40\xd7\x7d\xa6\xb0\xd2\x4e\x04\x14\x57\x4a\x8b\xf9\x31\x9a\x55\x56\x03\xd7\x8d\x14\x19\x16\xa1\x41\x30\x5e\x82\xce\x7d\x71\x8e\xed\x2b\x01\xbd\x26\x96\x92\xc5\x02\x43\x76\x18\x6e\x4b\xdd\x56\x19\x1c\xb4\x79\xf0\x95\x8c\x35\x2f\xec\x97\x8a\x2e\x6f\x80\xa9\xec\x6b\xdb\xee\x89\x12\xac\xd5\x93\x1f\xe9\x9e\x48\x94\x3e\x09\x9e\x58\x67\xa4\x2a\xe6\x40\x29\x1d\x37\x4f\xdd\x0c\x92\xa6\x78\xa2\xb7\xba\xae\x99\xca\x76\xac\x98\x83\x30\x46\x9b\x19\x89\x7e\x6b\x85\x39\x3e\x1f\xf6\x16\xe3\xb6\xfa\x60\x27\x11\x5b\x7d\x78\x36\x68\x88\x21\x9d\x3f\xa4\x0f\xba\x80\xbc\x55\x1c\xf5\xa7\xb0\x7e\x14\xc6\xc8\x4c\x04\xf5\x3c\x65\x94\xa8\xd2\x45\x21\x0c\x0a\x76\xd4\xad\x01\x5e\x6a\xc9\x05\x79\x64\xc6\x87\x5f\x7b\x80\x67\x13\x9e\x42\xa2\x5b\xad\x32\xd9\x9f\x72\x6b\x94\x05\x06\x95\xb4\x0e\x41\xf9\x79\x0b\x4f\x07\xbd\xed\x97\x0a\x78\xc5\x5a\x2b\xac\x17\xb9\x61\x86\xd5\x96\x60\xa2\x0b\xa4\x04\x23\x2d\x66\x1c\x6d\x33\x48\x30\x76\x28\x26\xc4\xc1\x9f\x7f\x5d\x94\xe4\xc5\xea\x05\xc3\xa3\x41\x1e\x87\x52\x18\x81\x7e\x21\x30\x18\x0b\xa3\xdb\x66\x7f\x9c\x9a\xb5\xc9\x84\xf9\xd6\x5c\xc9\x5a\xba\xa9\x11\x15\x94\xca\x11\x12\x61\xcb\xff\x3d\xf7\x5c\xe1\xdd\x35\x18\xa6\x0a\x01\xa1\xfe\x13\x89\xa2\x40\x16\x77\xd0\x46\x6f\xfd\x32\x99\x91\x28\xb2\x07\xe9\x78\xd9\xab\x41\x77\xd8\x5c\x3e\x00\xaf\x4e\xfc\xc7\xcf\xe9\x36\x8d\xdf\x91\x28\xf2\xe9\x8c\xc8\x27\x64\x71\xa7\x4f\xed\xb5\xb8\xc8\x1d\x00\x37\x41\x21\x84\x8c\x22\xe9\xca\xab\x2b\xff\xe5\x91\xae\x81\x35\x8d\x50\x59\x82\xab\x39\xc4\x6f\xe2\x2b\xeb\x0c\xd7\xea\x91\xde\x3b\xcd\x12\xe9\xca\xd9\xcc\xbb\xf7\x3a\x8f\x01\x61\xdd\xe7\xf4\x2e\xbe\x92\x5e\xe6\xd1\x2d\xac\xe7\x90\xd7\x8e\x7e\x6c\x8c\x54\x2e\x4f\xfa\xba\x7e\xd2\xa6\x66\x6e\xee\x29\x51\x4a\x7d\x9e\xc0\xf9\x6e\xbb\xfe\x7d\x03\x37\x9f\x5e\x0f\xed\xb1\x91\x46\xc7\xc1\xf2\x83\xd4\xd7\xdb\x65\xba\x7d\x55\xd4\xc7\xcb\x32\x3a\x0e\x96\x1f\xa4\xfe\xe1\xfe\xd7\xfb\xdd\xeb\xe1\xdd\x4f\x83\xd1\x2d\xac\xff\x33\xe7\x4c\xe4\xac\xad\x9c\xa7\x6b\x04\x0e\x4c\x1c\x89\xc3\x3c\x0b\x30\x29\x4e\xb0\x3c\x89\x5b\xf5\xa0\xf4\x41\x9d\xc7\xa8\x7f\x2d\x63\x84\xe9\x48\xd4\x11\x12\x2d\x16\xd0\xb4\x0e\xc4\xa3\x30\x47\x57\x4a\x55\x80\xd3\x85\x70\xa5\x30\xfd\x44\x6b\xdd\xc5\xdc\x92\x39\x54\x42\xf5\x77\x73\x06\xff\x87\xff\x79\xcd\xd0\xe9\x7c\x88\xad\x9b\xf7\xd3\x07\xbc\x54\x52\x15\x96\xfe\xa2\xa5\x1a\xef\x74\x0c\xef\x57\x4b\x88\x91\x4e\x37\x82\x0e\x7d\xff\x22\xec\x70\xc1\xa7\xc8\xe7\x4b\x13\xcf\xa7\xc0\x43\x57\xbd\x08\x3c\x5c\x9f\x29\xf0\xb9\x25\xbf\x05\x0e\x07\xf7\x22\xac\x6f\xcd\x29\xe6\x70\xe0\x67\x44\x32\x9e\xe4\x57\xb9\x3d\x04\xc4\xb3\xf3\xe1\x2a\x59\x91\xc9\xa3\x79\xfe\x99\x08\xbf\x17\xdf\xd9\xc0\xea\x86\x67\x03\xde\x86\xaf\x01\x26\x3c\x2e\xd6\x99\x96\xbb\x1e\xe0\xd2\x84\xa1\xfe\x61\x01\x18\x9a\x20\x34\xe5\xb8\xdc\x7c\xe7\x1d\x25\xdd\xbf\x01\x00\x00\xff\xff\xdf\x8d\x80\xfb\x49\x0a\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x39, 0xc9, 0xfb, 0x16, 0x3b, 0x90, 0x8e, 0xb, 0x71, 0x7f, 0x2e, 0x40, 0x97, 0x5f, 0xc0, 0xd7, 0x80, 0x64, 0x72, 0xdb, 0x2b, 0x2d, 0xef, 0xf3, 0xce, 0x72, 0x93, 0xff, 0xaf, 0x1a, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
