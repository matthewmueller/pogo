{{/* Variables */}}
{{ $User := .Table.Model }}
{{ $user := .Table.Model | singular | camel }}
{{ $users := .Table.Name | plural | camel }}

package {{$users | lower}}

import (
  "context"
  "encoding/json"
	"errors"
	"strings"
	"time"

	"github.com/jackc/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// Err{{$User}}NotFound returned if the {{.Table.Name}} is not found
var Err{{$User}}NotFound = errors.New("{{.Table.Name}} not found")

// {{$User}} result data for "{{$.Schema.Name}}"."{{$.Table.Name}}"
type {{$User}} struct {
  {{- range $col := .Table.Columns }}
  {{$col.Name | pascal}} {{ if $col.NotNull }}{{$col.GoType}}{{ else }}*{{$col.GoType}}{{ end }}
  {{- end }}
}

// New input builder for "{{$.Schema.Name}}"."{{$.Table.Name}}".
func New() *Input {
  return &Input{}
}

// Input data for "{{$.Schema.Name}}"."{{$.Table.Name}}"
type Input struct {
  {{- range $col := .Table.Columns }}
  {{ $col.Name | camel }} *{{ $col.GoType }}
  {{- end }}
}

{{ range $col := .Table.Columns }}
{{ $Email := .Name | pascal }}
{{ $email := .Name | camel }}
// {{$Email}} sets the "{{$email}}"
func ({{$user}} *Input) {{$Email}}({{$email}} {{$col.GoType}}) *Input {
  {{$user}}.{{$email}} = &{{$email}}
  return {{$user}}
}
{{- end }}

// MarshalJSON marshals the "{{$user}}" into JSON
func ({{$user}} *Input) MarshalJSON() ([]byte, error) {
  return json.Marshal({{$user}})
}

// UnmarshalJSON unmarshals json to a "{{$user}}"
func ({{$user}} *Input) UnmarshalJSON(data []byte) error {
  return json.Unmarshal(data, {{$user}})
}

func ({{$user}} *Input) String() string {
  return "{{$user}}"
}

func columns({{$user}} *Input) map[string]interface{} {
  columns := make(map[string]interface{})

  {{ range $col := .Table.Columns }}
  {{ $email := $col.Name | camel }}
  if {{$user}}.{{$email}} != nil {
    columns["{{$col.Name}}"] = *{{$user}}.{{$email}}
  }
  {{ end }}

  return columns
}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
  condition string
  params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
  return &WhereClause{
    condition: condition,
    params:    params,
  }
}

// DB is the common interface for database operations that can be used with
// types from schema `{{ .Schema.Name }}`.
//
// This should work with database/sql.DB and database/sql.Tx.
type DB interface {
	Exec(string, ...interface{}) (pgx.CommandTag, error)
	Query(string, ...interface{}) (*pgx.Rows, error)
	QueryRow(string, ...interface{}) *pgx.Row
}

// Model for {{$User}}
type Model struct {
  DB DB
  Log func(string, ...interface{})
}

// Insert a "{{$user}}" into "{{$.Schema.Name}}"."{{$.Table.Name}}"
func (m *Model) Insert(ctx context.Context, {{$user}}Input *Input) (*{{$User}}, error) {
  // get all the non-nil fields and prepare them for the query
  _c, _i, _v := slice(columns({{$user}}Input), 0)

  // sql insert query, primary key provided by sequence
  sqlstr := `
  INSERT INTO "{{$.Schema.Name}}"."{{$.Table.Name}}" (` + strings.Join(_c, ", ") + `)
  VALUES (` + strings.Join(_i, ", ") + `)
  RETURNING {{$.Table.SQLReturn}}
  `
  
  // log query if we've provided a logger
  if m.Log != nil {
    m.Log(sqlstr, _v...)
  }

  // run the query
  var {{$user}} {{$User}}
  row := m.DB.QueryRow(sqlstr, _v...)
  if e := row.Scan({{$.Table.GoScan}}); e != nil {
    return nil, e
  }

  return &{{$user}}, nil
}

{{ if .Table.Composite }}
{{ $cps := .Table.Composite }}
// Find a "{{$User}}" by its {{$cps.Description}}
func (m *Model) Find(ctx context.Context, {{$cps.GoParams}}) (*{{$User}}, error) {
  // sql select query, primary key provided by sequence
  sqlstr := `
    SELECT {{$.Table.SQLSelect}}
    FROM "{{$.Schema.Name}}.{{$.Table.Name}}"
    WHERE {{$cps.SQLWhere}}
  `
  
  // log query if we've provided a logger
  if m.Log != nil {
    m.Log(sqlstr, {{$cps.GoVars}})
  }

  // run the query
  var {{$user}} {{$User}}
  row := m.DB.QueryRow(sqlstr, {{$cps.GoVars}})
  if e := row.Scan({{$.Table.GoScan}}); e != nil {
    if e == pgx.ErrNoRows {
      return nil, Err{{$User}}NotFound
    }
    return nil, e
  }

  return &{{$user}}, nil
}
{{ end }}

{{ if .Table.Composite }}
{{ $cps := .Table.Composite }}
// Update a "{{$User}}" by its {{$cps.Description}}
func (m *Model) Update(ctx context.Context, {{$cps.GoParams}}, {{$user}}Input *Input) (*{{$User}}, error) {
  fields := columns({{$user}}Input)

  // don't update the foreign keys
  {{- range $cps.Columns}}
  delete(fields, "{{.Name}}")
  {{- end }}

  // prepare the slices
  _c, _i, _v := slice(fields, {{$cps.NumColumns}})

  // sql query
  sqlstr := `UPDATE "{{$.Schema.Name}}"."{{$.Table.Name}}" SET (` +
    strings.Join(_c, ", ") + `) = (` +
    strings.Join(_i, ", ") + `)
    WHERE {{$cps.SQLWhere}}
    RETURNING {{$.Table.SQLReturn}}`

  // setup the query
  values := []interface{}{}
  {{- range $cps.Columns}}
  values = append(values, {{.Name | camel}})
  {{- end }}
  values = append(values, _v...)
  
  // log query if we've provided a logger
  if m.Log != nil {
    m.Log(sqlstr, values...)
  }

  // run the query
  var {{$user}} {{$User}}
  row := m.DB.QueryRow(sqlstr, values...)
  if e := row.Scan({{$.Table.GoScan}}); e != nil {
    if e == pgx.ErrNoRows {
      return nil, Err{{$User}}NotFound
    }
    return nil, e
  }

  return &{{$user}}, nil
}
{{ end }}

{{ if .Table.Composite }}
{{ $cps := .Table.Composite }}
// Delete a "{{$User}}" by its {{$cps.Description}}.
func (m *Model) Delete(ctx context.Context, {{$cps.GoParams}}) error {
  // sql query
  const sqlstr = `
    DELETE FROM "{{$.Schema.Name}}"."{{$.Table.Name}}"
    WHERE {{$cps.SQLWhere}}
  `
  
  // log query if we've provided a logger
  if m.Log != nil {
    m.Log(sqlstr, {{$cps.GoVars}})
  }

  // run query
  if _, e := m.DB.Exec(sqlstr, {{$cps.GoVars}}); e != nil {
    if e == pgx.ErrNoRows {
      return Err{{$User}}NotFound
    }
    return e
  }

  return nil
}
{{ end }}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, `"`+col+`"`)
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}