{{ $shortClass := shortname .Table.TableName }}
{{ $class := classname .Table.TableName }}
{{ $shortModel := shortname .Table.TableName $shortClass }}
{{ $model := modelname .Table.TableName }}
{{ $singular := modelreturn .Table.TableName }}
{{ $return := pluralize $singular }}
package {{ .Package }}

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
)

// UpdateMany rows by the condition
func ({{ $shortClass }} *{{ $class }}) UpdateMany({{ $shortModel }} *{{ $model }}, condition string, params... interface{}) ({{ $return }} []{{ $model }}, err error) {
	fields := {{ $shortClass }}.getFields({{ $shortModel }})

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE {{ schema .Schema .Table.TableName }} SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
    `WHERE ` + condition + ` ` +
		`RETURNING {{ fields .Columns }}`

  values := []interface{}{}
  values = append(values, params...)
  values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
  rows, err := {{ $shortClass }}.DB.Query(sqlstr, values...)
  if err != nil {
    if err == pgx.ErrNoRows {
      return {{ $return }}, Err{{ $model }}NotFound
    }
    return {{ $return }}, err
  }
  defer rows.Close()

  for rows.Next() {
    {{ $singular }} := {{ $model }}{}
    err = rows.Scan({{ gofields .Columns $singular }})
    if err != nil {
      return {{ $return }}, err
    }
    {{ $return }} = append({{ $return }}, {{ $singular }})
  }

  if rows.Err() != nil {
    return {{ $return }}, rows.Err()
  }

  return {{ $return }}, nil
}
