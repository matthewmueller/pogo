{{ $shortClass := shortname .Table.TableName }}
{{ $class := classname .Table.TableName }}
{{ $shortModel := shortname .Table.TableName $shortClass }}
{{ $model := modelname .Table.TableName }}
{{ $return := modelreturn .Table.TableName }}
package {{ .Package }}

import (
	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a team by "{{ primaryname .Columns }}"
func ({{ $shortClass }} *{{ $class }}) Find({{ primaryname .Columns }} {{ primarytype .Columns }}) ({{ $return }} {{ $model }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT {{ fields .Columns }}
    FROM {{ schema .Schema .Table.TableName }}
    WHERE "{{ primaryname .Columns }}" = $1`

	DBLog(sqlstr, {{ primaryname .Columns }})
	row := {{ $shortClass }}.DB.QueryRow(sqlstr, {{ primaryname .Columns }})
	err = row.Scan({{ gofields .Columns $return }})
	if err != nil {
		if err == pgx.ErrNoRows {
			return {{ $return }},  Err{{ $model }}NotFound
		}
		return {{ $return }}, err
	}

	return {{ $return }}, nil
}

{{ range $idx := .Indexes }}
{{ if .IsUnique }}{{ if not .IsPrimary }}
{{ range .Columns }}
// FindBy{{ field .ColumnName }} find a {{ $model }} by "{{ .ColumnName }}"
func ({{ $shortClass }} *{{ $class }}) FindBy{{ field .ColumnName }}({{ param .ColumnName }} {{ fieldtype .DataType }}) ({{ $return }} {{ $model }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT {{ fields $.Columns }}
    FROM {{ schema $.Schema $.Table.TableName }}
    WHERE "{{ .ColumnName }}" = $1`

	DBLog(sqlstr, {{ param .ColumnName }})
	row := {{ $shortClass }}.DB.QueryRow(sqlstr, {{ param .ColumnName }})
	err = row.Scan({{ gofields $.Columns $return }})
	if err != nil {
		if err == pgx.ErrNoRows {
			return {{ $return }},  Err{{ $model }}NotFound
		}
		return {{ $return }}, err
	}

	return {{ $return }}, nil
}
{{ end }}
{{ end }}{{ end }}
{{ end }}
