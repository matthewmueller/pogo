{{/*************************************************************************/}}
{{/* Variables */}}
{{/*************************************************************************/}}

{{ $pkg := .Settings.Package }}
{{ $t := tablename $.Schema .Table }}
{{ $tn := .Table.Name }}
{{ $c := $tn | capitalize }}
{{ $cv := $c | lower }}
{{ $m := $tn | singular }}
{{ $mv := $m | lower }}
{{ $p := primary .Table.Columns }}
{{ $pt := coerceaccessor $.Schema $p.DataType }}
{{ $co := colnames .Table.Columns }}
{{ $idxs := indexes .Table.Indexes }}
{{ $cof := map $co (mprintf "\"%s\"") | join ", " }}
{{ $cog := map $co mcapitalize (mprefix "&cols.") | join ", " }}

{{/*************************************************************************/}}
{{/* Our Package */}}
{{/*************************************************************************/}}

package {{ $cv }}

{{/*************************************************************************/}}
{{/* Pogo marker */}}
{{/*************************************************************************/}}

// GENERATED BY POGO. DO NOT EDIT.

{{/*************************************************************************/}}
{{/* Errors */}}
{{/*************************************************************************/}}

// Err{{ $m }}NotFound returned if the {{ $mv }} is not found
var Err{{ $m }}NotFound = errors.New("{{ $mv }} not found")

{{/*************************************************************************/}}
{{/* All the columns in our table */}}
{{/*************************************************************************/}}

// columns in `{{ $t }}`
type columns struct {
  {{ range .Table.Columns }}{{ $t := coerce $.Schema .DataType }}
  {{ .Name | capitalize }} *{{ $t }} `json:"{{ .Name }},omitempty"` {{ if .Comment }}// {{ .Comment }}{{ end }}{{ end }}
}

{{/*************************************************************************/}}
{{/* This contains our fluent parameter container */}}
{{/*************************************************************************/}}

// {{ $m }} fluent API
type {{ $m }} struct {
	columns *columns
}

{{/*************************************************************************/}}
{{/* Helper to create the fluent API */}}
{{/*************************************************************************/}}

// New `{{ $t }}` API
func New() *{{ $m }} {
	return &{{ $m }}{&columns{}}
}

{{/*************************************************************************/}}
{{/* Generate each of the fluent methods for the fluent parameter API      */}}
{{/* This is very messy right now because we have some custom accessors    */}}
{{/* for uuid.                                                             */}}
{{/*                                                                       */}}
{{/* NOTE: This would probably be better solved at pgx level, but I spent  */}}
{{/* far too long trying to get that working with scanning nil *uuid.UUID  */}}
{{/* Fortunately, this isn't a big deal, because the API can remain stable */}}
{{/*************************************************************************/}}

{{ range .Table.Columns }}
{{- $nu := .Name | capitalize -}}
{{- $nc := .Name | camelize | mayberename -}}
{{- $dt := coerceaccessor $.Schema .DataType -}}
// {{ $nu }} sets the `{{ .Name }}`
func ({{ $mv }} *{{ $m }}) {{ $nu }}({{ $nc }} {{ $dt }}) *{{ $m }} {
	{{ $mv }}.columns.{{ $nu }} = {{ decode $pkg $nc $dt }}
	return {{ $mv }}
}

// Get{{ $nu }} returns the `{{ .Name }}` if set
func ({{ $mv }} *{{ $m }}) Get{{ $nu }}() ({{ $nc }} *{{ $dt }}) {
	return {{ encode $pkg $mv $nu $dt }}
}
{{ end }}

{{/*************************************************************************/}}
{{/* Implement the Marshaler & Unmarshaler interfaces */}}
{{/*************************************************************************/}}

// MarshalJSON marshals the `{{ $mv }}` into JSON
func ({{ $mv }} *{{ $m }}) MarshalJSON() ([]byte, error) {
	return json.Marshal({{ $mv }}.columns)
}

// UnmarshalJSON unmarshals json to a `{{ $mv }}`
func ({{ $mv }} *{{ $m }}) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, {{ $mv }}.columns)
}

{{/*************************************************************************/}}
{{/* Implement the Stringer interface */}}
{{/*************************************************************************/}}

func ({{ $mv }} *{{ $m }}) String() string {
	return "{{ $mv}}"
}

{{/*************************************************************************/}}
{{/* Private helper to get all the non-nil columns in our table */}}
{{/*************************************************************************/}}

// get all the non-nil columns
func getColumns({{ $mv }} *{{ $m }}) map[string]interface{} {
  columns := make(map[string]interface{})
  {{ range .Table.Columns }}{{ $col := .Name | capitalize }}
  if {{ $mv }}.columns.{{ $col }} != nil {
    columns["{{ .Name }}"] = *{{ $mv }}.columns.{{ $col }}
  }{{ end }}
  
  return columns
}

{{/*****************************************************************************/}}
{{/* Public where helper for a couple of the methods */}}
{{/*****************************************************************************/}}

// WhereClause is a struct to handle where clauses
type WhereClause struct {
	condition string
	params    []interface{}
}

// Where specifies the conditions
func Where(condition string, params ...interface{}) *WhereClause {
	return &WhereClause{
		condition: condition,
		params:    params,
	}
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Find(): find one row by it's primary key */}}
{{/*************************************************************************/}}

{{ if $p }}
// Find a {{ $mv }} by "{{ $p.Name }}"
func Find(db {{ $pkg }}.DB, {{ $p.Name }} {{ $pt }}) (*{{ $m }}, error) {
	_{{ $p.Name }} := {{ decode .Settings.Package $p.Name $pt }}

	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE "{{ $p.Name }}" = $1
	`
	{{$pkg}}.Log(sqlstr, _{{ $p.Name }})

	cols := &columns{}
	row := db.QueryRow(sqlstr, _{{ $p.Name }})
  if e := row.Scan({{ $cog }}); e != nil {
    if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
    return nil, e
  }

	return &{{ $m }}{cols}, nil
}
{{ end }}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindBy...(): find a row by its unique non-primary indexes */}}
{{/*************************************************************************/}}

{{ range $idx := $idxs }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $indexvars := map $cols mcamelize | join ", " }}
// FindBy{{ $idxmethod }} find a {{ $mv }} by {{ $cols | join "` and `" | printf "`%s`"}}
func FindBy{{ $idxmethod }}(db {{ $pkg }}.DB, {{ $idxparams }}) (*{{ $m }}, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE {{ idxwhere $idx }}
	`
	{{ $pkg }}.Log(sqlstr, {{ $indexvars }})

	cols := &columns{}
	row := db.QueryRow(sqlstr, {{ $indexvars }})
	err := row.Scan({{ $cog }})
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil,  Err{{ $m }}NotFound
		}
		return nil, err
	}

	return &{{ $m }}{cols}, nil
}
{{ end }}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindMany(): find many rows by a condition */}}
{{/*************************************************************************/}}

// FindMany find many `{{ $mv }}`s by a given condition
func FindMany(db {{ $pkg }}.DB, where *WhereClause) ([]*{{ $m }}, error) {
	var _o []*{{ $m }}
	
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE ` + where.condition
	{{ $pkg }}.Log(sqlstr, where.params...)

  rows, err := db.Query(sqlstr, where.params...)
  if err != nil {
    return _o, err
  }
  defer rows.Close()

  for rows.Next() {
		cols := &columns{}
    if e := rows.Scan({{ $cog }}); e != nil {
			if e == pgx.ErrNoRows {
				return _o, Err{{ $m }}NotFound
			}
			return _o, err
		}
    _o = append(_o, &{{ $m }}{cols})
  }
  if rows.Err() != nil {
    return _o, rows.Err()
  }

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(_o) == 0 {
		return make([]*{{ $m }}, 0), nil
	}

  return _o, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindOne(): find exactly one row by a condition */}}
{{/*************************************************************************/}}

// FindOne find one {{ $mv }} by a condition
func FindOne(db {{ $pkg }}.DB, where *WhereClause) (*{{ $m }}, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE ` + where.condition
	{{ $pkg }}.Log(sqlstr, where.params...)

	cols := &columns{}
  row := db.QueryRow(sqlstr, where.params...)
  if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
		return nil, e
	}

  return &{{ $m }}{cols}, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Insert(): insert a new row into the table */}}
{{/*************************************************************************/}}

// Insert a `{{ $mv }}` into the `{{ $t }}` table.
func Insert(db {{ $pkg }}.DB, {{ $mv }} *{{ $m }}) (*{{ $m }}, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := {{ $pkg }}.Slice(getColumns({{ $mv }}), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
	INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `)
	VALUES (` + strings.Join(_i, ", ") + `)
	RETURNING {{ $cof }}
	`
	{{ $pkg }}.Log(sqlstr, _v...)

	cols := &columns{}
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil {
    return nil, e
  }

	return &{{ $m }}{cols}, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Update(): update an existing row in the table */}}
{{/*************************************************************************/}}

// Update a {{ $mv }} by its `{{ $p.Name }}`
func Update(db {{ $pkg }}.DB, {{ $p.Name }} {{ $pt }}, {{ $mv }} *{{ $m }}) (*{{ $m }}, error) {
	_{{ $p.Name }} := {{ decode .Settings.Package $p.Name $pt }}
	fields := getColumns({{ $mv }})

	// don't update the primary key
	delete(fields, "{{ $p.Name }}")

	// prepare the slices
	_c, _i, _v := {{ $pkg }}.Slice(fields, 1)

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `)
		WHERE "{{ $p.Name }}" = $1
		RETURNING {{ $cof }}`

	// setup query
	values := append([]interface{}{ _{{ $p.Name }} }, _v...)
	{{ $pkg }}.Log(sqlstr, values...)

	// run the query
	cols := &columns{}
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
    return nil, e
  }

	return &{{ $m }}{cols}, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpdateBy...(): update a row by its unique non-primary indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := $idxs }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
// UpdateBy{{ $idxmethod }} find a {{ $m }}
func UpdateBy{{ $idxmethod }}(db {{ $pkg }}.DB, {{ $idxparams }}, {{ $mv }} *{{ $m }}) (*{{ $m }}, error) {
	fields := getColumns({{ $mv }})

	// don't update the keys
	{{ range $idx.Columns -}}
	delete(fields, "{{ .Name }}")
	{{ end }}

	// prepare the slices
	_c, _i, _v := {{ $pkg }}.Slice(fields, {{ len $cols }})

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE {{ idxwhere $idx }} ` +
		`RETURNING {{ $cof }}`

	// setup the query
	values := []interface{}{}
	{{ range .Columns }}values = append(values, {{ .Name | camelize }})
	{{ end }}
	values = append(values, _v...)
	{{ $pkg }}.Log(sqlstr, values...)

	// run the query
	cols := &columns{}
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil, Err{{ $m }}NotFound
    }
		return nil, e
	}

	return &{{ $m }}{cols}, nil
}
{{ end }}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpdateMany(): update many rows by the given condition */}}
{{/*****************************************************************************/}}

// UpdateMany rows in `{{ $t }}` by a given condition
func UpdateMany(db {{ $pkg }}.DB, where *WhereClause, {{ $mv }} *{{ $m }}) ([]*{{ $m }}, error) {
	var _o []*{{ $m }}
	
	// prepare the slices
	_c, _i, _v := {{ $pkg }}.Slice(getColumns({{ $mv }}), len(where.params))

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + where.condition + ` ` +
		`RETURNING {{ $cof }}`

	// setup the query
  values := []interface{}{}
  values = append(values, where.params...)
  values = append(values, _v...)
	{{ $pkg }}.Log(sqlstr, values...)

	// run query
  rows, err := db.Query(sqlstr, values...)
  if err != nil {
    return _o, err
  }
  defer rows.Close()

  for rows.Next() {
    cols := &columns{}
    if e := rows.Scan({{ $cog }}); e != nil {
			if e == pgx.ErrNoRows {
				return _o, Err{{ $m }}NotFound
			}
      return _o, err
    }
    _o = append(_o, &{{ $m }}{cols})
  }
  if rows.Err() != nil {
    return _o, rows.Err()
  }

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(_o) == 0 {
		return make([]*{{ $m }}, 0), nil
	}

  return _o, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.Delete(): delete a row using its primary index */}}
{{/*****************************************************************************/}}

// Delete a `{{ $mv }}` from the `{{ $t }}` table
func Delete(db {{ $pkg }}.DB, {{ $p.Name }} {{ $pt }}) error {
	_{{ $p.Name }} := {{ decode .Settings.Package $p.Name $pt }}

	// sql query
	sqlstr := `DELETE FROM {{ $t }} WHERE "{{ $p.Name }}" = $1`
	{{ $pkg }}.Log(sqlstr, _{{ $p.Name }})

	// run query
	if _, e := db.Exec(sqlstr, _{{ $p.Name }}); e != nil {
    if e == pgx.ErrNoRows {
      return Err{{ $m }}NotFound
    }
    return e
  }

	return nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.DeleteBy...(): delete a row by its unique non-primary indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := $idxs }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $indexvars := map $cols mcamelize | join ", " }}
// DeleteBy{{ $idxmethod }} find a {{ $m }}
func DeleteBy{{ $idxmethod }}(db {{ $pkg }}.DB, {{ $idxparams }}) error {
	// sql delete query
	sqlstr := `DELETE FROM {{ $t }} WHERE {{ idxwhere $idx }}`
	{{ $pkg }}.Log(sqlstr, {{ $indexvars }})

	if _, e := db.Exec(sqlstr, {{ $indexvars }}); e != nil {
    if e == pgx.ErrNoRows {
      return Err{{ $m }}NotFound
    }
    return e
  }

	return nil
}
{{ end }}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.DeleteMany(): delete many rows by the given condition */}}
{{/*****************************************************************************/}}

// DeleteMany delete many `{{ $mv }}`'s by the given condition
func DeleteMany(db {{ $pkg }}.DB, where *WhereClause) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM {{ $t }} WHERE ` + where.condition
	{{ $pkg }}.Log(sqlstr, where.params...)

  if _, e := db.Exec(sqlstr, where.params...); e != nil {
    return e
	}

  return nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.Upsert(): upsert a row by its primary key */}}
{{/*****************************************************************************/}}

// Upsert the `{{ $mv }}` by its `{{ $p.Name }}`.
func Upsert(db {{ $pkg }}.DB, {{ $mv }} *{{ $m }}) (*{{ $m }}, error) {
	// get all the non-nil columns and prepare them for the query
  _c, _i, _v := {{ $pkg }}.Slice(getColumns({{ $mv }}), 0)

	// sql query
  sqlstr := `INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `) ` +
	`VALUES (` + strings.Join(_i, ", ") + `) ` +
  `ON CONFLICT ("{{ $p.Name }}") ` +
  `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
  `RETURNING {{ $cof }}`
  {{ $pkg }}.Log(sqlstr, _v...)

	// run query
	cols := &columns{}
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil {
		return nil, e
	}

	return &{{ $m }}{cols}, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpsertBy...(): upsert a row by its non-unique indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := $idxs }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $idxparamlist := map $cols (mprintf "\"%s\"") | join ", " }}
// UpsertBy{{ $idxmethod }} find a {{ $m }}
func UpsertBy{{ $idxmethod }}(db {{ $pkg }}.DB, {{ $mv }} *{{ $m }}) (*{{ $m }}, error) {
	// get all the non-nil columns and prepare them for the query
  _c, _i, _v := {{ $pkg }}.Slice(getColumns({{ $mv }}), 0)

  // sql query
  sqlstr := `INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `) ` +
	`VALUES (` + strings.Join(_i, ", ") + `) ` +
  `ON CONFLICT ({{ $idxparamlist }}) ` +
  `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `) ` +
  `RETURNING {{ $cof }}`
  {{ $pkg }}.Log(sqlstr, _v...)

	// run query
	cols := &columns{}
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &{{ $m }}{cols}, nil
}
{{ end }}