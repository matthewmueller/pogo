{{/*************************************************************************/}}
{{/* Variables */}}
{{/*************************************************************************/}}

{{ $t := tablename $.Schema .Table }}
{{ $tn := .Table.Name }}
{{ $c := $tn | capitalize }}
{{ $cv := $c | lower }}
{{ $m := $tn | singular }}
{{ $mv := $m | lower }}
{{ $mvg := print "&" $mv "." }}
{{ $p := primary .Table.Columns }}
{{ $pt := coerce $.Schema $p.DataType }}
{{ $co := colnames .Table.Columns }}
{{ $idxs := idxnames .Table.Indexes }}
{{ $cof := map $co (mprintf "\"%s\"") | join ", " }}
{{ $cog := map $co mcapitalize (mprefix $mvg) | join ", " }}

{{/*************************************************************************/}}
{{/* Our Package */}}
{{/*************************************************************************/}}

package {{ .Settings.Package }}

{{/*************************************************************************/}}
{{/* Pogo marker */}}
{{/*************************************************************************/}}

// GENERATED BY POGO. DO NOT EDIT.

{{/*************************************************************************/}}
{{/* Errors */}}
{{/*************************************************************************/}}

// Err{{ $m }}NotFound returned if the {{ $mv }} is not found
var Err{{ $m }}NotFound = errors.New("{{ $mv }} not found")

{{/*************************************************************************/}}
{{/* The table we'll attach our CRUD methods onto */}}
{{/*************************************************************************/}}

// {{ $c }} class
type {{ $c }} struct {
  db DB
}

{{/*************************************************************************/}}
{{/* The model that contains all our database fields */}}
{{/*************************************************************************/}}

// {{ $m }} model
type {{ $m }} struct {
  {{ range .Table.Columns }}{{ $t := coerce $.Schema .DataType }}
  {{ .Name | capitalize }} {{ $t }} `json:"{{ .Name }},omitempty"` {{ if .Comment }}// {{ .Comment }}{{ end }}{{ end }}
}

{{/*************************************************************************/}}
{{/* Private class constructor, accessed via pogo.$TABLE */}}
{{/*************************************************************************/}}

// {{ $mv }} constructor
func {{ $mv }}(db DB) *{{ $c }} {
  return &{{ $c }}{db}
}

{{/*************************************************************************/}}
{{/* Private helper to get all the non-nil fields on our model */}}
{{/*************************************************************************/}}

// get all the non-nil fields
func ({{ $cv }} *{{ $c }}) fields({{ $mv }} *{{ $m }}) map[string]interface{} {
  fields := make(map[string]interface{})
  {{ range .Table.Columns }}{{ $field := .Name | capitalize }}
  if {{ $mv }}.{{ $field }} != nil {
    fields["{{ .Name }}"] = {{ $mv }}.{{ $field }}
  }{{ end }}
  
  return fields
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Find(): find one row by it's primary key */}}
{{/*************************************************************************/}}

{{ if $p }}
// Find a {{ $mv }} by "{{ $p.Name }}"
func ({{ $cv }} *{{ $c }}) Find({{ $p.Name }} {{ $pt }}) ({{ $mv }} *{{ $m }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE "{{ $p.Name }}" = $1
	`

	Log(sqlstr, {{ $p.Name }})
	row := {{ $cv }}.db.QueryRow(sqlstr, {{ $p.Name }})
  if e := row.Scan({{ $cog }}); e != nil {
    if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
    return nil, e
  }

	return {{ $mv }}, nil
}
{{ end }}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindBy...(): find a row by its unique non-primary indexes */}}
{{/*************************************************************************/}}

{{ range $idx := .Table.Indexes }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $indexvars := map $cols mcamelize | join ", " }}
// FindBy{{ $idxmethod }} find a {{ $mv }} by {{ $cols | join "` and `" | printf "`%s`"}}
func ({{ $cv }} *{{ $c }}) FindBy{{ $idxmethod }}({{ $idxparams }}) ({{ $mv }} *{{ $m }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE {{ idxwhere $idx }}
	`

	Log(sqlstr, {{ $indexvars }})
	row := {{ $cv }}.db.QueryRow(sqlstr, {{ $indexvars }})
	err = row.Scan({{ $cog }})
	if err != nil {
		if err == pgx.ErrNoRows {
			return {{ $mv }},  Err{{ $m }}NotFound
		}
		return {{ $mv }}, err
	}

	return {{ $mv }}, nil
}
{{ end }}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindMany(): find many rows by a condition */}}
{{/*************************************************************************/}}

// FindMany find many `{{ $mv }}`s by a given condition
func ({{ $cv }} *{{ $c }}) FindMany(condition string, params... interface{}) ([]*{{ $m }}, error) {
	var _o []*{{ $m }}
	
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE ` + condition

	Log(sqlstr, params...)
  rows, err := {{ $cv }}.db.Query(sqlstr, params...)
  if err != nil {
    return _o, err
  }
  defer rows.Close()

  for rows.Next() {
		var {{ $mv }} *{{ $m }}
    if e := rows.Scan({{ $cog }}); e != nil {
			if e == pgx.ErrNoRows {
				return _o, Err{{ $m }}NotFound
			}
			return _o, err
		}
    _o = append(_o, {{ $mv }})
  }
  if rows.Err() != nil {
    return _o, rows.Err()
  }

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(_o) == 0 {
		return make([]*{{ $m }}, 0), nil
	}

  return _o, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.FindOne(): find exactly one row by a condition */}}
{{/*************************************************************************/}}

// FindOne find one {{ $mv }} by a condition
func ({{ $cv }} *{{ $c }}) FindOne(condition string, params... interface{}) ({{ $mv }} *{{ $m }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
	SELECT {{ $cof }}
	FROM {{ $t }}
	WHERE ` + condition

	Log(sqlstr, params...)
  row := {{ $cv }}.db.QueryRow(sqlstr, params...)
  if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
		return nil, e
	}

  return {{ $mv }}, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Insert(): insert a new row into the table */}}
{{/*************************************************************************/}}

// Insert a `{{ $mv }}` into the `{{ $t }}` table.
func ({{ $cv }} *{{ $c }}) Insert({{ $mv }} {{ $m }}) (*{{ $m }}, error) {
	// get all the non-nil fields and prepare them for the query
	_c, _i, _v := slice({{ $cv }}.fields(&{{ $mv }}), 0)

	// sql insert query, primary key provided by sequence
	sqlstr := `
	INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `)
	VALUES (` + strings.Join(_i, ", ") + `)
	RETURNING {{ $cof }}
	`

	Log(sqlstr, _v...)
	row := {{ $cv }}.db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil {
    return nil, e
  }

	return &{{ $mv }}, nil
}

{{/*************************************************************************/}}
{{/* pogo.$TABLE.Update(): update an existing row in the table */}}
{{/*************************************************************************/}}

// Update a {{ $mv }} by its `{{ $p.Name }}`
func ({{ $cv }} *{{ $c }}) Update({{ $mv }} {{ $m }}, {{ $p.Name }} {{ $pt }}) (*{{ $m }}, error) {
	fieldset := {{ $cv }}.fields(&{{ $mv }})

	// first check if we have the primary key
	if {{ $p.Name }} == nil {
		return nil, errors.New(`primary key "{{ $p.Name }}" must be non-nil`)
	}

	// don't update the primary key
	delete(fieldset, "{{ $p.Name }}")

	// prepare the slices
	_c, _i, _v := slice(fieldset, 1)

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `)
		WHERE "{{ $p.Name }}" = $1
		RETURNING {{ $cof }}`

	// run query
	values := append([]interface{}{ {{ $p.Name }} }, _v...)
	Log(sqlstr, values...)

	row := {{ $cv }}.db.QueryRow(sqlstr, values...)
	if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil,  Err{{ $m }}NotFound
    }
    return nil, e
  }

	return &{{ $mv }}, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpdateBy...(): update a row by its unique non-primary indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := .Table.Indexes }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
// UpdateBy{{ $idxmethod }} find a {{ $m }}
func ({{ $cv }} *{{ $c }}) UpdateBy{{ $idxmethod }}({{ $mv }} {{ $m }}, {{ $idxparams }}) (*{{ $m }}, error) {
	fieldset := {{ $cv }}.fields(&{{ $mv }})

	// first check if we have all the keys we need
	{{ range $idx.Columns }}if {{ .Name | camelize }} == nil {
		return nil, errors.New(`{{ .Name | camelize }} must be non-nil`)
	}
	{{ end }}

	// don't update the keys
	{{ range $idx.Columns }}delete(fieldset, "{{ .Name | camelize }}")
	{{ end }}

	// prepare the slices
	_c, _i, _v := slice(fieldset, {{ len $cols }})

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE {{ idxwhere $idx }} ` +
		`RETURNING {{ $cof }}`

	// run query
	values := []interface{}{}
	{{ range .Columns }}values = append(values, {{ .Name | camelize }})
	{{ end }}
	values = append(values, _v...)
	Log(sqlstr, values...)

	row := {{ $cv }}.db.QueryRow(sqlstr, values...)
	if e := row.Scan({{ $cog }}); e != nil {
		if e == pgx.ErrNoRows {
      return nil, Err{{ $m }}NotFound
    }
		return nil, e
	}

	return &{{ $mv }}, nil
}
{{ end }}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpdateMany(): update many rows by the given condition */}}
{{/*****************************************************************************/}}

// UpdateMany rows in `{{ $t }}` by a given condition
func ({{ $cv }} *{{ $c }}) UpdateMany({{ $mv }} *{{ $m }}, condition string, params... interface{}) ([]*{{ $m }}, error) {
	var _o []*{{ $m }}
	
	// get the non-nil fields
	fieldset := {{ $cv }}.fields({{ $mv }})

	// prepare the slices
	_c, _i, _v := slice(fieldset, len(params))

	// sql query
	sqlstr := `UPDATE {{ $t }} SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING {{ $cof }}`

  values := []interface{}{}
  values = append(values, params...)
  values = append(values, _v...)

	// run query
	Log(sqlstr, values...)
  rows, err := {{ $cv }}.db.Query(sqlstr, values...)
  if err != nil {
    return _o, err
  }
  defer rows.Close()

  for rows.Next() {
    var {{ $mv }} *{{ $m }}
    if e := rows.Scan({{ $cog }}); e != nil {
			if e == pgx.ErrNoRows {
				return _o, Err{{ $m }}NotFound
			}
      return _o, err
    }
    _o = append(_o, {{ $mv }})
  }
  if rows.Err() != nil {
    return _o, rows.Err()
  }

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(_o) == 0 {
		return make([]*{{ $m }}, 0), nil
	}

  return _o, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.Delete(): delete a row using its primary index */}}
{{/*****************************************************************************/}}

// Delete a `{{ $mv }}` from the `{{ $t }}` table
func ({{ $cv }} *{{ $c }}) Delete({{ $p.Name }} {{ $pt }}) error {
	// sql query
	sqlstr := `DELETE FROM {{ $t }} WHERE "{{ $p.Name }}" = $1`

	// run query
	Log(sqlstr, {{ $p.Name }})
	if _, e := {{ $cv }}.db.Exec(sqlstr, {{ $p.Name }}); e != nil {
    if e == pgx.ErrNoRows {
      return Err{{ $m }}NotFound
    }
    return e
  }

	return nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.DeleteBy...(): delete a row by its unique non-primary indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := .Table.Indexes }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $indexvars := map $cols mcamelize | join ", " }}
// DeleteBy{{ $idxmethod }} find a {{ $m }}
func ({{ $cv }} *{{ $c }}) DeleteBy{{ $idxmethod }}({{ $idxparams }}) error {
	// sql delete query
	sqlstr := `DELETE FROM {{ $t }} WHERE {{ idxwhere $idx }}`

	Log(sqlstr, {{ $indexvars }})
	if _, e := {{ $cv }}.db.Exec(sqlstr, {{ $indexvars }}); e != nil {
    if e == pgx.ErrNoRows {
      return Err{{ $m }}NotFound
    }
    return e
  }

	return nil
}
{{ end }}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.DeleteMany(): delete many rows by the given condition */}}
{{/*****************************************************************************/}}

// DeleteMany delete many `{{ $mv }}`'s by the given condition
func ({{ $cv }} *{{ $c }}) DeleteMany(condition string, params... interface{}) error {
	// sql select query, primary key provided by sequence
	sqlstr := `DELETE FROM {{ $t }} WHERE ` + condition

	Log(sqlstr, params...)
  if _, e := {{ $cv }}.db.Exec(sqlstr, params...); e != nil {
    return e
	}

  return nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.Upsert(): upsert a row by its primary key */}}
{{/*****************************************************************************/}}

// Upsert the `{{ $mv }}` by its `{{ $p.Name }}`.
func ({{ $cv }} *{{ $c }}) Upsert({{ $mv }} {{ $m }}, action string) (*{{ $m }}, error) {
	fieldset := {{ $cv }}.fields(&{{ $mv }})

	// prepare the slices
	_c, _i, _v := slice(fieldset, 0)

  // determine on conflict action
  var upsertAction string
  if action == UpsertDoUpdate {
    upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
  } else if action == UpsertDoNothing {
    upsertAction = UpsertDoNothing
  } else {
    return nil, errors.New("invalid upsert action")
  }

	// sql query
  sqlstr := `INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `) ` +
	`VALUES (` + strings.Join(_i, ", ") + `) ` +
  `ON CONFLICT ("{{ $p.Name }}") ` +
  upsertAction + ` ` +
  `RETURNING {{ $cof }}`

	// run query
  Log(sqlstr, _v...)
	row := {{ $cv }}.db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &{{ $mv }}, nil
}

{{/*****************************************************************************/}}
{{/* pogo.$TABLE.UpsertBy...(): upsert a row by its non-unique indexes */}}
{{/*****************************************************************************/}}

{{ range $idx := .Table.Indexes }}
{{ $cols := idxcolnames $idx }}
{{ $idxmethod := map $cols mcapitalize | join "And" }}
{{ $idxparams := idxparams $.Schema $idx }}
{{ $idxparamlist := map $cols (mprintf "\"%s\"") | join ", " }}
// UpsertBy{{ $idxmethod }} find a {{ $m }}
func ({{ $cv }} *{{ $c }}) UpsertBy{{ $idxmethod }}({{ $mv }} {{ $m }}, action string) (*{{ $m }}, error) {
	// get all the non-nil fields and prepare them for the query
  _c, _i, _v := slice({{ $cv }}.fields(&{{ $mv }}), 0)

  // determine on conflict action
  var upsertAction string
  if action == UpsertDoUpdate {
    upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
  } else if action == UpsertDoNothing {
    upsertAction = UpsertDoNothing
  } else {
    return nil, errors.New("invalid upsert action")
  }

  // sql query
  sqlstr := `INSERT INTO {{ $t }} (` + strings.Join(_c, ", ") + `) ` +
	`VALUES (` + strings.Join(_i, ", ") + `) ` +
  `ON CONFLICT ({{ $idxparamlist }}) ` +
  upsertAction + ` ` +
  `RETURNING {{ $cof }}`

	// run query
  Log(sqlstr, _v...)
	row := {{ $cv }}.db.QueryRow(sqlstr, _v...)
	if e := row.Scan({{ $cog }}); e != nil && e != pgx.ErrNoRows {
		return nil, e
	}

	return &{{ $mv }}, nil
}
{{ end }}
