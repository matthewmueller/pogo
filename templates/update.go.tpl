{{ $shortClass := shortname .Table.TableName }}
{{ $class := classname .Table.TableName }}
{{ $shortModel := shortname .Table.TableName $shortClass }}
{{ $model := modelname .Table.TableName }}
{{ $return := modelreturn .Table.TableName }}
package {{ .Package }}

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
)

// Update the {{ $model }} by the Primary Key
func ({{ $shortClass }} *{{ $class }}) Update({{ $shortModel }} *{{ $model }}, {{ primaryname .Columns }} {{ primarytype .Columns }}) ({{ $return }} {{ $model }}, err error) {
	fields := {{ $shortClass }}.getFields({{ $shortModel }})

	// first check if we have the primary key
	if {{ primaryname .Columns }} == nil {
		return {{ $return }}, errors.New(`primary key "{{ primaryname .Columns }}" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "{{ primaryname .Columns }}")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE {{ schema .Schema .Table.TableName }} SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `)
		WHERE "{{ primaryname .Columns }}" = $1
		RETURNING {{ fields .Columns }}`

	// run query
	values := append([]interface{}{ {{ primaryname .Columns }} }, v...)
	DBLog(sqlstr, values...)

	row := {{ $shortClass }}.DB.QueryRow(sqlstr, values...)
	err = row.Scan({{ gofields .Columns $return }})
	if err != nil {
		return {{ $return }}, err
	}

	return {{ $return }}, nil
}

{{ range $idx := .Indexes }}
{{ if .IsUnique }}{{ if not .IsPrimary }}
// UpdateBy{{ indexmethod $idx }} find a {{ $model }}
func ({{ $shortClass }} *{{ $class }}) UpdateBy{{ indexmethod $idx }}({{ $shortModel }} *{{ $model }}, {{ indexparams $idx }}) ({{ $return }} {{ $model }}, err error) {
	fields := {{ $shortClass }}.getFields({{ $shortModel }})

	// first check if we have all the keys we need
	{{ range .Columns }}if {{ indexparam .ColumnName }} == nil {
		return {{ $return }}, errors.New(`{{ .ColumnName }} must be non-nil`)
	}
	{{ end }}

	// don't update the keys
	{{ range .Columns }}delete(fields, "{{ indexparam .ColumnName }}")
	{{ end }}

	// prepare the slices
	c, i, v := querySlices(fields, {{ indexlength $idx }})

	// sql query
	sqlstr := `UPDATE {{ schema $.Schema $.Table.TableName }} SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE {{ indexwhere $idx }} ` +
		`RETURNING {{ fields $.Columns }}`

	// run query
	values := []interface{}{}
	{{ range .Columns }}values = append(values, {{ indexparam .ColumnName }})
	{{ end }}
	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := {{ $shortClass }}.DB.QueryRow(sqlstr, values...)
	err = row.Scan({{ gofields $.Columns $return }})
	if err != nil {
		return {{ $return }}, err
	}

	return {{ $return }}, nil
}
{{ end }}{{ end }}
{{ end }}
