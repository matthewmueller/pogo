package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (s *Standups) UpdateMany(ss *Standup, condition string, params ...interface{}) (standups []Standup, err error) {
	fields := s.getFields(ss)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.standups SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "channel_id", "time", "tz", "questions", "created", "updated", "owner", "team_id", "name"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := s.DB.Query(sqlstr, values...)
	if err != nil {
		return standups, err
	}
	defer rows.Close()

	for rows.Next() {
		standup := Standup{}
		err = rows.Scan(&standup.ID, &standup.ChannelID, &standup.Time, &standup.Tz, &standup.Questions, &standup.Created, &standup.Updated, &standup.Owner, &standup.TeamID, &standup.Name)
		if err != nil {
			return standups, err
		}
		standups = append(standups, standup)
	}

	if rows.Err() != nil {
		return standups, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(standups) == 0 {
		return make([]Standup, 0), nil
	}

	return standups, nil
}
