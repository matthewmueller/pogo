package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (c *Conversations) UpdateMany(cc *Conversation, condition string, params ...interface{}) (conversations []Conversation, err error) {
	fields := c.getFields(cc)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.conversations SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "user_id", "topic", "context", "state", "created", "updated"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := c.DB.Query(sqlstr, values...)
	if err != nil {
		return conversations, err
	}
	defer rows.Close()

	for rows.Next() {
		conversation := Conversation{}
		err = rows.Scan(&conversation.ID, &conversation.UserID, &conversation.Topic, &conversation.Context, &conversation.State, &conversation.Created, &conversation.Updated)
		if err != nil {
			return conversations, err
		}
		conversations = append(conversations, conversation)
	}

	if rows.Err() != nil {
		return conversations, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(conversations) == 0 {
		return make([]Conversation, 0), nil
	}

	return conversations, nil
}
