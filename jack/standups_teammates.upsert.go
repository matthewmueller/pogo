package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the StandupsTeammate by the Primary Key
func (st *StandupsTeammates) Upsert(stst *StandupsTeammate, action string) (standupsteammate StandupsTeammate, err error) {
	fields := st.getFields(stst)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return standupsteammate, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.standups_teammates (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("") ` +
		upsertAction + ` ` +
		`RETURNING "standup_id", "teammate_id", "team_owner", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := st.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&standupsteammate.StandupID, &standupsteammate.TeammateID, &standupsteammate.TeamOwner, &standupsteammate.CreatedAt, &standupsteammate.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return standupsteammate, err
	}

	return standupsteammate, nil
}

// UpsertByStandupIDAndTeammateID find a StandupsTeammate
func (st *StandupsTeammates) UpsertByStandupIDAndTeammateID(stst *StandupsTeammate, action string) (standupsteammate StandupsTeammate, err error) {
	fields := st.getFields(stst)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return standupsteammate, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.standups_teammates (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("standupid", "teammateid") ` +
		upsertAction + ` ` +
		`RETURNING "standup_id", "teammate_id", "team_owner", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := st.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&standupsteammate.StandupID, &standupsteammate.TeammateID, &standupsteammate.TeamOwner, &standupsteammate.CreatedAt, &standupsteammate.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return standupsteammate, err
	}

	return standupsteammate, nil
}
