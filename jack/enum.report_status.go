package jack

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// ReportStatus is the `report_status` enum type from `jack`.
type ReportStatus uint16

const (

	// ReportStatusAsked is the 'ASKED' ReportStatus.
	ReportStatusAsked = ReportStatus(1)

	// ReportStatusSkip is the 'SKIP' ReportStatus.
	ReportStatusSkip = ReportStatus(2)

	// ReportStatusComplete is the 'COMPLETE' ReportStatus.
	ReportStatusComplete = ReportStatus(3)
)

// String returns the string value of the `ReportStatus`
func (reportstatus ReportStatus) String() string {
	var enumVal string

	switch reportstatus {

	case ReportStatusAsked:
		enumVal = "ASKED"

	case ReportStatusSkip:
		enumVal = "SKIP"

	case ReportStatusComplete:
		enumVal = "COMPLETE"

	}

	return enumVal
}

// MarshalText marshals ReportStatus into text.
func (reportstatus ReportStatus) MarshalText() ([]byte, error) {
	return []byte(reportstatus.String()), nil
}

// UnmarshalText unmarshals ReportStatus from text.
func (reportstatus *ReportStatus) UnmarshalText(text []byte) error {
	switch string(text) {

	case "ASKED":
		*reportstatus = ReportStatusAsked

	case "SKIP":
		*reportstatus = ReportStatusSkip

	case "COMPLETE":
		*reportstatus = ReportStatusComplete

	default:
		return errors.New("invalid ReportStatus")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ReportStatus.
func (reportstatus ReportStatus) Value() (driver.Value, error) {
	return reportstatus.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ReportStatus.
func (reportstatus *ReportStatus) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ReportStatus")
	}

	return reportstatus.UnmarshalText(buf)
}

// ScanPgx into PGX
func (reportstatus *ReportStatus) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return reportstatus.UnmarshalText(vr.ReadBytes(vr.Len()))
}
