package jack_test

import (
	"testing"
	"time"

	"github.com/jackc/pgx"
	"github.com/matthewmueller/pogo/jack"
	uuid "github.com/satori/go.uuid"
	"github.com/stretchr/testify/assert"
)

// GENERATED BY POGO. DO NOT EDIT.

func reportsDB(t *testing.T) jack.DB {
	config, err := pgx.ParseURI("postgres://localhost:5432/pogo?sslmode=disable")
	if err != nil {
		t.Fatal(err)
	}

	db, err := pgx.Connect(config)
	if err != nil {
		t.Fatal(err)
	}

	return db
}

func TestReportsInsert(t *testing.T) {
	// setup the model
	model := jack.New(reportsDB(t))

	// random values
	_id := uuid.NewV4()
	_userid := uuid.NewV4()
	_timestamp := time.Now()
	_questions := map[string]interface{}{}
	_standupid := uuid.NewV4()
	_status := jack.ReportStatusAsked
	_createdat := time.Now()
	_updatedat := time.Now()

	// struct
	report1 := jack.Report{
		ID:        &_id,
		UserID:    &_userid,
		Timestamp: &_timestamp,
		Questions: &_questions,
		StandupID: &_standupid,
		Status:    &_status,
		CreatedAt: &_createdat,
		UpdatedAt: &_updatedat,
	}

	report2, err := model.Report.Insert(report1)
	if err != nil {
		t.Fatal(err)
	}

	// assertions
	assert.Equal(t, _id, *report2.ID)
	assert.Equal(t, _userid, *report2.UserID)
	assert.Equal(t, _timestamp, *report2.Timestamp)
	assert.Equal(t, _questions, *report2.Questions)
	assert.Equal(t, _standupid, *report2.StandupID)
	assert.Equal(t, _status, *report2.Status)
	assert.Equal(t, _createdat, *report2.CreatedAt)
	assert.Equal(t, _updatedat, *report2.UpdatedAt)

	// cleanup
	if e := model.Report.Delete(&_id); e != nil {
		t.Fatal(e)
	}
}

func TestReportsUpdate(t *testing.T) {
	// setup the model
	model := jack.New(reportsDB(t))

	// random values
	_id := uuid.NewV4()
	_userid := uuid.NewV4()
	_timestamp := time.Now()
	_questions := map[string]interface{}{}
	_standupid := uuid.NewV4()
	_status := jack.ReportStatusAsked
	_createdat := time.Now()
	_updatedat := time.Now()

	// struct
	report1 := jack.Report{
		ID:        &_id,
		UserID:    &_userid,
		Timestamp: &_timestamp,
		Questions: &_questions,
		StandupID: &_standupid,
		Status:    &_status,
		CreatedAt: &_createdat,
		UpdatedAt: &_updatedat,
	}

	report2, err := model.Report.Insert(report1)
	if err != nil {
		t.Fatal(err)
	}

	// random values
	_id2 := uuid.NewV4()
	_userid2 := uuid.NewV4()
	_timestamp2 := time.Now()
	_questions2 := map[string]interface{}{}
	_standupid2 := uuid.NewV4()
	_status2 := jack.ReportStatusAsked
	_createdat2 := time.Now()
	_updatedat2 := time.Now()

	// random values
	report2.ID = &_id2
	report2.UserID = &_userid2
	report2.Timestamp = &_timestamp2
	report2.Questions = &_questions2
	report2.StandupID = &_standupid2
	report2.Status = &_status2
	report2.CreatedAt = &_createdat2
	report2.UpdatedAt = &_updatedat2

	report3, err := model.Report.Update(*report2, &_id)
	if err != nil {
		t.Fatal(err)
	}

	// assertions
	assert.Equal(t, _id2, *report3.ID)
	assert.Equal(t, _userid2, *report3.UserID)
	assert.Equal(t, _timestamp2, *report3.Timestamp)
	assert.Equal(t, _questions2, *report3.Questions)
	assert.Equal(t, _standupid2, *report3.StandupID)
	assert.Equal(t, _status2, *report3.Status)
	assert.Equal(t, _createdat2, *report3.CreatedAt)
	assert.Equal(t, _updatedat2, *report3.UpdatedAt)

	// cleanup
	if e := model.Report.Delete(&_id); e != nil {
		t.Fatal(e)
	}
}
