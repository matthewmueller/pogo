package jack

import (
	"errors"
	"time"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrStandupNotFound returned if the Standup is not found
var ErrStandupNotFound = errors.New("Standup not found")

// Standups class
type Standups struct {
	DB DB
}

// Standup model
type Standup struct {
	ID        *int       `json:"id,omitempty"`
	ChannelID *string    `json:"channel_id,omitempty"`
	Time      *time.Time `json:"time,omitempty"`
	Tz        *string    `json:"tz,omitempty"`
	Questions *[]string  `json:"questions,omitempty"`
	Created   *time.Time `json:"created,omitempty"`
	Updated   *time.Time `json:"updated,omitempty"`
	Owner     *int       `json:"owner,omitempty"`
	TeamID    *string    `json:"team_id,omitempty"`
	Name      *string    `json:"name,omitempty"`
}

// NewStandup model
func NewStandup(db DB) Standups {
	return Standups{
		DB: db,
	}
}

// getFields fetch the non-nil fields
func (s *Standups) getFields(ss *Standup) map[string]interface{} {
	fields := map[string]interface{}{}

	if ss.ID != nil {
		fields["id"] = ss.ID
	}

	if ss.ChannelID != nil {
		fields["channel_id"] = ss.ChannelID
	}

	if ss.Time != nil {
		fields["time"] = ss.Time
	}

	if ss.Tz != nil {
		fields["tz"] = ss.Tz
	}

	if ss.Questions != nil {
		fields["questions"] = ss.Questions
	}

	if ss.Created != nil {
		fields["created"] = ss.Created
	}

	if ss.Updated != nil {
		fields["updated"] = ss.Updated
	}

	if ss.Owner != nil {
		fields["owner"] = ss.Owner
	}

	if ss.TeamID != nil {
		fields["team_id"] = ss.TeamID
	}

	if ss.Name != nil {
		fields["name"] = ss.Name
	}

	return fields
}
