package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (t *Teams) UpdateMany(tt *Team, condition string, params ...interface{}) (teams []Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.teams SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := t.DB.Query(sqlstr, values...)
	if err != nil {
		return teams, err
	}
	defer rows.Close()

	for rows.Next() {
		team := Team{}
		err = rows.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
		if err != nil {
			return teams, err
		}
		teams = append(teams, team)
	}

	if rows.Err() != nil {
		return teams, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(teams) == 0 {
		return make([]Team, 0), nil
	}

	return teams, nil
}
