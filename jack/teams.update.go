package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
)

// Update the Team by the Primary Key
func (t *Teams) Update(tt *Team, id *int) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have the primary key
	if id == nil {
		return team, errors.New(`primary key "id" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.teams SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `)
		WHERE "id" = $1
		RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

	// run query
	values := append([]interface{}{id}, v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateByBotAccessToken find a Team
func (t *Teams) UpdateByBotAccessToken(tt *Team, botaccesstoken *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if botaccesstoken == nil {
		return team, errors.New(`bot_access_token must be non-nil`)
	}

	// don't update the keys
	delete(fields, "botaccesstoken")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.teams SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "bot_access_token" = $1 ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

	// run query
	values := []interface{}{}
	values = append(values, botaccesstoken)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateByTeamAccessToken find a Team
func (t *Teams) UpdateByTeamAccessToken(tt *Team, teamaccesstoken *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if teamaccesstoken == nil {
		return team, errors.New(`team_access_token must be non-nil`)
	}

	// don't update the keys
	delete(fields, "teamaccesstoken")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.teams SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "team_access_token" = $1 ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

	// run query
	values := []interface{}{}
	values = append(values, teamaccesstoken)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateByTeamID find a Team
func (t *Teams) UpdateByTeamID(tt *Team, teamid *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if teamid == nil {
		return team, errors.New(`team_id must be non-nil`)
	}

	// don't update the keys
	delete(fields, "teamid")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.teams SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "team_id" = $1 ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

	// run query
	values := []interface{}{}
	values = append(values, teamid)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		return team, err
	}

	return team, nil
}
