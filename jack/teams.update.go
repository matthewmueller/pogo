package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/satori/go.uuid"
)

// Update the Team by the Primary Key
func (t *Teams) Update(tt *Team, id *uuid.UUID) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have the primary key
	if id == nil {
		return team, errors.New(`primary key "id" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE jack.teams SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `)
		WHERE "id" = $1
		RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// run query
	values := append([]interface{}{id}, _v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateBySlackBotAccessToken find a Team
func (t *Teams) UpdateBySlackBotAccessToken(tt *Team, slackbotaccesstoken *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if slackbotaccesstoken == nil {
		return team, errors.New(`slack_bot_access_token must be non-nil`)
	}

	// don't update the keys
	delete(fields, "slackbotaccesstoken")

	// prepare the slices
	_c, _i, _v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE jack.teams SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_bot_access_token" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// run query
	values := []interface{}{}
	values = append(values, slackbotaccesstoken)

	values = append(values, _v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateBySlackTeamAccessToken find a Team
func (t *Teams) UpdateBySlackTeamAccessToken(tt *Team, slackteamaccesstoken *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if slackteamaccesstoken == nil {
		return team, errors.New(`slack_team_access_token must be non-nil`)
	}

	// don't update the keys
	delete(fields, "slackteamaccesstoken")

	// prepare the slices
	_c, _i, _v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE jack.teams SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_team_access_token" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// run query
	values := []interface{}{}
	values = append(values, slackteamaccesstoken)

	values = append(values, _v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		return team, err
	}

	return team, nil
}

// UpdateBySlackTeamID find a Team
func (t *Teams) UpdateBySlackTeamID(tt *Team, slackteamid *string) (team Team, err error) {
	fields := t.getFields(tt)

	// first check if we have all the keys we need
	if slackteamid == nil {
		return team, errors.New(`slack_team_id must be non-nil`)
	}

	// don't update the keys
	delete(fields, "slackteamid")

	// prepare the slices
	_c, _i, _v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE jack.teams SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE "slack_team_id" = $1 ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

	// run query
	values := []interface{}{}
	values = append(values, slackteamid)

	values = append(values, _v...)
	DBLog(sqlstr, values...)

	row := t.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		return team, err
	}

	return team, nil
}
