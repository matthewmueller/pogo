package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (ts *TeammateStandups) UpdateMany(tsts *TeammateStandup, condition string, params ...interface{}) (teammatestandups []TeammateStandup, err error) {
	fields := ts.getFields(tsts)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.teammate_standups SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "status"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := ts.DB.Query(sqlstr, values...)
	if err != nil {
		return teammatestandups, err
	}
	defer rows.Close()

	for rows.Next() {
		teammatestandup := TeammateStandup{}
		err = rows.Scan(&teammatestandup.ID, &teammatestandup.StandupID, &teammatestandup.TeammateID, &teammatestandup.Time, &teammatestandup.Status)
		if err != nil {
			return teammatestandups, err
		}
		teammatestandups = append(teammatestandups, teammatestandup)
	}

	if rows.Err() != nil {
		return teammatestandups, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(teammatestandups) == 0 {
		return make([]TeammateStandup, 0), nil
	}

	return teammatestandups, nil
}
