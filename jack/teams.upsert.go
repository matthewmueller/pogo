package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the Team by the Primary Key
func (t *Teams) Upsert(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.teams (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := t.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertBySlackBotAccessToken find a Team
func (t *Teams) UpsertBySlackBotAccessToken(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.teams (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("slackbotaccesstoken") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := t.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertBySlackTeamAccessToken find a Team
func (t *Teams) UpsertBySlackTeamAccessToken(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.teams (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("slackteamaccesstoken") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := t.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertBySlackTeamID find a Team
func (t *Teams) UpsertBySlackTeamID(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	_c, _i, _v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(_c, ", ") + `) = ( EXCLUDED.` + strings.Join(_c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO jack.teams (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("slackteamid") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"`

		// run query
	DBLog(sqlstr, _v...)
	row := t.DB.QueryRow(sqlstr, _v...)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}
