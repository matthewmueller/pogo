package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the Team by the Primary Key
func (t *Teams) Upsert(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teams (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertByBotAccessToken find a Team
func (t *Teams) UpsertByBotAccessToken(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teams (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("botaccesstoken") ` +
		upsertAction + ` ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertByTeamAccessToken find a Team
func (t *Teams) UpsertByTeamAccessToken(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teams (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("teamaccesstoken") ` +
		upsertAction + ` ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}

// UpsertByTeamID find a Team
func (t *Teams) UpsertByTeamID(tt *Team, action string) (team Team, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return team, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teams (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("teamid") ` +
		upsertAction + ` ` +
		`RETURNING "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil && err != pgx.ErrNoRows {
		return team, err
	}

	return team, nil
}
