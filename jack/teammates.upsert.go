package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the Teammate by the Primary Key
func (t *Teammates) Upsert(tt *Teammate, action string) (teammate Teammate, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return teammate, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teammates (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_id", "team_id", "created", "updated"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&teammate.ID, &teammate.SlackID, &teammate.TeamID, &teammate.Created, &teammate.Updated)
	if err != nil && err != pgx.ErrNoRows {
		return teammate, err
	}

	return teammate, nil
}

// UpsertBySlackID find a Teammate
func (t *Teammates) UpsertBySlackID(tt *Teammate, action string) (teammate Teammate, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return teammate, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.teammates (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("slackid") ` +
		upsertAction + ` ` +
		`RETURNING "id", "slack_id", "team_id", "created", "updated"`

		// run query
	DBLog(sqlstr, v...)
	row := t.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&teammate.ID, &teammate.SlackID, &teammate.TeamID, &teammate.Created, &teammate.Updated)
	if err != nil && err != pgx.ErrNoRows {
		return teammate, err
	}

	return teammate, nil
}
