package jack

import (
	"errors"
	"time"

	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrTeammateNotFound returned if the Teammate is not found
var ErrTeammateNotFound = errors.New("Teammate not found")

// Teammates class
type Teammates struct {
	DB DB
}

// Teammate model
type Teammate struct {
	ID        *uuid.UUID `json:"id,omitempty"`
	SlackID   *string    `json:"slack_id,omitempty"`
	Username  *string    `json:"username,omitempty"`
	FirstName *string    `json:"first_name,omitempty"`
	LastName  *string    `json:"last_name,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Avatar    *string    `json:"avatar,omitempty"`
	Timezone  *string    `json:"timezone,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewTeammate model
func NewTeammate(db DB) Teammates {
	return Teammates{
		DB: db,
	}
}

// getFields fetch the non-nil fields
func (t *Teammates) getFields(tt *Teammate) map[string]interface{} {
	fields := map[string]interface{}{}

	if tt.ID != nil {
		fields["id"] = tt.ID
	}

	if tt.SlackID != nil {
		fields["slack_id"] = tt.SlackID
	}

	if tt.Username != nil {
		fields["username"] = tt.Username
	}

	if tt.FirstName != nil {
		fields["first_name"] = tt.FirstName
	}

	if tt.LastName != nil {
		fields["last_name"] = tt.LastName
	}

	if tt.Email != nil {
		fields["email"] = tt.Email
	}

	if tt.Avatar != nil {
		fields["avatar"] = tt.Avatar
	}

	if tt.Timezone != nil {
		fields["timezone"] = tt.Timezone
	}

	if tt.CreatedAt != nil {
		fields["created_at"] = tt.CreatedAt
	}

	if tt.UpdatedAt != nil {
		fields["updated_at"] = tt.UpdatedAt
	}

	return fields
}
