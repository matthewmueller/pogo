package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (r *Reports) UpdateMany(rr *Report, condition string, params ...interface{}) (reports []Report, err error) {
	fields := r.getFields(rr)

	// prepare the slices
	_c, _i, _v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE jack.reports SET (` +
		strings.Join(_c, ", ") + `) = (` +
		strings.Join(_i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "user_id", "timestamp", "questions", "standup_id", "status", "created_at", "updated_at"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, _v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := r.DB.Query(sqlstr, values...)
	if err != nil {
		return reports, err
	}
	defer rows.Close()

	for rows.Next() {
		report := Report{}
		err = rows.Scan(&report.ID, &report.UserID, &report.Timestamp, &report.Questions, &report.StandupID, &report.Status, &report.CreatedAt, &report.UpdatedAt)
		if err != nil {
			return reports, err
		}
		reports = append(reports, report)
	}

	if rows.Err() != nil {
		return reports, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(reports) == 0 {
		return make([]Report, 0), nil
	}

	return reports, nil
}
