package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (c *Crons) UpdateMany(cc *Cron, condition string, params ...interface{}) (crons []Cron, err error) {
	fields := c.getFields(cc)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.crons SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "frequency", "job", "tz", "start_time", "end_time", "retry", "created", "updated"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := c.DB.Query(sqlstr, values...)
	if err != nil {
		return crons, err
	}
	defer rows.Close()

	for rows.Next() {
		cron := Cron{}
		err = rows.Scan(&cron.ID, &cron.Frequency, &cron.Job, &cron.Tz, &cron.StartTime, &cron.EndTime, &cron.Retry, &cron.Created, &cron.Updated)
		if err != nil {
			return crons, err
		}
		crons = append(crons, cron)
	}

	if rows.Err() != nil {
		return crons, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(crons) == 0 {
		return make([]Cron, 0), nil
	}

	return crons, nil
}
