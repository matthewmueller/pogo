package jack

import (
	"github.com/matthewmueller/pgx"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a Team by "id"
func (t *Teams) Find(id *int) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"
    FROM public.teams
    WHERE "id" = $1`

	DBLog(sqlstr, id)
	row := t.DB.QueryRow(sqlstr, id)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindByBotAccessToken find a Team
func (t *Teams) FindByBotAccessToken(botaccesstoken *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"
		FROM public.teams
		WHERE "bot_access_token" = $1`

	DBLog(sqlstr, botaccesstoken)
	row := t.DB.QueryRow(sqlstr, botaccesstoken)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindByTeamAccessToken find a Team
func (t *Teams) FindByTeamAccessToken(teamaccesstoken *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"
		FROM public.teams
		WHERE "team_access_token" = $1`

	DBLog(sqlstr, teamaccesstoken)
	row := t.DB.QueryRow(sqlstr, teamaccesstoken)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindByTeamID find a Team
func (t *Teams) FindByTeamID(teamid *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "team_access_token", "bot_access_token", "trial_ends", "team_name", "team_id", "bot_user_id", "scope", "email", "stripe_id", "active", "created", "updated", "free_teammates", "cost_per_user"
		FROM public.teams
		WHERE "team_id" = $1`

	DBLog(sqlstr, teamid)
	row := t.DB.QueryRow(sqlstr, teamid)
	err = row.Scan(&team.ID, &team.TeamAccessToken, &team.BotAccessToken, &team.TrialEnds, &team.TeamName, &team.TeamID, &team.BotUserID, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.Created, &team.Updated, &team.FreeTeammates, &team.CostPerUser)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}
