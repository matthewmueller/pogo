package jack

import (
	"github.com/matthewmueller/pgx"
	"github.com/satori/go.uuid"
)

// GENERATED BY POGO. DO NOT EDIT.

// Find a Team by "id"
func (t *Teams) Find(id *uuid.UUID) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
    FROM jack.teams
    WHERE "id" = $1`

	DBLog(sqlstr, id)
	row := t.DB.QueryRow(sqlstr, id)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindBySlackBotAccessToken find a Team
func (t *Teams) FindBySlackBotAccessToken(slackbotaccesstoken *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
		FROM jack.teams
		WHERE "slack_bot_access_token" = $1`

	DBLog(sqlstr, slackbotaccesstoken)
	row := t.DB.QueryRow(sqlstr, slackbotaccesstoken)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindBySlackTeamAccessToken find a Team
func (t *Teams) FindBySlackTeamAccessToken(slackteamaccesstoken *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
		FROM jack.teams
		WHERE "slack_team_access_token" = $1`

	DBLog(sqlstr, slackteamaccesstoken)
	row := t.DB.QueryRow(sqlstr, slackteamaccesstoken)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}

// FindBySlackTeamID find a Team
func (t *Teams) FindBySlackTeamID(slackteamid *string) (team Team, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
		SELECT "id", "slack_team_id", "slack_team_access_token", "slack_bot_access_token", "slack_bot_id", "team_name", "scope", "email", "stripe_id", "active", "free_teammates", "cost_per_user", "trial_ends", "created_at", "updated_at"
		FROM jack.teams
		WHERE "slack_team_id" = $1`

	DBLog(sqlstr, slackteamid)
	row := t.DB.QueryRow(sqlstr, slackteamid)
	err = row.Scan(&team.ID, &team.SlackTeamID, &team.SlackTeamAccessToken, &team.SlackBotAccessToken, &team.SlackBotID, &team.TeamName, &team.Scope, &team.Email, &team.StripeID, &team.Active, &team.FreeTeammates, &team.CostPerUser, &team.TrialEnds, &team.CreatedAt, &team.UpdatedAt)
	if err != nil {
		if err == pgx.ErrNoRows {
			return team, ErrTeamNotFound
		}
		return team, err
	}

	return team, nil
}
