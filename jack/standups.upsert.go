package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"

	"github.com/matthewmueller/pgx"
)

// Upsert the Standup by the Primary Key
func (s *Standups) Upsert(ss *Standup, action string) (standup Standup, err error) {
	fields := s.getFields(ss)

	// prepare the slices
	c, i, v := querySlices(fields, 0)

	// determine on conflict action
	var upsertAction string
	if action == UpsertDoUpdate {
		upsertAction = `DO UPDATE SET (` + strings.Join(c, ", ") + `) = ( EXCLUDED.` + strings.Join(c, ", EXCLUDED.") + `)`
	} else if action == UpsertDoNothing {
		upsertAction = UpsertDoNothing
	} else {
		return standup, errors.New("invalid upsert action")
	}

	// sql query
	sqlstr := `INSERT INTO public.standups (` + strings.Join(c, ", ") + `) ` +
		`VALUES (` + strings.Join(i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		upsertAction + ` ` +
		`RETURNING "id", "channel_id", "time", "tz", "questions", "created", "updated", "owner", "team_id", "name"`

		// run query
	DBLog(sqlstr, v...)
	row := s.DB.QueryRow(sqlstr, v...)
	err = row.Scan(&standup.ID, &standup.ChannelID, &standup.Time, &standup.Tz, &standup.Questions, &standup.Created, &standup.Updated, &standup.Owner, &standup.TeamID, &standup.Name)
	if err != nil && err != pgx.ErrNoRows {
		return standup, err
	}

	return standup, nil
}
