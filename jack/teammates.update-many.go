package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"strings"
)

// UpdateMany rows by the condition
func (t *Teammates) UpdateMany(tt *Teammate, condition string, params ...interface{}) (teammates []Teammate, err error) {
	fields := t.getFields(tt)

	// prepare the slices
	c, i, v := querySlices(fields, len(params))

	// sql query
	sqlstr := `UPDATE public.teammates SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE ` + condition + ` ` +
		`RETURNING "id", "slack_id", "team_id", "created", "updated"`

	values := []interface{}{}
	values = append(values, params...)
	values = append(values, v...)

	// run query
	DBLog(sqlstr, values...)
	rows, err := t.DB.Query(sqlstr, values...)
	if err != nil {
		return teammates, err
	}
	defer rows.Close()

	for rows.Next() {
		teammate := Teammate{}
		err = rows.Scan(&teammate.ID, &teammate.SlackID, &teammate.TeamID, &teammate.Created, &teammate.Updated)
		if err != nil {
			return teammates, err
		}
		teammates = append(teammates, teammate)
	}

	if rows.Err() != nil {
		return teammates, rows.Err()
	}

	// ensure we return an empty array
	// rather than nil when we marshal
	if len(teammates) == 0 {
		return make([]Teammate, 0), nil
	}

	return teammates, nil
}
