package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
)

// Update the Cron by the Primary Key
func (c *Crons) Update(cc *Cron, id *int) (cron Cron, err error) {
	fields := c.getFields(cc)

	// first check if we have the primary key
	if id == nil {
		return cron, errors.New(`primary key "id" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.crons SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `)
		WHERE "id" = $1
		RETURNING "id", "frequency", "job", "tz", "start_time", "end_time", "retry", "created", "updated"`

	// run query
	values := append([]interface{}{id}, v...)
	DBLog(sqlstr, values...)

	row := c.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&cron.ID, &cron.Frequency, &cron.Job, &cron.Tz, &cron.StartTime, &cron.EndTime, &cron.Retry, &cron.Created, &cron.Updated)
	if err != nil {
		return cron, err
	}

	return cron, nil
}

// UpdateByJob find a Cron
func (c *Crons) UpdateByJob(cc *Cron, job *string) (cron Cron, err error) {
	fields := c.getFields(cc)

	// first check if we have all the keys we need
	if job == nil {
		return cron, errors.New(`job must be non-nil`)
	}

	// don't update the keys
	delete(fields, "job")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.crons SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "job" = $1 ` +
		`RETURNING "id", "frequency", "job", "tz", "start_time", "end_time", "retry", "created", "updated"`

	// run query
	values := []interface{}{}
	values = append(values, job)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := c.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&cron.ID, &cron.Frequency, &cron.Job, &cron.Tz, &cron.StartTime, &cron.EndTime, &cron.Retry, &cron.Created, &cron.Updated)
	if err != nil {
		return cron, err
	}

	return cron, nil
}
