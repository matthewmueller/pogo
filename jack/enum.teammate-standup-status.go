package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// TeammateStandupStatus is the 'teammate_standup_status' enum type from schema 'public'.
type TeammateStandupStatus uint16

const (

	// TeammateStandupStatusActive is the 'ACTIVE' TeammateStandupStatus.
	TeammateStandupStatusActive = TeammateStandupStatus(1)

	// TeammateStandupStatusRemoved is the 'REMOVED' TeammateStandupStatus.
	TeammateStandupStatusRemoved = TeammateStandupStatus(2)

	// TeammateStandupStatusOptout is the 'OPTOUT' TeammateStandupStatus.
	TeammateStandupStatusOptout = TeammateStandupStatus(3)
)

// String returns the string value of the TeammateStandupStatus.
func (tss TeammateStandupStatus) String() string {
	var enumVal string

	switch tss {

	case TeammateStandupStatusActive:
		enumVal = "ACTIVE"

	case TeammateStandupStatusRemoved:
		enumVal = "REMOVED"

	case TeammateStandupStatusOptout:
		enumVal = "OPTOUT"

	}

	return enumVal
}

// MarshalText marshals TeammateStandupStatus into text.
func (tss TeammateStandupStatus) MarshalText() ([]byte, error) {
	return []byte(tss.String()), nil
}

// UnmarshalText unmarshals TeammateStandupStatus from text.
func (tss *TeammateStandupStatus) UnmarshalText(text []byte) error {
	switch string(text) {

	case "ACTIVE":
		*tss = TeammateStandupStatusActive

	case "REMOVED":
		*tss = TeammateStandupStatusRemoved

	case "OPTOUT":
		*tss = TeammateStandupStatusOptout

	default:
		return errors.New("invalid TeammateStandupStatus")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TeammateStandupStatus.
func (tss TeammateStandupStatus) Value() (driver.Value, error) {
	return tss.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for TeammateStandupStatus.
func (tss *TeammateStandupStatus) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid TeammateStandupStatus")
	}

	return tss.UnmarshalText(buf)
}

// ScanPgx into PGX
func (tss *TeammateStandupStatus) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return tss.UnmarshalText(vr.ReadBytes(vr.Len()))
}
