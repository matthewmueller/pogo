package jack

// GENERATED BY POGO. DO NOT EDIT.

import (
	"errors"
	"strings"
)

// Update the TeammateStandup by the Primary Key
func (ts *TeammateStandups) Update(tsts *TeammateStandup, id *int) (teammatestandup TeammateStandup, err error) {
	fields := ts.getFields(tsts)

	// first check if we have the primary key
	if id == nil {
		return teammatestandup, errors.New(`primary key "id" must be non-nil`)
	}

	// don't update the primary key
	delete(fields, "id")

	// prepare the slices
	c, i, v := querySlices(fields, 1)

	// sql query
	sqlstr := `UPDATE public.teammate_standups SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `)
		WHERE "id" = $1
		RETURNING "id", "standup_id", "teammate_id", "time", "status"`

	// run query
	values := append([]interface{}{id}, v...)
	DBLog(sqlstr, values...)

	row := ts.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&teammatestandup.ID, &teammatestandup.StandupID, &teammatestandup.TeammateID, &teammatestandup.Time, &teammatestandup.Status)
	if err != nil {
		return teammatestandup, err
	}

	return teammatestandup, nil
}

// UpdateByStandupIDAndTeammateID find a TeammateStandup
func (ts *TeammateStandups) UpdateByStandupIDAndTeammateID(tsts *TeammateStandup, standupid *int, teammateid *int) (teammatestandup TeammateStandup, err error) {
	fields := ts.getFields(tsts)

	// first check if we have all the keys we need
	if standupid == nil {
		return teammatestandup, errors.New(`standup_id must be non-nil`)
	}
	if teammateid == nil {
		return teammatestandup, errors.New(`teammate_id must be non-nil`)
	}

	// don't update the keys
	delete(fields, "standupid")
	delete(fields, "teammateid")

	// prepare the slices
	c, i, v := querySlices(fields, 2)

	// sql query
	sqlstr := `UPDATE public.teammate_standups SET (` +
		strings.Join(c, ", ") + `) = (` +
		strings.Join(i, ", ") + `) ` +
		`WHERE "standup_id" = $1 AND "teammate_id" = $2 ` +
		`RETURNING "id", "standup_id", "teammate_id", "time", "status"`

	// run query
	values := []interface{}{}
	values = append(values, standupid)
	values = append(values, teammateid)

	values = append(values, v...)
	DBLog(sqlstr, values...)

	row := ts.DB.QueryRow(sqlstr, values...)
	err = row.Scan(&teammatestandup.ID, &teammatestandup.StandupID, &teammatestandup.TeammateID, &teammatestandup.Time, &teammatestandup.Status)
	if err != nil {
		return teammatestandup, err
	}

	return teammatestandup, nil
}
