package jack

import (
	"errors"
	"time"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrCronNotFound returned if the Cron is not found
var ErrCronNotFound = errors.New("Cron not found")

// Crons class
type Crons struct {
	DB DB
}

// Cron model
type Cron struct {
	ID        *int       `json:"id,omitempty"`
	Frequency *string    `json:"frequency,omitempty"`
	Job       *string    `json:"job,omitempty"`
	Tz        *string    `json:"tz,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty"`
	EndTime   *time.Time `json:"end_time,omitempty"`
	Retry     *int       `json:"retry,omitempty"`
	Created   *time.Time `json:"created,omitempty"`
	Updated   *time.Time `json:"updated,omitempty"`
}

// NewCron model
func NewCron(db DB) Crons {
	return Crons{
		DB: db,
	}
}

// getFields fetch the non-nil fields
func (c *Crons) getFields(cc *Cron) map[string]interface{} {
	fields := map[string]interface{}{}

	if cc.ID != nil {
		fields["id"] = cc.ID
	}

	if cc.Frequency != nil {
		fields["frequency"] = cc.Frequency
	}

	if cc.Job != nil {
		fields["job"] = cc.Job
	}

	if cc.Tz != nil {
		fields["tz"] = cc.Tz
	}

	if cc.StartTime != nil {
		fields["start_time"] = cc.StartTime
	}

	if cc.EndTime != nil {
		fields["end_time"] = cc.EndTime
	}

	if cc.Retry != nil {
		fields["retry"] = cc.Retry
	}

	if cc.Created != nil {
		fields["created"] = cc.Created
	}

	if cc.Updated != nil {
		fields["updated"] = cc.Updated
	}

	return fields
}
