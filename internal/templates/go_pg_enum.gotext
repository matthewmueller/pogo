package {{$.Package}}

import (
  "database/sql/driver"

	"github.com/jackc/pgx/pgtype"
)

// GENERATED BY POGO. DO NOT EDIT.

{{/*************************************************************************/}}
{{/* Our enum type */}}
{{/*************************************************************************/}}

// {{$.Enum.Pascal}} is the "{{$.Enum.Name}}" enum type from "{{$.Schema.Name}}".
type {{$.Enum.Pascal}} string

{{/*************************************************************************/}}
{{/* Our enum type */}}
{{/*************************************************************************/}}

const (
  {{- range $val := $.Enum.Values }}
    // {{$.Enum.Pascal}}{{$val.Pascal}} is the '{{$val.Label}}' {{$.Enum.Pascal}}.
    {{$.Enum.Pascal}}{{$val.Pascal}} = {{$.Enum.Pascal}}("{{$val.Label}}")
  {{- end }}
)

{{/*************************************************************************/}}
{{/* Satisfy the sql/driver.Valuer interface */}}
{{/*************************************************************************/}}

// Value satisfies the sql/driver.Valuer interface for {{$.Enum.Pascal}}.
func ({{$.Enum.Camel}} {{$.Enum.Pascal}}) Value() (driver.Value, error) {
  return string({{$.Enum.Camel}}), nil
}

{{/*************************************************************************/}}
{{/* Satisfy the pgtypes.EncodeBinary interface */}}
{{/*************************************************************************/}}

// EncodeBinary Satisfies the pgtypes.EncodeBinary interface for {{$.Enum.Pascal}}.
func ({{$.Enum.Camel}} {{$.Enum.Pascal}}) EncodeBinary(_ *pgtype.ConnInfo, b []byte) ([]byte, error) {
  return append(b, []byte({{$.Enum.Camel}})...), nil
}