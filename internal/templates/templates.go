// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/templates/pg_enum.gotmpl
// internal/templates/pg_model.gotmpl
// internal/templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatesPg_enumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x4d\x6b\xdb\x30\x18\xbe\xeb\x57\x3c\x84\x42\xed\x92\xc9\xf7\x41\x0f\x6b\x63\x4a\x61\xc4\x61\x09\x83\x31\xc6\x50\x9c\xd7\xa9\x99\xfd\xda\x93\xe4\x82\x11\xfa\xef\xc3\x1f\x0d\x09\x0e\xe4\xb0\xb6\x50\x9f\x84\xf4\xea\xf9\xb4\x6a\x95\xfe\x51\x7b\x82\x73\x57\x72\x35\xac\xbd\x17\x22\x8a\xf0\x10\x2f\xe3\x6f\x5f\x36\xf1\x02\x77\x3f\xb0\x4a\x1e\x12\x89\x45\x82\x65\xb2\x41\xbc\x78\xdc\x48\x21\x9c\x8b\x6e\x5e\xeb\x8b\xbc\xef\xf1\x90\x34\x1a\xc4\x4d\x09\xdb\xd6\x84\xc3\xfe\x6b\xf2\x74\xe6\x3a\xbb\x31\x37\xa5\x5c\x29\x93\xaa\xc2\x7b\xe4\x06\xf6\x89\x30\x3b\x9c\x2c\x55\x49\xde\xcf\x8e\xd4\x64\xba\x2a\x87\x81\x75\xfa\x44\xa5\x7a\x19\x91\xa2\x3f\x9e\x62\x1a\xab\x73\xde\x7f\xe0\xa4\xd2\x8a\x8d\x45\x20\x00\xe7\x3e\x41\x2b\xde\x13\xae\x9e\x55\x81\xcf\xb7\x18\xcd\x7e\x57\x45\x43\x06\xde\x0b\x00\x38\x17\xad\x73\xdd\x95\x49\xd2\xd7\xe3\xfe\x57\xb5\xa5\xc2\xfb\xeb\xe9\x45\xd9\x43\x5e\xc4\xbb\x9d\x8e\x04\xb3\x53\xf0\x59\x38\x5a\x20\xde\x75\x52\xc3\x37\xea\x64\xad\x6c\x6e\xb2\xb6\xf7\x67\xfe\x16\xd1\x4e\xe7\xcf\xa4\x87\x8c\x34\x72\xb6\xa4\x33\x95\xbe\xe1\x7f\xdd\x33\xc1\xf4\x32\x72\x32\x17\x85\x64\x95\x3e\x97\x7b\xd6\x70\x8a\xe0\x70\x70\xaf\xca\x2e\xc5\xe9\x64\x38\x10\x06\x21\x82\x63\x86\x39\x48\xeb\x4a\x87\x70\x02\xd0\x64\x1b\xcd\xe3\x5b\x98\x60\x86\x73\x70\x5e\x08\xff\x0e\x85\xd4\xfb\xee\xa5\x18\x19\x73\x5a\xed\xe8\x2e\x67\xa5\xdb\xf7\xe8\xe4\x84\x6f\x7d\x52\xcd\x05\x49\xff\xdd\xce\x31\x6e\xf0\x1b\x37\x03\x9f\xbc\xaf\x98\x1f\x39\xab\xe6\xd8\xe2\xe7\xaf\x6d\x6b\x29\x44\x30\x2c\xce\x55\xa7\xea\x9a\x78\x17\x6c\xe7\xe3\xf0\xb4\x44\x29\xe5\x4b\x91\xff\x02\x00\x00\xff\xff\x85\x5b\x56\x26\x51\x06\x00\x00")

func internalTemplatesPg_enumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPg_enumGotmpl,
		"internal/templates/pg_enum.gotmpl",
	)
}

func internalTemplatesPg_enumGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPg_enumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pg_enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0xb4, 0x96, 0x4b, 0x30, 0x3, 0xa5, 0x58, 0x43, 0x75, 0x4f, 0xfa, 0x28, 0x79, 0x41, 0x8d, 0x8e, 0x94, 0x41, 0x3f, 0x7a, 0xb, 0xfe, 0x66, 0x58, 0x77, 0x2d, 0xa, 0xf2, 0xff, 0xdf, 0x43}}
	return a, nil
}

var _internalTemplatesPg_modelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x73\xdb\xb8\x92\x7e\x26\x7f\x45\x1f\x56\x4e\x86\x8a\x35\xd4\x64\x1f\xbd\xab\xad\x8a\x6d\x79\xd6\xe7\x38\x72\xd6\x76\xce\xec\x54\x2a\x25\xd1\x24\x64\xe3\x98\x02\x35\x00\x25\x5b\xa5\xe2\x7f\xdf\xc2\x8d\x04\x2f\xba\xd9\x96\x2f\x09\xfd\x62\x89\x04\x1a\x40\xa3\xfb\xfb\x1a\x60\x13\x9a\xf8\xc1\xad\x7f\x8d\x60\xb1\x78\xe7\x7d\x91\x9f\xd3\xd4\xb6\xf1\x78\x12\xd3\x04\x5c\x1b\xc0\x09\x62\x92\xa0\xfb\xc4\xe1\x9f\x11\x09\xe2\x10\x93\xeb\xce\xbf\x59\x4c\x1c\xdb\x72\x10\xa5\x31\x65\xfc\x13\x4b\x28\x26\xd7\xe2\x63\x82\xc7\xc8\xb1\x6d\xcb\xb9\xc6\xc9\xcd\xf4\xca\x0b\xe2\x71\xe7\xdf\x7e\x70\x1b\x74\x26\xd7\xf7\x8e\xdd\xb2\xed\x4e\x07\x7e\xef\xf5\x7b\xe7\x9f\x2e\x7b\x47\x70\xf0\x27\x7c\x39\xfb\xfd\xcc\x83\xa3\x33\xe8\x9f\x5d\x42\xef\xe8\xe4\xd2\x13\x65\x7a\x94\xf2\x8e\x5d\xfa\x57\x11\xf2\xbe\xf8\x2c\xf0\xa3\x34\xed\xc7\xc9\x71\x3c\x25\x21\x50\x94\x4c\x29\x41\x21\xe0\x11\x24\x37\x72\x0c\xb2\x68\xdf\x1f\xa3\x34\x05\xcc\x80\xc4\x09\x8c\x78\x69\x7b\xe6\xd3\x35\xf2\xba\x20\x47\xe3\xf5\xd1\x9d\xeb\xe4\x05\x0f\xfd\x31\x8a\xd2\x34\x97\xe5\xc8\x11\x54\x45\x01\x45\x6c\x1a\x25\x10\xfa\x89\x0f\xa3\x98\x82\x90\x72\x11\xdc\xa0\xb1\xaf\x3a\xe5\x78\x4e\xb9\x9f\x8e\x9d\xcc\x27\xa8\x4e\x1c\x4b\xe8\x34\x48\x60\x61\x03\x2c\x16\xbf\x02\xf5\xc9\x35\x82\x77\x41\x1c\xc1\x7e\x17\xb2\xee\xc5\xd1\x74\x4c\x18\xa4\xa9\x28\xc6\x6f\xe7\x12\x16\x0b\xae\x1d\x71\xad\x1f\x27\xfd\x69\x14\x41\x9a\xaa\x42\x97\xf3\x09\xe2\x5f\x00\x45\x0c\x41\x9a\x7e\xa8\x5c\x27\x21\xa4\x29\x0c\xf9\x64\xef\x3b\xea\xee\x05\xf1\x6f\x51\x9a\xb6\xe3\x31\x4e\xd0\x78\x92\xcc\x9d\xa1\xea\x9e\x2c\x6e\xa7\xb6\xd0\xf5\x00\x26\xf1\x75\xec\x9d\xc7\x77\xd0\x05\xf7\x43\x75\x74\x2d\x97\xe0\x48\x6a\xf2\x08\x05\x71\x88\x00\x8f\x27\x11\x1a\x23\x92\xb0\xac\xae\x3d\x9a\x92\x00\xdc\xbc\xf6\xc5\x4d\x4c\x93\x34\x85\x3a\x81\x4a\x8e\x5b\x9d\x3a\x4c\x12\x44\x47\x7e\x80\x16\x69\x4b\xce\xb2\x50\xea\xa0\x52\xb2\x0d\xf1\x2d\x57\x6e\xe5\x86\x57\x3b\x04\x1b\xb8\x7a\xff\x16\xdf\x0a\x71\xa0\x4c\x12\x46\xe3\xc4\xeb\xf1\x56\x46\xee\xb0\xda\x99\x50\xf4\x72\x1f\x9c\xbf\x5f\x3a\xda\x46\x7d\x70\x6a\xe4\x3b\xc3\x76\xb5\x27\xbc\x51\x3e\xd5\x1f\xaa\xbd\x87\xae\xa9\x17\xa5\x2a\x3b\xeb\x16\xc1\x11\x9f\x9d\x4e\x07\xfa\xe8\x6e\x43\xdb\x04\x4c\x26\xd3\x44\x4e\x03\xf7\x8b\x16\x7c\x38\xe1\x57\xc4\x80\x95\xdc\xf7\xe2\xca\x22\x55\xc2\xe5\xfd\x07\xf9\x80\xac\xfa\x10\xb3\x97\x36\x2e\xf4\x00\xd2\x3c\x20\x33\x66\x5d\xe6\xd7\xdc\x17\xa6\x51\xc4\xa5\xc8\x3b\x00\x44\x7d\xd7\xb5\xe4\x04\x08\x41\x4b\x24\x29\x63\x5f\x61\xf9\x27\x84\x21\x9a\x88\x56\xb8\x03\x88\xa1\x69\x9b\x5f\x2c\xd6\x8f\x4a\x22\x4c\xc1\x9b\x19\x4a\x98\x80\x3a\xed\x8c\x5a\x79\x4b\xbd\x44\xb6\x5a\x16\xe4\xaa\xef\xda\x6c\x0a\x8e\x5f\x98\xe1\x8a\x48\xaf\x54\xb5\x0b\xef\x8b\x57\x72\xb3\xa8\x5a\x62\xca\x47\x5e\x3f\x0b\xdc\x28\x97\x4e\xc2\x1d\x8e\x22\x3e\x78\x31\xf6\xa1\xbe\xcf\x07\x0f\x69\x3a\x84\x24\x86\xfe\xd7\xd3\x53\x2e\x77\x58\xec\xcc\x50\xf8\xd7\x34\x8a\xd6\x6a\x68\x69\xe3\x65\x5d\x95\xed\x61\x8d\xba\x96\x5b\xd6\x96\x9a\x33\xec\xcc\xf8\xc8\xf5\xf6\xd9\xa7\xec\xc6\x8f\xfe\x71\x71\xd6\x87\xb1\xfc\x9c\x5b\x49\x11\x20\xb8\x3b\x27\x31\xf0\xa2\x6b\x35\x62\x88\x75\x5b\xe0\x7e\xfb\x7e\x35\x4f\x50\x5b\xa2\x67\xcb\x74\x7f\x4e\x0f\x9e\x2a\x5d\x95\xd7\x52\xa8\xf0\x95\x8c\x8d\x7e\x4e\x49\xd6\x53\x5e\x9d\x4f\xa1\x5f\xd7\xdf\xb5\xbd\x2c\x88\x75\x05\xe8\xc8\x9e\x9a\x38\x6f\x76\x34\xab\x20\x0a\xb7\xab\xba\x16\x1d\x5e\xd7\xec\x85\x88\x76\xdc\x16\xc8\xb0\xc7\x6c\xa5\x06\xdb\x36\x10\x18\x48\xc7\x77\x5b\x30\xf6\x27\xdf\xa4\xd4\xef\x06\x6d\x89\x16\x54\x21\x0e\x18\x63\xff\x16\xb9\xf5\x45\x5b\xb6\x44\xc4\x0d\x70\x73\x35\x2a\x0a\x72\xdb\xc6\xa4\xff\xd6\xe5\x1c\xa3\xb8\x90\xff\xa9\x0e\x7f\x2b\xe1\xd5\xf7\x5a\xa2\x5a\x2e\x58\xc9\xcb\x7b\x9c\xa1\xef\x92\x2e\x96\x7c\xb6\xd4\xaf\xed\x7a\x55\x71\x52\xd9\x91\x2c\x3e\xb2\xf3\xa9\x57\x82\x33\x1e\xe4\x04\x50\x89\x6a\x72\x5e\x58\x6b\x14\xb2\xa8\x1b\x5e\xc9\x9a\x47\x07\x2d\x70\x75\x64\x54\xe7\x89\x59\xf9\x65\x66\x2d\xa9\xff\x18\x47\x09\xa2\x10\x50\xe4\x27\x88\x81\x0f\x04\xdd\xc1\x48\x5c\xcc\x88\x5e\x96\xe1\x74\xaf\x4a\x9b\x7c\x2f\x2f\x65\x84\xaf\x4a\x48\x09\x6c\x6b\xd2\x57\xd5\x33\xd6\xb7\x46\x31\x1d\xfb\x09\x83\x6f\xdf\xa5\x71\xdb\xd6\xcc\x8f\xa6\x88\x01\x7c\x33\xed\xdc\x06\xe5\xe2\xea\x7f\x89\x7f\x0f\x63\x12\xe2\x04\xc7\x44\xd0\xaf\x6c\xc4\x88\x39\x0f\x23\x7f\xca\x10\x8c\x88\x9a\x85\x91\x1e\x69\x4b\xdd\xe2\x63\x97\x82\x64\xc9\x85\x6d\xe9\xf1\x1b\x97\x17\xb6\x65\x71\x26\xd8\x07\x00\xe7\x8f\xff\xe9\x9d\xf7\x9c\xb6\x6d\x59\xc7\x62\x08\xfb\x0a\x1e\x98\xf7\x8f\x18\x13\x77\xe4\xa9\x91\xb5\xc1\x81\x4f\xfd\x23\x70\x5a\xbc\xec\x17\x9f\xfa\x63\xb6\x0f\x23\x4f\x0e\xb3\x2d\x6c\x4c\xc4\x8f\xfb\x00\x23\x4f\x0c\xae\x6d\x5b\x5a\xdd\x9f\x48\xa8\x67\xab\xd3\x81\x4a\xef\x3f\x91\xd0\xd5\x53\xe1\x79\x5e\x76\x3d\x9f\xc8\x4e\x07\x00\xb8\xa6\x02\x31\x04\x43\xd1\xe2\x0e\x9f\xbf\x41\x5b\x35\xc1\xa1\x43\x02\x89\x96\xa9\xea\x03\x0c\xa0\x6b\xf4\x83\xff\x75\x3a\x99\xc8\x2e\xf8\x93\x09\x22\xa1\xab\x2e\xb4\x95\x2a\x54\xd7\xf2\xd9\x71\x5b\xad\x96\xac\x9f\xaa\xe6\xbd\x8a\x8c\xec\x52\xbb\xa8\xd0\xec\xaa\x56\xa7\x92\xa4\xc3\x70\xfe\x4d\xea\xec\x8c\xae\x52\xd9\x19\xfd\x09\x35\x76\x76\xbe\x54\x61\x39\x79\xe4\x43\xd2\xae\x7b\xac\x06\x25\xe2\x90\xbc\x18\x8a\x42\x51\x4a\x75\xf6\x98\x5f\xc8\xc3\x58\x55\xc2\xa0\x8a\xfc\xda\x11\x62\x01\xc5\x13\xe1\xa9\x69\x5a\xf5\xc6\x9a\xda\xee\xcc\xb8\x9a\xc7\x61\x06\x52\x69\x5a\x93\x45\x2e\x26\x14\xf9\x8a\x31\xf8\x2c\x52\x63\x02\x05\x83\x44\x88\xb8\xb3\x16\x74\xbb\xf0\x9b\x62\x89\xcc\x57\x4d\x9d\x66\xee\x3b\x1c\xf9\x11\x43\xc3\x56\x61\xd1\x27\xd6\x65\x1c\xbc\x94\x56\x66\x1c\x32\x2c\x6a\x48\xa0\x5c\xf1\x7f\x67\x4e\x8b\x3b\xf3\xba\x36\xf8\x22\xf2\x62\x42\x31\x49\xc4\x2a\x52\x8f\x45\x22\x0b\x8f\x7b\x4b\x53\xcb\x85\x1b\xe5\xb2\x31\x0f\xb9\xb9\x64\x36\x8a\x73\xf3\x9c\x65\x43\x55\xf0\x6a\xf4\x42\x21\x91\xa1\xe6\xc3\x18\xd1\x00\x81\x83\x1d\xc8\xd7\xa0\x82\x8b\xe5\xee\x41\x45\xe9\xc5\x68\x02\x8f\x60\xc6\xf5\x9b\xf3\xf0\x1a\x0d\xe7\x2d\x73\x41\xf9\xa8\x6b\x74\x5e\x8a\x09\x36\x16\x6c\x0a\xb5\xb6\xd3\xc2\x4c\x6b\xc1\x68\xd9\xca\x3a\xb5\x2a\x5a\x3f\xa3\x21\xa2\x07\x73\x60\x13\x14\xe0\x11\x0e\x30\x92\xc1\xfa\xd9\xf9\x51\xef\xfc\x60\x0e\x07\x7f\xc2\x7f\xc5\xbc\xcc\x7f\x4b\x76\xcc\xca\x4b\x73\xb5\x83\x98\xb0\x04\x5c\xdb\xe2\x4c\x70\x71\x08\x2c\xa6\x09\x83\xab\x39\xf8\x2c\x40\x24\xe4\xc1\xa8\xa8\x6e\x5b\xfc\xae\xae\xdd\x05\xe7\xd3\xc5\xa1\x63\x8b\x6a\x47\x3d\xb3\x5e\x88\xca\x15\xc5\x7d\xa3\x26\xff\xae\xb7\xed\xfa\xe8\x4e\xdc\xc9\x88\x53\x5f\xe0\x74\x29\xef\x18\x44\x29\x2e\x2c\xca\x2b\xe3\x22\x33\x8b\x32\x06\x31\x4b\x21\xa2\x2b\x52\x33\xd7\x78\x86\x08\x08\xfd\x33\x43\x27\xab\x02\x86\xb4\x96\xe2\x63\xd5\xc3\x47\x30\xbc\x98\x25\x38\xf8\x73\x39\xc9\xc7\x06\xc9\xb7\x25\xc3\xab\x85\x6f\x15\x2c\x15\xa4\x9e\xc9\xb1\x2e\x07\x4b\x39\x57\xa6\x4b\xe8\xa5\x2f\x9f\x77\x02\xe8\x7e\x42\x11\x63\x38\xae\x8e\xb4\x0e\x3d\x85\x6e\xf5\x04\x9b\xd3\x16\x57\x3d\x27\xde\x0a\x90\x84\xe4\x56\x2b\xd3\x63\x5c\x74\x05\x7b\xb1\xe8\x7c\x80\xcf\x71\x88\x22\x3d\x7b\x1f\x3a\x72\xd8\xf2\x22\x66\x62\x38\xe3\x49\x32\xd7\x05\x92\x1b\x3f\x81\x1b\x9f\x81\x1f\x45\xc2\x1c\xc6\x28\xb9\x89\x43\xe6\x89\x10\x3b\xf9\x85\xc1\x84\xe2\xb1\x4f\xa3\x39\x4c\x19\x0a\x05\xce\xa1\xf1\x15\x0a\x85\x45\x1b\x15\x78\x79\xb1\xfa\xbd\xc1\xd7\x37\x88\xfe\x1a\xa1\x19\x8a\x60\xcc\xdb\x65\x9e\xb4\xab\x42\xcf\x16\xa0\x3b\x7c\x3c\x25\x01\x37\xd7\x7d\x1d\xd2\xeb\x4e\xab\xaf\x7e\xcd\x9a\x4f\x36\x95\xad\xc2\xd7\x87\xc2\x62\xe2\x2a\x01\x7f\xcd\xfe\x5f\xb6\x3a\xa8\xdb\x91\x2c\xac\x0a\x3a\x1d\xb8\x46\x49\xa6\x38\x12\x93\x5f\x39\xfc\xea\x55\xa4\x4f\x42\x98\x50\x34\xf1\x29\xe2\xf7\xc7\x42\x75\xbc\xe0\x5f\x53\x44\xe7\x36\xc0\x20\x68\xc3\x00\xb7\x61\x30\xe3\xd6\xca\x22\x1c\xd4\xec\xad\x7a\xd9\xca\xb5\x0d\xbf\x89\xa5\x67\xa7\x03\xec\xaf\x08\xb0\x54\x8e\x10\xd6\x56\x93\x34\x87\x5b\x34\x87\x09\x8d\x67\x38\x44\x21\xb7\x5e\x86\xfe\x9a\x22\x12\x20\x1b\x78\x25\x96\x88\x58\x63\x28\x30\xfe\xa4\x7f\xd1\x3b\xbf\x84\x93\xfe\xe5\xd9\xa6\x9b\x95\xee\x10\xf6\x8a\xee\xc8\xc7\x20\xfc\x10\xf6\x40\x71\xc7\xbf\x3e\x9d\x7e\xed\x5d\xd4\x95\xc5\x95\xb2\xe7\xbd\xcb\xaf\xe7\xfd\x93\xfe\xef\xc6\x3c\x9c\x0b\xdb\xc6\xe4\x5a\xb0\xcd\x50\x0d\x39\x8a\xaf\xe5\x58\x39\xd5\xdd\xa1\x5f\x66\x28\x1f\xa7\xcf\xef\x5e\x23\x2a\x79\x50\x4c\xed\x69\x7c\x5d\x5c\x96\xea\xab\xae\x54\x03\xd7\xba\xe7\x79\x92\x68\x55\xd8\x52\xb3\xe1\x5b\xb5\x00\xbe\x4c\x8b\xef\xb8\x16\xc3\x2b\xef\x7f\x79\x87\xce\xe3\xbb\xaa\x50\x3c\x02\x24\x42\x81\xf8\xce\xbb\x08\x7c\x62\xae\x42\x03\x9f\xa4\x69\xeb\x3f\x01\x15\x7b\x98\xef\x22\xb7\x01\xe9\x7e\x69\xc0\xac\xdb\x4a\x57\xfb\xcd\xb9\xd3\xef\xde\x81\xdc\x0f\xa2\xa1\x9a\xa5\x73\xe3\x49\x8d\x27\xfd\x10\x9e\x54\x66\xa3\xcf\x3e\x99\x97\x1c\x4a\x5c\x7a\x5a\x4e\xe2\x22\x97\x78\xd3\x97\x68\x4a\xfd\x48\xeb\x91\x2f\xa0\xb5\x5b\x7d\xfb\xbe\xda\xb1\xac\xc1\x32\x29\xfb\x5d\xa8\xad\xbc\x50\x2b\xac\x41\x9d\x3b\x67\x2b\x9b\x65\x52\x79\x28\x57\xa7\x5e\x44\x85\xb3\xd4\x6e\x9f\x65\x4f\xdd\x2c\x8b\xcf\x34\xa5\xf9\x54\x5a\x96\x8e\x73\x96\x8d\x43\x88\xb6\x2d\x2b\x2d\x36\x5c\xec\x55\x16\x6b\x2d\x97\x52\xed\xb4\x58\x42\xae\x6f\x7e\x29\x04\xef\xda\x6a\x4a\x40\xdc\x98\xcf\x9b\x37\x9f\x1c\x77\x8e\x31\xe1\x48\xcc\xc1\x91\xaf\x3f\xc4\x93\xb9\x78\x04\x81\x5e\xd6\xb1\xcc\xb0\x54\xc9\x61\x75\x26\xc4\xd2\x85\xc5\x63\x64\x54\xf3\xa4\xe9\xf0\x4a\x05\x5b\xe1\x25\xc4\xce\x5c\x71\xf5\xb8\x01\x6f\x0f\x18\x07\xea\x6c\x86\x8a\xf5\x99\x2b\x04\x0b\x18\xaf\x99\x9c\x02\x48\xf3\x69\x48\x0d\x4a\x66\x28\x42\xc1\x03\x29\xf9\xa2\x77\xda\x3b\xbc\x84\xc5\x42\xb3\x84\x90\x95\xa6\x30\x84\x3d\x41\x0f\xc3\xe3\xf3\xb3\xcf\x9b\x12\xb5\xae\x34\x60\x3f\x0d\x7d\x8a\x2a\xdd\x2e\x4c\xae\xef\xbd\x1e\xa5\xfd\xf8\x3c\xbe\x63\xd9\xd3\x1d\x73\xde\x56\x26\xfc\xd8\xf9\x33\xa5\xa7\x08\x6d\x77\xec\x15\x19\xa0\x36\xee\xd1\xb8\xc7\x5b\x72\x0f\x6e\xaf\x07\x73\xf8\xa2\x8c\xe0\x9f\x48\xc5\x1d\x32\x35\x4d\x37\x2e\xef\xf2\x9b\xf2\xd6\xbb\x89\xc8\xc3\x5a\x72\xbb\x42\x47\x07\x73\xf7\xcb\x3f\x5b\x05\x0f\x3b\x98\x2f\x16\xef\x26\xb7\x79\xf6\xcc\x43\x78\xa8\x2c\xa4\x1c\xc3\x4c\x6e\xcd\x29\x9e\xdc\x66\x39\x34\x9b\x2c\x29\x1f\xeb\x29\x62\x6e\x96\xb9\x8b\xb8\xb9\x85\xa7\x88\xf2\xe2\x01\xa6\xa8\x30\xb9\xcd\x5c\xa8\x0b\xef\x3e\xee\x72\x79\xf6\xbe\xa0\xc7\xa7\xf6\xa4\xaa\xf4\xb7\xef\x52\x06\xe3\xec\xc2\xf0\x0b\x54\xd3\x78\x40\xe3\x01\xaf\xc9\x03\x8c\xbc\x1b\x93\x5e\xbe\x12\xfc\xd7\x14\xa9\x1d\xb9\x8c\x60\xd4\x13\x17\x1c\xde\x1b\x64\x72\x42\x42\x74\x8f\x98\x7e\x36\x87\x47\xe0\xfa\x24\x14\xa5\xbc\x13\xa6\x04\xb9\x24\x4e\xf4\x25\xc5\x3e\xad\xd6\x72\xf2\x39\xae\xf3\x41\x5e\xfb\xb3\x78\xf8\x90\xa6\x30\x92\x41\x5f\x75\x3a\xaf\xe6\xa0\xca\x1a\x4f\xc2\xf5\x83\xf0\x5a\x59\x65\x17\xe4\xf7\x64\x12\xc9\xcb\xf8\xdd\xbb\xa7\x73\x3c\x35\x9a\x3f\x6e\x10\x45\xbb\xdd\x14\x54\x2d\xfd\xcb\xa7\x98\xf7\x85\x3d\xbd\xdf\xd5\xb7\xa0\x62\xed\xe5\xae\xa7\xfc\xd3\x8c\xb6\xb5\x03\x52\xba\x99\x0b\x3e\xcc\x07\x29\x7d\x1c\x0f\xed\xca\x07\xaa\x74\xd4\x38\x43\xe3\x0c\xcf\xe3\x0c\x9b\x31\x92\x91\xeb\x51\x22\xa7\x02\x4f\x88\x0d\x56\xb1\x37\x90\x85\x5c\x05\x87\x11\xf7\xb9\x8f\x30\x18\x67\x7b\xb1\xeb\x97\xb8\x45\x89\x39\x6f\x54\xf6\x5c\x97\x6f\x14\xac\xdb\x69\x85\xa5\x7b\xa2\x2b\x76\x5a\x9f\x66\x83\x61\xf5\xd6\x68\xb3\xe9\x60\x4b\xbf\x63\x99\x92\xb5\xf7\xd5\xef\x25\x94\x3d\x69\x13\x2d\x4b\x47\x08\xd1\x08\x51\xd1\x94\x77\x18\xc5\x0c\xb9\xe2\x11\xa5\x48\x77\xe3\xd7\xfa\xe8\x3e\x71\x5b\x4a\xea\x36\xa0\x51\x08\x47\xd9\xa6\xf1\xe8\xba\x88\x74\xfd\xc8\xd6\xc3\x82\x06\x86\x4d\xb5\x94\x67\xa8\xaf\xd9\xa9\x5f\x2a\xa7\x06\x65\x74\xaa\x1d\x1e\x49\xfd\xf4\x28\x75\x5b\xdb\xcd\x61\x5e\xaf\x44\xf0\xdb\x3c\x36\x7a\x66\x00\x2b\x90\x7e\x83\x64\x0d\x92\x35\x48\xd6\x20\xd9\x23\x91\x2c\x8f\xc6\xbe\x4e\x42\x3f\x41\x30\xf6\x93\xe0\x06\x93\x6b\x21\xb7\x04\x43\x6d\x25\x9a\xdf\xfe\xa8\x5f\xec\xd6\x60\xa7\xea\xd7\x38\x8c\x90\x84\xc9\xc3\xa0\xaf\xae\x4d\x09\x87\xb2\xc1\x8d\xd2\x99\x5e\xd7\x03\x21\x99\xb6\x5b\xff\x4a\x75\x96\xef\xa4\xb0\xc5\x48\xa1\x92\x39\x52\xac\x90\x3a\xf5\x1f\x79\xee\x94\x94\xda\x16\x79\xfb\x83\x99\xc8\x6f\x1f\xcc\x8c\x27\xe1\x33\x51\x5e\xf4\x54\xa1\x2a\x4a\xa6\x13\x21\x78\x2a\xa7\x4e\xa5\x13\x5b\xc2\xbf\xa7\xc6\xab\x46\x1c\x06\x70\x1b\x82\x3c\x1d\x60\x10\xc8\x27\xff\x53\xa3\x81\x69\x1b\x82\x3d\x07\xba\xe0\xec\x0d\xf0\x37\xfc\xbd\x95\x03\xb8\xd2\x83\x4f\xd4\xdb\x49\x78\x04\x24\xd6\xcd\x8a\xb7\xa9\x01\xb3\x0c\x34\xf3\xf7\x0f\x06\xd3\xc2\x0b\x08\x25\x75\x16\xce\x25\xc8\x4e\x6a\xf0\xa4\x5d\xec\xf3\x16\xa4\x68\x2d\xd7\x51\x1e\x62\x29\x4a\x91\x99\x68\x96\x41\x14\x5f\xbf\x1c\x7d\xba\xec\x6d\x6a\xa8\x17\xbd\x4b\x41\x06\x96\x55\x4c\xf4\x9a\x1a\x89\x5e\xaa\xc0\x80\x19\x5f\x86\x6b\xf2\xbe\x9e\x29\xe9\x8b\xcf\xcb\x94\x14\x72\xf2\xde\xd4\x93\xba\x67\x7d\xae\xf0\xe6\xd0\x31\x0b\x16\x1b\x98\x6c\x60\xb2\x81\xc9\x06\x26\x77\x9c\xd1\xf0\xc4\x71\xa4\x58\x36\x4b\xcb\x67\x4f\x83\x9a\xf9\x23\x5d\xb3\x79\x3f\x8a\x54\x07\x98\x19\x55\xae\xc8\xcd\xdc\x1c\x32\x5f\xf1\xba\xbb\x81\xda\xe7\x87\x5a\x6e\x53\x0d\xdc\x36\xbb\x1d\xcd\x6e\xc7\x4b\xef\xdb\xbe\x71\x8a\x2a\x85\xf6\x0d\x57\x35\x5c\xd5\x70\x55\xc3\x55\x0d\x57\xfd\x50\x5c\xa5\x48\xea\x6a\x5e\x78\xd8\xf5\xb4\x69\xe2\xb2\x8d\x52\xbe\xac\xbe\x58\xc9\x98\xad\x3f\x3b\x6f\x0b\x7e\xc3\x09\x2b\xa5\x91\x9a\x6b\xae\x07\x66\xd5\x3e\xea\x25\xe6\x6d\xc8\x24\x8c\xc9\x2f\x89\x86\x5d\x0e\xfc\xc6\xbc\x08\x3f\x8d\x50\x92\x13\x49\x71\x9c\x1b\x12\x52\x95\x8f\x3e\xfe\x1c\x7c\x53\x9e\xfb\x67\xe0\x1e\xc5\x24\x8a\x82\x60\x2d\x01\x0d\x97\xa6\x41\x6f\x49\x4a\x72\x26\xf3\xbd\x24\x71\xc2\xce\x7e\x36\x33\x85\xf3\xdc\x16\xc5\x44\xe5\x34\x63\x95\x1d\xf1\x9b\xec\xcd\xf3\x6c\x7f\x15\xda\xfa\x01\xb6\xc0\x0a\x8b\x8b\x17\xc7\xd4\xd2\x22\xa1\x01\xd7\x06\x5c\x1b\x70\x6d\xc0\xf5\xed\x81\x6b\x39\x7f\x38\x8f\x8b\xa7\xf2\xb5\x14\xac\xde\x5d\x59\xf9\x82\x8b\x7c\x85\x85\xad\x8a\x81\x8f\xeb\xf1\x7a\x75\xb6\x7e\x36\x1b\xe5\x40\x76\xd3\x7c\xfc\xc7\x9e\xc1\xe3\x87\xa1\x36\xf3\x44\x79\x75\x1b\xe2\x19\xa2\x14\x8b\xd3\xbe\xd0\x3d\x66\x09\xff\x70\x8b\xe6\x4c\x18\x2b\x45\x0c\x91\x84\xb3\x0c\xb7\x3b\x79\x96\x3d\xd4\xf4\xa2\x06\xb6\xab\x27\x28\xf3\xa1\xe4\xc7\x27\x7b\xab\x0f\x55\x6f\x15\x0e\x08\x56\x07\x08\xf1\x4e\xe8\x43\x82\x1f\xc9\x19\x7c\x88\xc5\x03\xf2\x8d\xee\xa5\x69\x2d\x8f\xe4\x24\x52\x38\xb8\xf0\x81\x8c\xb2\x58\x44\x88\x94\x9a\xfd\x89\x48\xc6\x34\xfa\x15\x2c\x93\x25\x75\x6a\xd0\x7b\xf4\x06\x12\xef\xed\x1a\x92\x11\x79\x9e\x75\x2f\x91\xe4\x77\xb7\xe2\x98\x22\x68\x6b\x9e\x29\x12\x4c\x5a\xff\x73\x0d\x65\xab\x2c\x9f\xb2\x99\x9f\xb1\x59\xf0\x9e\xf2\xa1\x9e\xcb\xaa\x35\x2c\xf6\xea\xde\xd0\xdc\x25\xe9\xd4\x45\xfa\x0d\xfb\x34\xec\xd3\xb0\x4f\xc3\x3e\x0d\xfb\x34\xec\xb3\xea\x15\xcc\x23\x81\x48\x7c\x50\x2e\x6b\x2d\x39\xa3\xc9\x7c\x16\xcd\xb5\x3c\xc2\x94\x25\xe5\x47\xe2\x4a\x50\xdd\xa1\x1a\xac\xee\x54\x0d\x90\x96\xcd\x2a\x12\xc5\x19\xc6\x7f\xf8\xa2\xb9\x7d\xb8\xbc\xc1\x0c\x02\x9f\x28\xe8\x84\x71\x2c\xf0\xd0\x27\xf0\x91\x77\x5a\x12\xa0\x6c\xfb\xb5\x9f\xff\xa4\x46\x50\x03\x3a\x47\xbd\xd3\xde\x65\x6f\x9b\x17\xa2\x8d\x77\x90\x8a\x08\xf3\x3a\x9e\x8b\xbe\xa9\xfc\xc8\xe7\xdc\x1b\xfe\x21\xdc\x2d\x8b\x37\x1b\xbf\x6b\xfc\xee\x95\xfb\x5d\x85\xe9\xc4\x3b\xb8\xa5\x7c\x2f\xbf\x9c\xf0\xe5\x47\x11\xf7\x49\x71\x6c\x75\xd1\xe3\x44\xce\xd7\xa6\x5e\xb7\x24\x89\xcb\x33\x59\xeb\x67\x7b\x8d\xf7\x27\xf2\xc6\x26\x3b\xa8\xc9\x0e\x7a\x8e\x13\x08\x36\x3b\x60\xf5\xc9\xf1\xab\x14\x06\x34\x40\xd6\x00\x59\x03\x64\x0d\x90\x6d\x05\x64\x4f\x94\xc6\x28\x11\xa8\x94\x72\xa3\x2f\x6e\x94\x72\x33\xa2\xf1\x78\x8b\xf3\xfc\xc1\xf8\xad\xd2\xfa\x76\x9e\xfc\x48\xd0\x9d\xe0\xcd\x9a\xb4\x8b\x17\xc5\xa0\xfa\xf3\x3f\x77\xb7\xdb\xf7\x43\x9d\x08\x5a\xb3\xeb\xf0\x42\xee\x51\x0a\x13\x1a\x3f\x69\xfc\xe4\x15\xf9\x49\x79\x67\x5c\xed\x12\x14\x92\x8b\x70\xf0\xf0\xe4\xa2\xcc\xf5\x8e\xeb\x5d\xaf\xf0\x9c\x57\x9a\x2e\x5b\xf5\xab\xef\x4b\xaa\x3e\xcd\x81\x9f\xbb\x74\x9d\x47\x3e\xf4\x7a\xce\xd3\x3d\x77\xea\x3a\x35\x8d\xbe\x65\xff\xa9\xe7\x99\x27\x32\xf6\x3a\xea\x68\xac\xbe\xb1\xfa\x17\xb7\xfa\x6a\x4a\xaa\xf8\x31\x42\xb1\x03\xb3\xcb\x97\xb5\x78\x2b\x95\x17\x0b\xe4\xc5\x52\x18\x27\x7f\x1e\x91\x15\x7f\xe6\x40\x1a\xe9\xb0\x2d\x53\x31\xf4\xf3\x25\x3e\x73\x78\x24\xca\x19\x12\x86\xe0\x47\x14\xf9\xe1\x5c\xa6\xf0\xe8\x4d\x9f\xfa\xe6\x76\xff\x32\x81\xf5\x64\xb9\x46\xd6\x46\xa9\x46\x5e\x69\x80\xa5\xa0\xc7\xb6\x36\xcc\x14\xb2\xea\xd3\x78\xac\x55\x59\x3c\xbf\xa9\x7a\xdb\x65\xec\x0c\x36\xcf\xd8\xe9\xfd\xdf\xe1\xe9\xd7\xa3\xde\x91\xe7\xec\x05\x2f\x97\xb6\x53\x67\x48\x0f\xcc\xda\xd9\xc1\x6f\x79\x2a\xac\x1e\x6e\xf8\x73\x9e\xba\xf8\x59\x1f\x0e\xcf\xfa\xc7\xa7\x27\x87\x97\xe0\x9a\xab\x85\xac\xc4\xd1\x19\xa8\x24\xa3\x0d\x5f\x8e\x78\x35\xdb\x80\x8a\x21\x5e\xc5\x21\x48\xef\xdf\xcb\xcf\x75\x54\xf0\x34\x2f\x71\xbd\x3c\xd6\x1a\x79\x9d\x0d\xe8\x36\xa0\xdb\x80\x6e\x03\xba\x3f\x1c\xe8\x2e\x8f\xa4\x1f\xb9\xf1\x92\x01\xf8\x71\x3d\x80\x17\xd6\xa2\x0f\x43\xf0\x3c\x8f\xf6\x14\xb3\x64\x93\x90\x79\xc5\xe2\x15\x9a\xb4\x7c\x33\x2d\xff\x85\x7e\x55\xfe\x4d\xc1\x5c\xd9\xfe\x96\xa0\xdd\xda\xde\x74\xc1\xcd\xd9\x69\x59\xe1\x9c\xbe\x8a\x9d\x6a\x50\xf2\xc5\x42\xd3\x17\x47\xb6\xba\x00\xb5\x81\xb8\x06\xe2\x1a\x88\x6b\x20\xee\x11\x81\x20\x37\x54\x6e\xd4\x10\xc4\x64\x26\xd0\x2b\x9e\xd2\xcc\x3d\x30\x49\x62\x91\xa8\x96\xdc\x68\xe4\x12\xbb\xf8\x14\xcf\x10\x15\xb9\xeb\x53\x12\x22\xca\x12\x9f\x84\x12\xa6\xa4\x87\xe8\xfa\x63\x7f\xf2\x4d\xce\xbe\xf9\xae\x54\x1b\xe2\xd1\x88\x21\x8e\x0e\x1c\x7f\x82\x6c\x9d\xd7\x06\x6c\x7c\x9e\x15\xdf\xb0\x12\x8b\x64\xc2\xd5\xa6\x6a\xef\xc1\x47\xb9\x30\x0c\xe2\x48\xbc\x3f\x94\x2f\x0e\x75\xfb\x7c\x85\x18\xe4\x0b\xc4\xa0\x0d\x43\x67\xb8\x17\xc4\xd1\xde\xd0\x19\xb6\x6c\xcb\xc2\xf9\x4d\xee\x23\xef\x9c\x3d\x96\x50\xae\x0a\xef\x24\x89\x7d\x97\xb4\x78\x21\xe3\x68\xc2\x99\x68\x88\x5f\x24\x7b\x7b\x7c\x61\xa9\x73\xd9\x82\x36\xe0\x36\xcc\xec\xd4\xfe\xff\x00\x00\x00\xff\xff\x1e\x93\x09\x47\xd2\xa2\x00\x00")

func internalTemplatesPg_modelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPg_modelGotmpl,
		"internal/templates/pg_model.gotmpl",
	)
}

func internalTemplatesPg_modelGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPg_modelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pg_model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x41, 0x80, 0x54, 0x36, 0xe5, 0xac, 0x86, 0x8, 0x81, 0x8d, 0x26, 0xfa, 0x11, 0x31, 0x11, 0xea, 0x6b, 0x92, 0x2, 0xd7, 0x8c, 0x8d, 0x62, 0x76, 0x4d, 0x6c, 0xf6, 0x63, 0x80, 0x82, 0x9f}}
	return a, nil
}

var _internalTemplatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x5f\x8f\xdb\x36\x0c\x7f\xb6\x3e\x05\x67\xf4\xc1\x69\x03\x65\xcf\x05\x6e\x40\xaf\xc9\xba\x1b\xba\xcb\x2d\xcd\x30\x14\xc3\xb0\x2a\x32\x6d\x6b\x67\x4b\xae\x24\x5f\x2e\x08\xf2\xdd\x07\x4a\xb6\xf3\xa7\xbd\x62\x7d\xbc\x27\x5b\x14\xf9\x23\xf9\xa3\x28\xb1\x15\xf2\x5e\x94\x08\xfb\xfd\x0b\x7e\x17\xff\x0f\x07\xc6\x54\xd3\x1a\xeb\x21\x63\x49\x5a\x2a\x5f\x75\x1b\x2e\x4d\x33\xfb\x57\xc8\x7b\x39\x6b\xcb\xc7\x94\x4d\x18\x9b\xcd\xe0\xdd\xe2\x76\xb1\x7a\xb3\x5e\xcc\xe1\xfa\x23\xdc\x2d\xdf\x2d\x39\xcc\x97\x70\xbb\x5c\xc3\x62\x7e\xb3\xe6\x41\x67\x7e\x0d\xca\x81\xaf\x10\xa4\x69\x1a\xa3\x41\x69\x8f\xb6\x10\x12\xa1\x30\x16\x72\xe1\xc5\x46\x38\x04\xd3\xa2\x15\x5e\x19\x4d\xca\xc2\x83\x14\x1a\x36\x08\x9d\xc3\x1c\xb6\xca\x57\x84\xe5\x77\x2d\x3a\x28\xac\x69\xc0\xc9\x0a\x1b\x01\x9f\xf6\x7b\xe0\x1f\xc2\x3f\xbf\x15\x0d\xc2\xe1\xf0\x89\xc3\xad\xf1\x18\x51\x7c\xa5\x1c\x28\x47\xc6\xa2\x76\x06\xa4\x69\x15\xe6\x14\x83\x01\x14\xb2\x02\x53\x84\xd8\xbc\xd8\xd4\x08\x3d\x1b\x8e\xb3\xd9\x8c\x4c\xd6\x64\xed\x2a\xd3\xd5\x39\x6c\x8d\xbd\x0f\x81\x8c\x21\xcf\xdc\xe7\x9a\xcf\xaf\x41\xe8\xfc\x5c\xb6\x7e\xe4\x8c\x42\x0d\xb9\x8f\xd9\xee\x59\xb2\x78\x44\x99\x39\x6f\x95\x2e\xa7\xc0\x39\x1f\x37\xf7\x87\x09\x64\x6d\xf9\xc8\xdf\x9a\xa6\x11\x3a\x5f\x8b\x72\x0a\x68\xad\xb1\x13\x96\xfc\xde\xa1\xdd\x3d\x6d\xf6\x92\xec\x56\x66\xeb\x2e\x2c\x56\x66\xfb\xa4\xd1\x60\xc3\x0e\xa1\x46\xef\x4d\x09\x45\xa7\x25\xd1\xcf\x61\xf9\x80\xd6\xaa\x1c\x23\x79\x21\x65\xa2\xa8\x36\x65\x89\x96\x08\xdb\x99\xce\x82\xac\x8c\x92\xc8\x1e\x84\x0d\xe6\x57\x01\xe0\x49\x87\xfb\xe8\xe8\xad\xd1\xb9\xea\x8b\xdc\x59\xed\x40\x40\xad\x9c\x27\x50\x79\xdc\xa2\xea\x90\xb6\xfb\x5c\x83\xac\x45\xe7\xd0\x05\x92\x5b\x61\x45\xe3\x18\x39\x3a\x41\xca\xc8\xd2\x91\xc7\x51\x36\x81\x8c\x6c\x87\x60\xa2\x1d\xfc\xf5\xf7\x49\x48\x81\xac\x9e\x30\x2a\x0d\xe5\xb1\xad\xd0\x22\xe9\x45\xc3\x28\x2c\xad\xe9\xda\xcd\xee\x52\x6c\x6c\x8e\xf6\x4b\x71\xad\x1a\xe5\x2f\x85\xc4\xa0\xd2\x9e\xb1\x84\x4e\xfc\x3f\xd3\x90\x2b\xbc\xbe\x02\x2b\x74\x89\x10\xe3\xdf\xb3\x24\x89\xc9\xd2\x0e\xc9\xf8\xdb\xb0\xcc\x26\x2c\x49\x54\xd1\x33\xc1\x17\x14\x32\xfc\x70\x05\x5a\xd5\xc1\x28\xb1\x48\x5c\x12\x5b\x43\xaa\xd3\x33\x65\x96\x24\x07\x96\x24\x6e\xab\xbc\xac\x86\x9d\x35\x9d\xcf\xe0\x93\x9a\x2f\xfd\xf3\x97\xc5\x6a\x91\xbe\x26\x38\x8a\xd8\x62\x71\xc1\x17\xed\xf4\xd1\x07\x1f\x27\xe1\x47\xc0\xbb\x48\x72\x88\x28\x51\xbe\x7a\xf5\x2a\xfc\x05\xa4\x2b\x10\x6d\x8b\x3a\xcf\x68\x35\x85\xf4\x45\xfa\xca\x79\x2b\x8d\x7e\xe0\x37\xde\x88\x4c\xf9\x6a\x32\x09\xea\x7d\xa9\x46\x83\x21\x9f\xf0\x0d\x2a\x21\x92\xbe\x52\xa3\x5a\x5c\x4f\xa1\x68\x3c\xff\xd0\x5a\xa5\x7d\x91\xf5\x71\xfd\x6c\x6c\x23\xfc\x34\xa4\xc4\x39\x0f\x7e\x62\xce\xef\x56\xcb\x3f\xee\xe0\xfa\xe3\xf3\x49\x7b\x3c\x8b\xa3\xe2\x20\xf9\xce\xd4\x97\xab\xf9\x62\xf5\xac\x52\x1f\xfb\x6d\x54\x1c\x24\xdf\x99\xfa\xfb\x9b\xdf\x6e\xd6\xcf\x27\xef\xfe\x42\x19\xd5\xe2\xfa\x7f\xe7\x9c\x63\x21\xba\xda\xbf\x7e\xea\x9e\x20\x98\x70\x49\x14\x59\xda\xe9\x7b\x6d\xb6\xfa\x78\x13\x87\xf7\x36\x9d\xc4\xfb\xe3\xc0\x58\x32\x9b\x41\xdb\x79\xc0\x07\xb4\x3b\x5f\x29\x5d\x82\x37\x25\xfa\x0a\x6d\x7f\x29\x76\xfe\xe4\xea\x53\x05\xd4\xa8\xfb\xde\x9c\xc0\x4f\xf0\x63\xe0\x8c\x94\x8e\x45\xec\xfc\xb4\xbf\x7d\x20\x50\xa5\x74\xe9\xf8\xaf\x46\xe9\xb1\xa7\x53\x78\x73\x3b\x87\x94\xd2\x39\x8c\xa0\xc3\xb9\xff\x26\xec\xd0\xe0\x97\xc8\xc7\xa6\x49\xa7\x97\xc0\xc3\xa9\xfa\x26\xf0\xd0\x3e\x97\xc0\xc7\x23\xf9\x25\x70\x2c\xdc\x37\x61\xc3\xd1\xbc\xc4\x1c\x0a\x7e\x44\x64\x63\x25\xcf\x7c\x07\x08\x48\x27\xc7\xe2\x6a\x55\xb3\x8b\x77\xf7\x38\x8f\xc4\x09\xe5\x2b\x1b\x14\xdd\xf0\xf2\xc0\xcb\xf8\x37\xc0\xc4\xf7\xc9\x79\xdb\x49\xdf\x03\x9c\x8a\xc8\x34\x3c\x2c\x00\xc3\x21\x88\x87\x72\x5c\xde\x7d\xe5\x29\x66\x49\x7c\xd3\xe2\x6b\xdc\xbb\xba\xd1\x0e\x6d\x9c\xca\xfa\x49\x50\x05\xc9\x30\xbc\xd1\x44\x32\xbf\x1e\x87\x34\x45\xa3\x04\xb5\x19\x6a\x85\x9a\x66\xcb\x7e\x9c\x09\x43\xa6\x53\x4d\x5b\x23\x29\x47\x90\x93\x61\x33\x66\x71\xe2\xed\x8c\x87\x28\xcf\xf2\x0d\xcc\xaf\x27\x90\xad\xcc\x76\x1c\xb2\x62\x98\x2b\xb3\x3d\xb1\x10\x75\x6d\xb6\x8e\xe6\x23\xf0\x06\xda\xae\xae\xa9\x25\xc2\xe4\x5a\x21\xb8\x16\xa5\x2a\x94\x84\xc6\xe4\x58\xd3\x98\x03\x02\x4a\xd4\x68\x95\x84\xad\xd8\xc5\x50\xce\x11\xf7\x2c\x99\xa3\x34\x39\x66\x0f\x70\x36\x50\x0d\x5c\xfd\x17\x00\x00\xff\xff\xdd\xa3\x99\x6e\xc1\x0b\x00\x00")

func internalTemplatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPogoGotmpl,
		"internal/templates/pogo.gotmpl",
	)
}

func internalTemplatesPogoGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x7f, 0x5d, 0x30, 0x8f, 0x73, 0x7f, 0xc, 0x27, 0x4, 0x1b, 0xc3, 0xf7, 0x1b, 0xc8, 0x28, 0xdd, 0x6e, 0xdd, 0xe, 0x4a, 0x86, 0xef, 0xb0, 0x0, 0x34, 0x77, 0xdd, 0x13, 0xe1, 0x29, 0x61}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templates/pg_enum.gotmpl": internalTemplatesPg_enumGotmpl,

	"internal/templates/pg_model.gotmpl": internalTemplatesPg_modelGotmpl,

	"internal/templates/pogo.gotmpl": internalTemplatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"pg_enum.gotmpl":  &bintree{internalTemplatesPg_enumGotmpl, map[string]*bintree{}},
			"pg_model.gotmpl": &bintree{internalTemplatesPg_modelGotmpl, map[string]*bintree{}},
			"pogo.gotmpl":     &bintree{internalTemplatesPogoGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
