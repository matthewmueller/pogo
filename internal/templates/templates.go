// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/templates/pg_enum.gotmpl
// internal/templates/pg_model.gotmpl
// internal/templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatesPg_enumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x4d\x6b\xdb\x30\x18\xbe\xeb\x57\x3c\x84\x42\xed\x92\xc9\xf7\x41\x0f\x6b\x63\x4a\x61\xc4\x61\x09\x83\x31\xc6\x50\x9c\xd7\xa9\x99\xfd\xda\x93\xe4\x82\x11\xfa\xef\xc3\x1f\x0d\x09\x0e\xe4\xb0\xb6\x50\x9f\x84\xf4\xea\xf9\xb4\x6a\x95\xfe\x51\x7b\x82\x73\x57\x72\x35\xac\xbd\x17\x22\x8a\xf0\x10\x2f\xe3\x6f\x5f\x36\xf1\x02\x77\x3f\xb0\x4a\x1e\x12\x89\x45\x82\x65\xb2\x41\xbc\x78\xdc\x48\x21\x9c\x8b\x6e\x5e\xeb\x8b\xbc\xef\xf1\x90\x34\x1a\xc4\x4d\x09\xdb\xd6\x84\xc3\xfe\x6b\xf2\x74\xe6\x3a\xbb\x31\x37\xa5\x5c\x29\x93\xaa\xc2\x7b\xe4\x06\xf6\x89\x30\x3b\x9c\x2c\x55\x49\xde\xcf\x8e\xd4\x64\xba\x2a\x87\x81\x75\xfa\x44\xa5\x7a\x19\x91\xa2\x3f\x9e\x62\x1a\xab\x73\xde\x7f\xe0\xa4\xd2\x8a\x8d\x45\x20\x00\xe7\x3e\x41\x2b\xde\x13\xae\x9e\x55\x81\xcf\xb7\x18\xcd\x7e\x57\x45\x43\x06\xde\x0b\x00\x38\x17\xad\x73\xdd\x95\x49\xd2\xd7\xe3\xfe\x57\xb5\xa5\xc2\xfb\xeb\xe9\x45\xd9\x43\x5e\xc4\xbb\x9d\x8e\x04\xb3\x53\xf0\x59\x38\x5a\x20\xde\x75\x52\xc3\x37\xea\x64\xad\x6c\x6e\xb2\xb6\xf7\x67\xfe\x16\xd1\x4e\xe7\xcf\xa4\x87\x8c\x34\x72\xb6\xa4\x33\x95\xbe\xe1\x7f\xdd\x33\xc1\xf4\x32\x72\x32\x17\x85\x64\x95\x3e\x97\x7b\xd6\x70\x8a\xe0\x70\x70\xaf\xca\x2e\xc5\xe9\x64\x38\x10\x06\x21\x82\x63\x86\x39\x48\xeb\x4a\x87\x70\x02\xd0\x64\x1b\xcd\xe3\x5b\x98\x60\x86\x73\x70\x5e\x08\xff\x0e\x85\xd4\xfb\xee\xa5\x18\x19\x73\x5a\xed\xe8\x2e\x67\xa5\xdb\xf7\xe8\xe4\x84\x6f\x7d\x52\xcd\x05\x49\xff\xdd\xce\x31\x6e\xf0\x1b\x37\x03\x9f\xbc\xaf\x98\x1f\x39\xab\xe6\xd8\xe2\xe7\xaf\x6d\x6b\x29\x44\x30\x2c\xce\x55\xa7\xea\x9a\x78\x17\x6c\xe7\xe3\xf0\xb4\x44\x29\xe5\x4b\x91\xff\x02\x00\x00\xff\xff\x85\x5b\x56\x26\x51\x06\x00\x00")

func internalTemplatesPg_enumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPg_enumGotmpl,
		"internal/templates/pg_enum.gotmpl",
	)
}

func internalTemplatesPg_enumGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPg_enumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pg_enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0xb4, 0x96, 0x4b, 0x30, 0x3, 0xa5, 0x58, 0x43, 0x75, 0x4f, 0xfa, 0x28, 0x79, 0x41, 0x8d, 0x8e, 0x94, 0x41, 0x3f, 0x7a, 0xb, 0xfe, 0x66, 0x58, 0x77, 0x2d, 0xa, 0xf2, 0xff, 0xdf, 0x43}}
	return a, nil
}

var _internalTemplatesPg_modelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x73\xdb\x38\x92\xfe\x2c\xfe\x8a\x5e\x56\x36\x43\xc5\x1a\x6a\x72\x1f\x7d\xa7\xab\x8a\x6d\x79\xce\xbb\x8e\x94\xf5\xcb\xce\x4d\xa5\x52\x12\x4d\x42\x36\xc7\x14\xa0\x01\x28\xd9\x2a\x15\xff\xfb\x16\xde\x48\xf0\x4d\x92\x6d\xd9\xb1\x27\xcc\x97\xc8\x24\xd0\x00\x1a\xdd\xcf\xd3\x00\x9b\xe0\xcc\xf3\x6f\xbd\x6b\x04\xab\xd5\x3b\xf7\x8b\xfc\x9d\x24\x96\x15\x4e\x67\x84\xc6\xe0\x58\x00\xb6\x4f\x70\x8c\xee\x63\x9b\xff\x46\xd8\x27\x41\x88\xaf\xbb\x7f\x30\x82\x6d\xab\x65\x23\x4a\x09\x65\xfc\x17\x8b\x69\x88\xaf\xc5\xcf\x38\x9c\x22\xdb\xb2\x5a\xf6\x75\x18\xdf\xcc\xaf\x5c\x9f\x4c\xbb\x7f\x78\xfe\xad\xdf\x9d\x5d\xdf\xdb\x56\xdb\xb2\xba\x5d\xf8\xb5\x3f\xe8\x9f\x7d\xba\xe8\x1f\xc1\xc1\xef\xf0\x65\xf8\xeb\xd0\x85\xa3\x21\x0c\x86\x17\xd0\x3f\x3a\xb9\x70\x45\x99\x3e\xa5\xbc\x63\x17\xde\x55\x84\xdc\x2f\x1e\xf3\xbd\x28\x49\x06\x24\x3e\x26\x73\x1c\x00\x45\xf1\x9c\x62\x14\x40\x38\x81\xf8\x46\x8e\x41\x16\x3d\xff\xd7\xe9\xc0\x9b\xa2\x24\x81\x90\x01\x26\x31\x4c\x78\x05\x6b\xe1\xd1\x0d\x22\x7b\x20\x07\xe4\x0e\xd0\x9d\x63\x67\x05\x0f\xbd\x29\x8a\x92\x24\x93\x65\xcb\x41\x94\x45\x01\x45\x6c\x1e\xc5\x10\x78\xb1\x07\x13\x42\xab\x7a\x65\xc5\xcb\x19\xaa\xaa\xcb\x62\x3a\xf7\x63\x58\x59\x00\xab\xd5\xcf\x40\x3d\x7c\x8d\xe0\x9d\x4f\x22\xd8\xef\x41\xda\x17\x12\xcd\xa7\x98\x41\x92\x88\x62\xfc\x76\x26\x61\xb5\x0a\x27\xa2\x86\x3b\x98\x47\x11\x2f\x9f\x24\x1f\x54\xa1\x8b\xe5\x0c\x25\xc9\x6a\x05\x28\x62\x08\xf8\xaf\xc2\x65\x1c\x40\x92\xc0\x98\xcf\xed\xbe\xad\xee\x9e\x63\xef\x16\x25\x49\x87\x4c\xc3\x18\x4d\x67\xf1\xd2\x1e\xab\xde\xc9\xe2\x56\x62\x09\xbd\x8e\x60\x46\xae\x89\x7b\x46\xee\xa0\x07\xce\x87\xf2\xe0\xda\x0e\x0e\x23\xa9\xb5\x23\xe4\x93\x00\x41\x38\x9d\x45\x68\x8a\x70\xcc\xd2\xba\xd6\x64\x8e\x7d\x70\x0c\x9d\xdd\x10\x1a\x27\x09\x54\x09\x54\x72\x9c\xf2\x34\x85\x38\x46\x74\xe2\xf9\x68\x95\xb4\xe5\x8c\x0a\x9d\x8e\x4a\x25\x3b\x40\x6e\xb9\x6e\x4b\x37\xdc\xca\x21\x58\xc0\x6d\xed\x6f\xe4\x56\x88\x03\x65\x81\x30\x99\xc6\x6e\x9f\xb7\x32\x71\xc6\xe5\xce\x04\xa2\x97\xfb\x60\xff\xfd\xc2\xd6\xf6\xe8\x81\x5d\x21\xdf\x1e\x77\xca\x3d\xe1\x8d\xf2\x99\xfe\x50\xee\x3d\xf4\x4c\xbd\x28\x55\x59\x69\xb7\x70\x18\xf1\xd9\xe9\x76\x61\x80\xee\xaa\xbd\x03\xcf\xe6\xb1\xd4\x39\x37\xf8\x36\x7c\x38\xe1\x57\xc4\xe8\x94\x90\xf7\xe2\xca\x2a\x51\x92\xe4\xfd\xcd\xc6\x2d\xcb\x3d\xc6\x9e\xa5\xf5\x8a\x11\x82\x9c\x78\x48\xcd\x54\x97\xf9\x19\x8a\x56\x2e\xef\x00\x60\xf5\xb7\xae\x25\x55\x2b\x04\xd5\x48\x52\x66\xbc\xc6\xa6\x4f\x30\x43\x34\x16\xad\x70\xd3\x16\x43\xd3\xd6\xbc\x5a\x6d\x1e\x95\xc4\x89\x9c\x9b\x32\x14\x33\x8d\x59\x62\x18\x52\x75\xb5\xd6\x2f\xdb\x2c\x8a\x71\xd4\xdf\xda\x1c\x72\x0e\x9d\x9b\xcc\x92\x48\xb7\x50\xb5\x07\xef\xf3\x57\x32\x0b\x28\x5b\x58\xc2\xc7\x5d\x3d\x07\xdc\xd8\x6a\xa7\xe0\x2e\x8c\x22\x3e\x74\x35\x72\x48\x87\xce\x6f\xc6\x04\x06\x97\xa7\xa7\x5c\xea\x38\xdf\x95\xb1\xf0\x9a\x79\x14\x6d\xd4\x4f\x6d\xd3\x45\x4d\x15\x6d\x61\x83\xb2\xea\xad\xea\x81\x7a\x33\x6c\xcc\xf8\xc9\xb5\xf6\xd9\xa3\xec\xc6\x8b\xfe\x71\x3e\x1c\xc0\x54\xfe\x96\x16\x52\x66\x21\x9b\xe3\x1b\x01\x5e\x74\xa3\x46\x0c\xb1\x4e\x1b\x9c\xaf\xdf\xae\x96\x31\xea\x48\x4c\x6c\x9b\x7e\xce\x41\xdf\x55\xa5\xcb\xf2\xda\xca\xfd\x2f\xf1\xd4\xe8\xe7\x1c\xa7\x3d\xe5\xd5\xf9\x14\x7a\x55\xfd\xdd\xd8\xcb\x9c\x58\x47\xa0\x8b\xec\xa9\x89\xde\x66\x47\xd3\x0a\xa2\x70\xa7\xac\x6b\xdd\xe1\x73\x11\x95\x00\x91\x11\x82\xc4\xbb\x6e\x17\x2e\x86\x47\xc3\x7d\x98\x7a\xb7\x08\xe2\x9b\x90\xc1\x94\x50\x04\x73\x86\x26\xf3\xcd\x46\x26\x45\x3a\x6d\x90\x11\x8f\xd9\xb7\x71\x05\x1e\x8e\x79\x4f\x36\xc9\xf4\x25\x5a\x38\x6d\x98\x7a\xb3\xaf\x52\xf0\x37\x83\xc5\x44\x23\xaa\x10\x47\x19\xde\x73\xa7\xba\x68\xdb\x92\x30\xba\x05\xd8\xae\x87\x52\xc1\x75\x0f\xf1\x85\xbf\xf5\x38\xe5\x28\x6a\xe4\xff\x54\x87\xbf\xda\x39\x94\xb3\xbf\x55\xf2\x56\xbd\x60\x25\x2f\xeb\x71\x0a\xd9\x35\x5d\x2c\x38\x7b\xa1\x5f\x0f\xeb\x55\xc9\xbb\x65\x47\xd2\x70\xc9\xca\x66\x5f\x09\x4e\x99\x92\xb3\x46\x29\xc8\xc9\xc8\x64\xa3\x51\xc8\xa2\x4e\x70\x25\x6b\x1e\x1d\xb4\xc1\xd1\x81\x52\x95\x0b\xa7\xe5\xd7\xf8\xc3\x00\xdd\x1d\x87\x51\x8c\x28\xf8\x14\x79\x31\x62\xe0\x01\x46\x77\x30\x11\x17\xd3\x50\x40\x96\xe1\x01\x81\x2a\x6d\x46\x04\xf2\x52\x1a\x12\xa8\x12\x52\x02\x5b\x1f\x16\xa8\xb2\x69\x5c\xd0\x9a\x10\x3a\xf5\x62\x06\x5f\xbf\x49\x4b\xb6\x5a\x0b\x2f\x9a\x23\x06\xf0\xd5\x34\x6a\x0b\x14\x10\xa8\xff\x0b\x0c\x7d\x48\x70\x10\xc6\x21\xc1\x82\xa0\x65\x23\x46\xbc\x79\x18\x79\x73\x86\x60\x82\x95\xca\x27\x7a\x58\x6d\x75\x8b\x0f\x54\x0a\x92\x25\x57\x56\x4b\x0f\xd6\xb8\xbc\xb2\x5a\x2d\xce\x17\xfb\x00\x60\xff\xf6\x7f\xfd\xb3\xbe\xdd\xb1\x5a\xad\x63\x31\x84\x7d\x05\x07\xcc\xfd\x07\x09\xb1\x33\x71\xd5\xc8\x3a\x60\xc3\xa7\xc1\x11\xd8\x6d\x5e\xf6\x8b\x47\xbd\x29\xdb\x87\x89\x2b\x87\xd9\x11\x06\x25\x62\xc7\x7d\x80\x89\x2b\x06\xd7\xb1\x5a\x5a\xb7\x9f\x70\xa0\xa7\xa6\xdb\x85\x52\xef\x3f\xe1\xc0\xd1\x7a\x77\x5d\x37\xbd\x9e\xcd\x5a\xb7\x0b\x00\x5c\x53\xbe\x18\x82\xa1\x68\x71\x87\x4f\xd6\xa8\xa3\x9a\xe0\x38\x21\x51\x43\xcb\x54\xf5\x01\x46\xd0\x33\xfa\xc1\xff\x75\xbb\xa9\xc8\x1e\x78\xb3\x19\xc2\x81\xa3\x2e\x74\x94\x2a\x54\xd7\xb2\xd9\x71\xda\xed\xb6\xac\x9f\xa8\xe6\xdd\x92\x8c\xf4\x52\x27\xaf\xd0\xf4\xaa\x56\xa7\x92\xa4\x43\x70\xfe\x97\xd4\xd9\x90\xae\x53\xd9\x90\xfe\x80\x1a\x1b\x9e\xd5\x2a\x2c\x63\x8a\x6c\x48\xda\x79\x8f\xd5\xa0\x44\xb4\x92\x15\x43\x51\x20\x4a\xa9\xce\x1e\xf3\x0b\x59\xa0\xab\x4a\x18\xbc\x90\x5d\x3b\x42\xcc\xa7\xe1\x4c\x78\x6a\x1a\xee\x1a\x93\x53\x51\xdb\x59\x18\x57\xb3\x68\xcd\x80\x25\xcd\x61\xb2\xc8\xf9\x8c\x22\x4f\xd1\x03\x9f\x45\x6a\x4c\xa0\xa0\x8b\x08\x61\x67\xd1\x86\x5e\x0f\x7e\x51\x94\x90\xfa\xaa\xa9\xd3\xd4\x7d\xc7\x13\x2f\x62\x68\xdc\xce\x2d\xf8\xc4\x9a\x8c\x83\x97\xd2\xca\x82\x43\x46\x8b\x1a\x12\x28\x57\xfc\xdf\x99\xdd\xe6\xce\xbc\xa9\x0d\xbe\x80\x3c\x9f\xd1\x10\xc7\x62\x05\xa9\xc7\x22\x91\x05\x92\x64\x5c\x98\x5a\x2e\xdc\x28\x97\x8e\x79\xcc\xcd\x25\xb5\xd1\x30\x33\xcf\x45\x3a\x54\x05\xaf\x46\x2f\x14\x12\x19\x6a\x3e\x24\x88\xfa\x08\xec\xd0\x86\x6c\xfd\x29\x88\x57\x6e\x1c\x94\x94\x9e\x0f\x1d\xc2\x09\x2c\xb8\x7e\x33\xd2\xdd\xa0\xe1\xac\x65\x2e\x28\x1b\x75\x85\xce\x0b\x01\xc0\xd6\x82\x4d\xa1\xad\x87\x69\x61\xa1\xb5\x60\xb4\xdc\x4a\x3b\xb5\x2e\xa6\x1f\xd2\x00\xd1\x83\x25\xb0\x19\xf2\xc3\x49\xe8\x87\x48\x86\xf4\xc3\xb3\xa3\xfe\xd9\xc1\x12\x0e\x7e\x87\xff\x21\xbc\xcc\xff\x4a\x76\x4c\xcb\x4b\x73\xb5\x7c\x82\x59\x0c\x8e\xd5\xe2\x4c\x70\x7e\x08\x8c\xd0\x98\xc1\xd5\x12\x3c\xe6\x23\x1c\x88\xc0\x96\x57\xb1\x5a\xfc\xae\xae\xdd\x03\xfb\xd3\xf9\xa1\x6d\x89\x6a\x47\x7d\xb3\x5e\x80\x8a\x15\xc5\x7d\xa3\x26\xff\x5b\xef\xd0\x0d\xd0\x9d\xb8\x93\x12\xa7\xbe\xc0\xe9\x52\xde\x31\x88\x52\x5c\x58\x15\xd7\xce\x79\x66\x16\x65\x0c\x62\x96\x42\x44\x57\xa4\x66\xae\xc3\x05\xc2\x20\xf4\xcf\x0c\x9d\xac\x0b\x18\x92\x4a\x8a\x27\xaa\x87\x4f\x60\x78\x31\x4b\x70\xf0\x7b\x3d\xc9\x13\x83\xe4\x3b\x92\xe1\xd5\xe2\xb8\x0c\x96\x0a\x52\x87\x72\xac\xf5\x60\x29\xe7\xca\xf0\x08\xb5\x3c\xe6\xb3\x8e\x01\xdd\xcf\x28\x62\x2c\x24\xe5\x71\x56\x61\xa7\xd0\xac\x9e\x5e\x73\xd2\x48\xd9\x6f\xc8\x83\xe0\x48\x48\x6e\xb7\x53\x2d\x92\xbc\x23\x58\xab\x55\xf7\x03\x7c\x26\x01\x8a\xf4\xdc\x7d\xe8\xca\x41\xcb\x8b\x21\x13\xc3\x99\xce\xe2\xa5\x2e\x10\xdf\x78\x31\xdc\x78\x0c\xbc\x28\x12\xc6\x30\x45\xf1\x0d\x09\x98\x2b\xa2\xe9\xf8\x27\x06\x33\x1a\x4e\x3d\x1a\x2d\xf9\x4a\x2d\x10\x28\x87\xa6\x57\x28\x10\xf6\x6c\x54\xe0\xe5\xc5\x0a\xf9\x26\xbc\xbe\x41\xf4\xe7\x08\x2d\x50\x04\x53\xde\x2e\x73\xa5\x55\xe5\x7a\xb6\x02\xdd\xe1\xe3\x39\xf6\xb9\xb1\xee\xeb\xe8\x5d\x77\x5a\xfd\x99\x5b\xdd\xa6\xa1\xad\x5a\x8f\xd7\x6c\x41\xcb\x89\x2a\xc5\xf2\x15\x3b\x7d\x69\xe0\x5f\xb5\xf7\x98\x0b\xf8\xbb\x5d\xb8\x46\x71\xaa\x28\x4c\xf0\xcf\x1c\x6c\xf5\x02\xd1\xc3\x01\xcc\x28\x9a\x79\x94\x2f\x6f\xd1\x54\xa8\x8a\x17\xfc\x73\x8e\xe8\xd2\x02\x18\xf9\x1d\x18\x85\x1d\x18\x2d\xb8\x6d\xb2\x28\xf4\x2b\x76\x51\xdd\x74\x51\xda\x81\x5f\xc4\xaa\xb2\xdb\x05\xf6\x67\x04\xa1\x54\x86\x10\xd6\x51\x93\xb2\x84\x5b\xb4\x84\x19\x25\x8b\x30\x40\x01\xb7\x56\x86\xfe\x9c\x23\xec\x23\x0b\x78\x25\x16\x8b\xc8\x62\x2c\x10\xfd\x64\x70\xde\x3f\xbb\x80\x93\xc1\xc5\xb0\x72\x5b\xd2\x19\xc3\x5e\xde\xd3\x78\x87\x85\x8b\xc1\x1e\x28\x5a\xf8\xf7\xa7\xd3\xcb\xfe\x79\x55\xd9\xb0\x54\xf6\xac\x7f\x71\x79\x36\x38\x19\xfc\x6a\x34\x77\x26\x0c\x37\xc4\xd7\x82\x48\xc6\x6a\x7c\x11\xb9\x96\x03\xe3\x2c\x76\x87\x7e\x5a\xa0\x6c\x50\x1e\xbf\x7b\x8d\xa8\xa4\x38\x31\x8f\xa7\xe4\x3a\xbf\xbc\xd4\x57\x1d\x39\x66\xae\x62\xd7\x75\x25\x87\xaa\x88\xa4\x62\x1f\xb7\x3c\xdd\x7c\xb9\x45\xee\xb8\xca\x82\x2b\xf7\x5f\xbc\x43\x67\xe4\xae\x2c\x34\x9c\x00\x12\x2c\x4f\xee\xdc\x73\xdf\xc3\xe6\x6a\xd2\xf7\x70\x92\xb4\xff\x1b\x50\xbe\x87\xd9\xe6\x70\x07\x90\xee\x97\xc6\xc2\xaa\x1d\x72\xb5\x8d\x9c\x79\xf4\xee\xbd\xc3\xf9\x20\x04\x57\x2c\x79\x1b\x37\x69\xdc\xe4\xed\xb9\x49\x91\x47\x3e\x7b\x78\x59\xf0\x16\x71\xe9\x69\x6c\xc2\x45\xd4\xb8\xca\x97\x68\x4e\xbd\x48\xeb\x8d\x2f\x74\xb5\xcf\x7c\xfd\xb6\xde\x6b\x5a\xa3\x3a\x29\xfb\x3d\xa8\xac\xbc\x52\x2b\xa1\x51\x95\xaf\xa6\x2b\x90\x3a\xa9\x3c\xe4\xaa\x52\x27\xa2\xc2\x13\x2a\xf7\xb4\xd2\x27\x63\xad\x16\x9f\x59\x4a\xb3\xa9\x6b\xb5\x74\x44\x52\x37\x0e\x21\xda\x6a\xb5\x92\x7c\xc3\xf9\x5e\xa5\x51\x51\xbd\x94\x72\xa7\xc5\x52\x6f\x73\xf3\xb5\x78\xba\x6b\x2b\x29\xa0\x6a\x63\x2e\x6f\xde\x5c\x32\x5c\x39\x0e\x31\x47\x5a\x0e\x7e\x7c\x65\x20\x9e\xaa\x91\x09\xf8\x7a\xb9\xc5\x52\x43\x52\x25\xc7\xe5\x99\x18\x0b\xfe\x21\x53\x64\x54\x73\xa5\xe9\xf0\x4a\x39\x5b\xe1\x25\xc4\x8e\x59\x7e\x55\xb7\x05\x09\x8f\x18\x07\xe2\x74\x86\xf2\xf5\x99\x23\x04\x0b\x98\xae\x98\x9c\x1c\x08\xf3\x69\x48\x0c\x7e\x65\x28\x42\xfe\x23\xf9\xf5\xbc\x7f\xda\x3f\xbc\x80\xd5\x4a\x7b\x8e\x90\x95\x24\x30\x86\x3d\x01\xff\xe3\xe3\xb3\xe1\xe7\x4a\xd6\xd5\x25\x46\xec\x87\xe1\x42\x51\xa5\xd7\x83\xd9\xf5\xbd\xdb\xa7\x74\x40\xce\xc8\x1d\x4b\x9f\xa7\x98\x93\xb4\x36\xbb\xc6\xca\x9e\xe2\xec\x22\x08\x7d\x66\x17\x48\xd1\xb3\xf1\x85\xc6\x17\x5e\xad\x2f\x70\xe3\x3c\x58\xc2\x17\x35\xe3\xff\x44\x2a\x82\x58\xad\x78\x4f\x75\xe3\xf2\x2e\xbf\x29\x6f\xbd\x9b\x89\xac\xa7\x9a\xdb\x25\xa2\x39\x58\x3a\x5f\xfe\xd9\xce\xb9\xd3\xc1\x72\xb5\x7a\x37\xbb\xcd\x32\x5a\x1e\xc3\x30\x45\x21\xc5\xe8\x64\x76\x6b\x4e\xf1\xec\x36\xcd\x6c\xd9\x66\xe5\xf7\x54\xb7\x10\x73\x53\xe7\x1b\xe2\x66\x9d\x5b\x88\x9b\xe2\xf9\xa0\x08\xdd\x66\xb7\xfa\x11\x33\xf4\xe0\xdd\xc7\xe7\x5c\x45\xbd\xcf\x29\x6d\xd7\x6e\x53\x96\xfe\xf6\xfd\xc7\xe0\x92\xe7\xb0\xf2\x1c\x89\x34\xe6\xde\x98\xfb\x77\x33\x77\x23\x61\xc5\x24\x8e\x4b\x1c\xfe\x39\x47\x6a\x4b\x2c\xa5\x0e\xf5\xf4\x22\x0c\xee\x0d\x9a\x38\xc1\x01\xba\x47\x4c\x3f\xe7\x0a\x27\xe0\x78\x38\x10\xa5\xdc\x13\xa6\x04\x39\x98\xc4\xfa\x92\xe2\x95\x76\xbb\x9e\x56\x8e\xab\x1c\x8e\xd7\xfe\x2c\xb6\xf2\x93\x04\x26\x32\x76\x2b\x4f\xe7\xd5\x12\x54\x59\xe3\xa9\xb2\x5e\xfa\x56\xca\x2a\xfa\x1b\xbf\x27\x13\x32\xbe\x8f\x93\xbd\x7b\xa4\x97\xa9\xae\xff\x76\x83\x28\x7a\xde\x5d\x39\xd5\xd2\xbf\x3d\x1a\xf2\xde\xb0\xdd\x3b\x59\x75\x0b\x2a\x3e\xae\xf7\x33\xe5\x8c\x66\x84\xac\xbd\x8d\xd2\xed\xfc\xed\x71\x0e\x47\xe9\xd3\x18\xe6\xb9\x0c\xbe\x4c\x34\x8d\xe5\x37\x96\xff\x0c\x96\xbf\x1d\xd7\x18\x19\x11\x05\xda\xc9\x31\x80\xd8\xde\x14\x8b\xf7\x34\x72\xca\x79\x87\xb8\xcf\x1d\x82\xc1\x94\xff\xac\x5a\x83\xe6\xab\x67\xf0\x5f\xda\xee\xac\x5f\xb6\x6f\xda\xe4\x84\xda\xed\xc8\x35\x9b\x9c\xbb\x59\xee\xaf\xdf\x95\xfc\x01\xb7\x00\x28\xb9\x63\xa9\x46\xb5\x5f\x55\xaf\xec\x8b\x3e\xb2\x8d\x4a\xa5\x89\x07\x68\x82\xa8\x68\xca\x3d\x8c\x08\x43\x8e\x78\xae\x27\xd2\xbd\xf8\xb5\x01\xba\x8f\x9d\xb6\x92\xfa\x10\x38\xc8\x85\x90\x6c\xdb\x18\x72\x53\x14\xb9\x79\x64\x9b\x1d\x5e\xbb\xfc\xb6\x5a\xca\xd2\xb1\x37\xec\x88\xd7\xca\xa9\xc0\x0f\x9d\x6a\x16\x4e\xa4\x7e\xfa\x94\x3a\xed\x87\xcd\x61\x56\xaf\xc0\xd3\x0f\x79\x1c\xf3\x9c\xd0\x94\x23\xea\x06\xa3\x1a\x8c\x6a\x30\xaa\xc1\xa8\x87\x60\x54\x16\x41\x5d\xce\x02\x2f\x46\x30\xf5\x62\xff\x26\xc4\xd7\x42\x6e\x01\x73\x3a\x4a\x34\xbf\xfd\x51\xbf\x9a\xac\x61\x4c\xd5\xaf\x7e\xbc\x2c\x84\x85\x78\x0b\x5c\xab\x6a\x43\x62\x9d\x6c\x60\xab\x6c\x9e\xd7\xf5\x54\x45\x26\xa0\x56\xbf\x18\x9c\xa6\xfb\x28\x2c\x31\x32\x88\x64\x8a\x10\xcb\x65\x0e\xfd\x57\x96\x3a\x24\xa5\x76\x44\x06\xfa\x68\x21\x32\xb5\x47\x0b\xe3\xd9\xf1\x42\x94\x17\x3d\x55\x90\x89\xe2\xf9\x4c\x08\x9e\xcb\xa9\x52\x89\xb1\x2d\xe1\xcf\x73\xe3\xa5\x19\xee\xf6\x61\x07\xfc\xec\x01\xfa\xc8\x97\xcf\xca\xe7\x46\x03\xf3\x0e\xf8\x7b\x36\xf4\xc0\xde\x1b\x85\x5f\xc3\x6f\xed\x0c\x9d\x95\x1e\x3c\xac\xde\xb3\x09\x27\x80\x89\x6e\x56\xbc\x36\x07\x21\x4b\x41\x32\xcb\xa4\x1f\xcd\x73\xa9\xf4\x05\x75\xe6\xde\xa4\x4f\x8f\x17\x70\xa5\x5d\xec\xf3\x16\xa4\x68\x2d\xd7\x56\x1e\xd1\x52\x7c\x21\x13\xb1\x5a\x06\x0b\x5c\x7e\x39\xfa\x74\xd1\xaf\xb4\xca\xf3\xfe\x85\x40\xfa\x56\x2b\x9f\xe7\x34\x37\xf2\x9c\x54\x81\x11\x33\xfe\x18\x6f\x48\x7b\x7a\xa1\x9c\x27\x3e\x09\x73\x9c\xcb\x3f\x7b\x53\x8f\xbb\x5e\x74\xbf\xfe\xd5\x43\x5f\x1a\xe6\x35\x18\xd8\x60\x60\x83\x81\x0d\x06\xee\xf2\x99\xff\x8e\x23\x40\xb1\x94\x95\x66\xce\x1e\x07\x89\xd9\x73\x4f\xb3\x39\x2f\x8a\x54\x83\xcc\x8c\x07\xd7\xe4\x21\x6e\x8f\x87\xaf\x78\x39\xdc\xe0\xe8\xcb\xe3\x28\xb7\xa9\x06\x4b\x9b\x4d\x88\x66\x13\xe2\x45\x37\x4a\xdf\x18\xff\x14\x82\xf2\x86\x88\x1a\x22\x6a\x88\xa8\x21\xa2\x86\x88\xde\x2e\x11\x29\x06\xba\x5a\xe6\x9e\x26\xed\x36\x05\x5a\xb6\x51\x48\x0f\xd5\x17\x4b\x09\xa2\xd5\xe7\xb5\xd5\x31\x57\x18\xb3\x42\xd6\xa4\xb9\x54\x7a\x64\xc6\xe8\x93\x5e\x9a\x7d\x08\x4d\x04\x04\xff\x14\x6b\x40\xe5\x90\x6e\x4c\x82\x70\xca\x08\xc5\x19\x45\xe4\xc7\xb9\x25\xd5\x94\x99\xe6\xe3\x8f\xc1\x24\xc5\xb9\xdf\x35\xab\x28\x8e\x50\xe4\x02\x1b\xa9\x65\x5c\x9b\xe2\xfb\x40\xba\x91\xd3\x96\xed\xef\x88\x93\x58\xf6\xd3\x69\xc8\x9d\xfb\xb5\xca\x27\xe1\x26\x29\x5f\x3c\x13\x73\xc9\xde\xbc\xcc\x96\x54\xae\xad\xbf\xc0\xb6\x54\x6e\x4d\xf0\xb2\x68\x59\x08\xec\x1b\xd8\x6c\x60\xb3\x81\xcd\x06\x36\x5f\x39\x6c\x16\x73\x63\xb3\x58\x76\x2e\x5f\xa6\x08\xd5\x1b\x17\x6b\x5f\xcb\x90\x2f\x5e\xb0\x75\x71\xeb\x71\x35\x12\xaf\x4f\x3b\x4f\x67\xa3\x18\x8f\x6e\x9b\x58\xfe\xd4\xa3\x5b\xbc\x20\xd0\x66\x1e\x2b\x17\xee\x00\x59\x20\x4a\x43\x71\xe2\x13\xba\x0f\x59\xcc\x7f\xdc\xa2\x25\x13\xc6\x4a\x11\x43\x38\xe6\xfc\x91\x1d\xf6\x0b\x15\xbd\xa8\xc0\xe8\xf2\x81\xb9\x7c\x28\xd9\x69\xb9\xee\xfa\xa3\xb7\xdb\xb9\xf3\x60\xd5\xb9\x33\xbc\x13\xfa\x4c\xd8\x27\x12\x04\x1f\x62\xf5\x21\xea\x46\x37\x93\xa4\x9a\x3c\x8c\x43\x6e\x0b\xc7\xd8\x3d\x92\x4a\x56\xab\x08\xe1\x42\xd3\x3f\x10\xbb\x98\x0e\xb0\x86\x5e\xd2\xac\x47\x0d\x80\x0f\xdb\xed\xe1\x5d\xdb\xc0\x2e\x22\xeb\xb1\xea\xcd\x88\xec\xee\x83\xc8\x25\x8f\xd6\x9a\x60\xf2\xcc\x92\x6c\x67\x86\xc5\x03\x16\xb3\xe3\x15\x73\x6e\x53\x3c\xcf\xb1\xae\x5a\x43\x5f\xaf\xee\x85\xc2\xe7\x64\x9b\xaa\x78\xbe\xa1\x9d\x86\x76\x1a\xda\x69\x68\xa7\xa1\x9d\x1f\x9a\x76\xea\x5f\x28\x3c\x12\x10\xc4\x07\xe5\xb0\x76\xcd\x91\x40\xe6\xe3\x61\xae\xe5\x49\x48\x59\x5c\x7c\x2a\xad\x04\x55\x9d\xf4\xc0\xaa\x8e\x7a\x00\x69\xd9\xac\x24\x51\x9c\x5c\xfb\x9b\x27\x9a\xdb\x87\x8b\x9b\x90\x81\xef\x61\x85\x95\xf2\x9b\x23\xf1\x8d\x87\xe1\x23\xef\xb4\x64\x3e\xd9\xf6\x6b\x3f\x6e\x48\x8d\xa0\x02\x61\x8e\xfa\xa7\xfd\x8b\x7e\xed\xbb\xbc\xc6\xab\x38\x79\x38\x79\x1d\x8f\x2a\xdf\x54\xb2\xe1\x4b\x6e\xea\xfe\x25\x7c\x2b\x8d\x2a\x1b\x27\x6b\x9c\xec\x35\x39\x59\x89\xc3\xc4\x1b\xa5\x85\x64\x2a\xaf\x98\x4d\xe5\x45\x91\xfa\xae\xd5\xb4\xe0\x5e\x22\xa1\x6a\x5b\x17\xab\xc9\x98\x72\x4d\x3e\xfa\xd1\xde\x53\xfd\xab\xba\x5e\x93\x8a\xd3\xa4\xe2\xbc\xc4\xcb\xf3\xdb\x1d\xcb\xb9\x73\xb0\x2a\x10\x7c\x83\x5a\x0d\x6a\x35\xa8\xd5\xa0\x56\x3d\x6a\xed\x28\x41\x50\xc2\x4d\x21\xe5\x45\x5f\xdc\x2a\xe5\x65\x42\xc9\xb4\xf6\x1b\xe6\xc6\xd7\x22\xab\x85\xee\xfc\x20\xc9\xa7\x23\xc9\x86\xb4\x87\xef\x8a\x2e\xd5\xa7\x46\x3e\xdf\xde\xdb\x5f\xea\x1c\xc9\x8a\x6d\x81\x97\x30\xfc\x02\xb5\x37\x1e\xd0\x78\xc0\x6b\xd9\x81\x56\x6b\xf6\x5c\xda\x4e\xe8\x3f\x3e\x6d\x27\x75\xaa\xe3\x6a\xa7\xca\x3d\x48\x95\x76\xca\xd6\x7d\x77\xbb\xa6\xea\x6e\xce\x84\xdc\x99\x9f\x3c\xf1\x49\xd2\x4b\x1e\x00\xf9\xac\x7e\x52\xd1\xe8\x5b\x76\x96\x6a\xba\xd8\x91\x65\x57\x91\x42\x63\xe2\x8d\x89\x7f\x5f\x3e\xb8\x9c\x89\xef\xbe\x89\xcd\x8f\xe7\x7c\x29\x89\xb7\x52\x4a\xb3\x97\x17\x0b\xa1\x97\xfc\x12\x1d\xcb\x9f\x5e\x9f\x9a\xe9\xb8\x23\x93\x17\xf4\x73\x1b\x3e\x79\xe1\x44\x14\x35\x84\x8c\xc1\x8b\x28\xf2\x82\xa5\x4c\x80\xd1\x5b\x2e\xd5\x2d\x3e\x7f\xc2\x7d\x6b\x67\x99\x3a\xad\xad\x12\x75\xdc\xc2\x00\x0b\x11\x8d\xd5\xda\x32\xcf\xa6\x55\x9d\xf8\xd2\x5a\x97\xf7\xf2\x8b\xaa\xf7\xb0\x1c\x97\xd1\xf6\x39\x2e\xfd\xff\x3f\x3c\xbd\x3c\xea\x1f\xb9\xf6\x9e\xff\xfd\x12\x5d\xaa\x0c\xe9\x91\x79\x2e\x4f\xfd\x72\xa2\xc2\xe6\xf1\x96\x1f\x4f\xd4\xc5\x87\x03\x38\x1c\x0e\x8e\x4f\x4f\x0e\x2f\xc0\x31\xe3\xfe\xb4\xc4\xd1\x10\x54\x0e\xce\x96\x2f\x10\xbc\x9a\x4d\x38\xc5\x08\xaf\xe2\x58\x9e\xf7\xef\xe5\xef\x2a\xe8\xdf\xcd\x2b\x4c\xaf\x02\x5b\x8d\x2c\xc8\x06\x64\x1b\x90\x6d\x40\xb6\x01\xd9\xb7\x0d\xb2\xf5\x91\xf2\x13\xb7\x4c\x52\xc0\x3e\xae\x06\xec\xdc\xc2\xf2\xd1\x88\x9d\x25\x9b\x9e\x86\x2c\xde\x26\x24\x5e\xb3\x18\x85\x26\x69\xdd\x4c\x5a\xff\x4e\xdf\xe8\x7e\xbd\xb0\x56\x34\xb6\x1a\x74\xdb\xd8\x9b\x1e\x38\x19\xf5\xd4\x15\xce\xb8\x29\xdf\xa9\x06\x15\xbf\x5b\xe8\xf9\x1a\x90\xac\x2a\x00\x6d\x20\xad\x81\xb4\x06\xd2\x1a\x48\xdb\x36\xd0\xe3\x56\xc9\x2d\x18\x7c\x82\x17\x02\xad\xc8\x9c\xa6\xbe\x20\x3e\x62\xcf\xc8\x14\xc5\x37\x1a\xa6\xc4\x96\x3b\x0d\x17\x88\x8a\x84\xee\x39\x0e\x10\x65\xb1\x87\x03\x89\x49\xd2\x1d\x74\xfd\xa9\x37\xfb\x2a\x67\xdf\x7c\x5b\xa8\x03\x64\x32\x61\x88\x43\x01\x07\x1b\x3f\x5d\xb4\x75\x20\x34\x7e\x2f\xf2\xef\x18\x89\x15\x2f\xe6\x6a\x53\xb5\xf7\xe0\xa3\x5c\xe5\xf9\x24\x12\x6f\xd0\x64\x2b\x3d\xdd\x3e\x5f\xee\xf9\xd9\x6a\xcf\xef\xc0\xd8\x1e\xef\xf9\x24\xda\x1b\xdb\x63\xf1\xc1\xf9\xec\x26\xf7\x91\x77\xf6\x1e\x8b\x29\x57\x85\x7b\x12\x13\xcf\xc1\x6d\x5e\xc8\x38\x2f\x6f\x21\x1a\xe2\x17\xf1\xde\x9e\xf9\x81\x78\xbf\x03\x61\x07\x16\x56\x62\xfd\x27\x00\x00\xff\xff\x6b\x11\x12\x31\xb3\x9f\x00\x00")

func internalTemplatesPg_modelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPg_modelGotmpl,
		"internal/templates/pg_model.gotmpl",
	)
}

func internalTemplatesPg_modelGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPg_modelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pg_model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x30, 0x28, 0x95, 0x16, 0xd, 0x39, 0x73, 0xde, 0x4d, 0x1e, 0xf5, 0x82, 0xd9, 0xf7, 0x4c, 0x66, 0x49, 0x85, 0x31, 0x8a, 0xba, 0xa1, 0xe1, 0xe4, 0x17, 0x7d, 0xfc, 0x39, 0x50, 0xd, 0x66}}
	return a, nil
}

var _internalTemplatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdf\x6f\xdc\xb6\x0f\x7f\xb6\xfe\x0a\x7e\x8d\x02\x5f\x5f\x7a\xf0\xed\x39\x40\x06\x34\xbd\x5b\x97\xa1\xcb\x65\xd7\x1b\x86\x62\x18\x56\x45\xa6\x6d\x2d\xb6\xe4\x4a\x72\x2e\x07\xc3\xff\xfb\x40\xc9\xf6\xfd\x68\x53\xb4\x7b\xeb\x93\x2d\x8a\xfc\xf0\x43\x8a\xa2\xd8\x70\xf1\xc0\x0b\x84\xae\x7b\x91\xde\x85\xff\xbe\x67\x4c\xd6\x8d\x36\x0e\x12\x16\xc5\x85\x74\x65\x7b\x9f\x0a\x5d\x2f\xfe\xe1\xe2\x41\x2c\x9a\xe2\x29\x66\x33\xc6\x16\x0b\x78\xb3\xba\x5d\x6d\x5e\x6d\x57\x4b\xb8\x7e\x0f\x77\xeb\x37\xeb\x14\x96\x6b\xb8\x5d\x6f\x61\xb5\xbc\xd9\xa6\x5e\x67\x79\x0d\xd2\x82\x2b\x11\x84\xae\x6b\xad\x40\x2a\x87\x26\xe7\x02\x21\xd7\x06\x32\xee\xf8\x3d\xb7\x08\xba\x41\xc3\x9d\xd4\x8a\x94\xb9\x03\xc1\x15\xdc\x23\xb4\x16\x33\xd8\x49\x57\x12\x96\xdb\x37\x68\x21\x37\xba\x06\x2b\x4a\xac\x39\x7c\xe8\x3a\x48\xdf\xf9\xff\xf4\x96\xd7\x08\x7d\xff\x21\x85\x5b\xed\x30\xa0\xb8\x52\x5a\x90\x96\x8c\x79\x65\x35\x08\xdd\x48\xcc\x88\x83\x06\xe4\xa2\x04\x9d\x7b\x6e\x8e\xdf\x57\x08\x43\x36\x6c\xca\x16\x0b\x32\xd9\x92\xb5\x2d\x75\x5b\x65\xb0\xd3\xe6\xc1\x13\x99\x28\x2f\xec\xc7\x2a\x5d\x5e\x03\x57\xd9\xa9\x6c\xfb\x94\xb2\xae\x5b\x5c\xc0\x76\xbd\x5c\x5f\x82\xd0\xca\xca\x0c\x0d\xd4\xb2\xa0\x10\x55\x01\x3a\xcf\xa1\x29\x9e\xfe\x6f\x41\xb4\xd6\xe9\x1a\x1a\xa3\x1f\xbd\xce\xc5\xa2\xef\x59\xd7\x81\xcc\x01\x3f\x4e\xa1\xdd\x8d\xdb\x71\xa3\xad\x2b\x0c\xda\x18\xfa\x9e\x51\x3e\x7c\x82\xa7\x94\x76\x2c\x5a\x3d\xa1\x48\xac\x33\x52\x15\x73\x48\xd3\x74\xda\xec\xfa\x19\x24\x4d\xf1\x94\xbe\xd6\x75\xcd\x55\xb6\xe5\xc5\x1c\xd0\x18\x6d\x66\x2c\xfa\xad\x45\xb3\x7f\xde\xec\x82\xec\x36\x7a\x67\xcf\x2c\x36\x7a\xf7\xac\xd1\x68\xc3\x7c\x40\x58\x59\xfc\x8f\x9c\x29\xa7\x1b\xb4\x6d\xe5\xbe\x9e\xaf\xb7\xf9\x46\xbe\x83\xcd\xc0\x57\x65\x44\x97\xca\xe0\xad\x2e\x20\x6f\x95\xa0\xea\x4c\x61\xfd\x88\xc6\xc8\x0c\x43\x6d\xf9\x8a\xa0\x0a\xaa\x74\x51\xa0\xa1\x7a\xda\xeb\xd6\x80\x28\xb5\x14\xc8\x1e\xb9\xf1\xe6\x57\x1e\xe0\x59\xd7\x5d\x70\xf4\x5a\xab\x4c\x0e\x77\xa0\x35\xca\x02\x87\x4a\x5a\x47\xa0\xe2\xb0\x45\xc5\x4b\xda\xf6\x63\x05\xa2\xe2\xad\x45\xeb\x6b\xb0\xe1\x86\xd7\x96\x91\xa3\x23\xa4\x84\x2c\x2d\x79\x9c\x64\x21\xa5\x30\x92\x09\x76\xf0\xe7\x5f\x47\x94\x7c\xda\x86\xd4\xd1\x01\x51\x1c\xbb\x12\x0d\x92\x5e\x30\x0c\xc2\xc2\xe8\xb6\xb9\xdf\x9f\x8b\xb5\xc9\xd0\x7c\x2a\xae\x64\x2d\xdd\xb9\x90\x32\x28\x95\x63\x2c\xa2\x86\xf0\xf7\xdc\xc7\x0a\x97\x57\x60\xb8\x2a\x10\x02\xff\x8e\x45\x51\x08\x96\x76\x48\x96\xbe\xf6\xcb\x64\xc6\xa2\x48\xe6\x43\x26\xd2\x15\x51\x86\xff\x5d\x81\x92\x95\x37\x8a\x0c\x52\x2e\x29\x5b\x63\xa8\xf3\x13\x65\x16\x45\x3d\x8b\x22\xbb\x93\x4e\x94\xe3\xce\x96\xaa\xd4\xfb\xa4\xde\x14\xff\xf1\xf3\x6a\xb3\x8a\x2f\x09\x8e\x18\x1b\xcc\xcf\xf2\x45\x3b\x03\x7b\xef\xe3\x88\x7e\x00\xbc\x0b\x49\xf6\x8c\x22\xe9\xca\x97\x2f\xfd\x9f\x47\xba\x02\xde\x34\xa8\xb2\x84\x56\x73\x88\x5f\xc4\x2f\xad\x33\x42\xab\xc7\xf4\xc6\x69\x9e\x48\x57\xce\x66\x5e\x7d\x38\xaa\xc9\x60\x8c\xc7\x7f\xbd\x8a\x67\x32\x9c\xd4\xa4\x16\xd6\x73\xc8\x6b\x97\xbe\x6b\x8c\x54\x2e\x4f\x06\x5e\x3f\x69\x53\x73\x37\xf7\x21\xa5\x69\xea\xfd\x84\x98\xdf\x6c\xd6\xbf\xdf\xc1\xf5\xfb\xef\x27\xec\xa9\x16\x27\xc5\x51\xf2\x8d\xa1\xaf\x37\xcb\xd5\xe6\xbb\x0a\x7d\xba\x6f\x93\xe2\x28\xf9\xc6\xd0\xdf\xde\xfc\x7a\xb3\xfd\x7e\xe2\x1e\x1a\xca\xa4\x16\xd6\x5f\x1d\x73\x86\x39\x6f\x2b\x77\xf9\x5c\x9f\x20\x18\xdf\x24\xf2\x24\x6e\xd5\x83\xd2\x3b\x75\xe8\xc4\x7e\x1c\x89\x67\xa1\x7f\xf4\x8c\x45\x8b\x05\x34\xad\x03\x7c\x44\xb3\x77\x25\xbd\xf3\x4e\x17\xe8\x4a\x34\x43\x53\x6c\xdd\x51\xeb\x93\x39\x54\xa8\x86\xbb\x39\x83\x1f\xe1\x07\x9f\x33\x52\x3a\x1c\x62\xeb\xe6\x43\xf7\x01\x9f\x2a\xa9\x0a\x9b\xfe\xa2\xa5\x9a\xee\x74\x0c\xaf\x6e\x97\x10\x53\x38\xfd\x04\x3a\xd6\xfd\x17\x61\xc7\x0b\x7e\x8e\x7c\xb8\x34\xf1\xfc\x1c\x78\xac\xaa\x2f\x02\x8f\xd7\xe7\x1c\xf8\x50\x92\x9f\x02\x87\x83\xfb\x22\xac\x2f\xcd\x73\xcc\xf1\xc0\x0f\x88\x6c\x3a\xc9\x13\xdf\x1e\x02\xe2\xd9\xe1\x70\x95\xac\xd8\xd9\xbb\x7b\x98\x4a\xc2\x9c\xf2\x99\x0d\x62\x37\xbe\x3c\x70\x11\xfe\x46\x98\xf0\x3e\x59\x67\x5a\xe1\x06\x80\x63\x11\x99\xfa\x87\x05\x60\x2c\x82\x50\x94\xd3\xf2\xee\x33\x4f\x31\x8b\xc2\x9b\x16\x5e\xe3\xc1\xd5\x8d\xb2\x68\xc2\xd0\x3a\x0c\xca\xd2\x4b\xc6\xd9\x96\x26\x92\xe5\xf5\x34\xc3\x4a\x1a\x25\xe8\x9a\xa1\x92\xa8\x68\xf4\x1e\xc6\x19\x3f\x83\x5b\x59\x37\x15\x92\x72\x00\x39\x9a\xc5\x43\x14\x47\xde\x4e\xf2\x10\xe4\x49\x76\x0f\xcb\xeb\x19\x24\x1b\xbd\x9b\xc6\xad\x40\x73\xa3\x77\x47\x16\xbc\xaa\xf4\xce\xd2\x7c\x04\x4e\x43\xd3\x56\x15\x5d\x09\x3f\xd8\x97\x08\xb6\x41\x21\x73\x29\xa0\xd6\x19\x56\x34\xe6\x00\x87\x02\x15\x1a\x29\x60\xc7\xf7\x81\xca\x29\x62\xc7\xa2\x25\x0a\x9d\x61\xf2\x08\x27\x03\xd5\x98\xab\x7f\x03\x00\x00\xff\xff\x26\xc1\x17\x6f\xe0\x0c\x00\x00")

func internalTemplatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatesPogoGotmpl,
		"internal/templates/pogo.gotmpl",
	)
}

func internalTemplatesPogoGotmpl() (*asset, error) {
	bytes, err := internalTemplatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x79, 0x5c, 0xab, 0x62, 0xf7, 0x96, 0xbf, 0xd1, 0xd7, 0x95, 0x50, 0x64, 0x2d, 0x39, 0x8b, 0x52, 0xcc, 0x3c, 0x8a, 0xe, 0x3d, 0x6d, 0x9e, 0x21, 0x80, 0x6f, 0xa2, 0xb, 0xc8, 0x62, 0xa1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templates/pg_enum.gotmpl": internalTemplatesPg_enumGotmpl,

	"internal/templates/pg_model.gotmpl": internalTemplatesPg_modelGotmpl,

	"internal/templates/pogo.gotmpl": internalTemplatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"pg_enum.gotmpl":  &bintree{internalTemplatesPg_enumGotmpl, map[string]*bintree{}},
			"pg_model.gotmpl": &bintree{internalTemplatesPg_modelGotmpl, map[string]*bintree{}},
			"pogo.gotmpl":     &bintree{internalTemplatesPogoGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
