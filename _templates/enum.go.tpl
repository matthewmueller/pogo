{{ $model := modelname .Enum.Name }}
{{ $shortModel := shortname .Enum.Name }}
package {{ .Package }}

// GENERATED BY POGO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"

	"github.com/matthewmueller/pgx"
)

// {{ $model }} is the '{{ .Enum.Name }}' enum type from schema '{{ .Schema }}'.
type {{ $model }} uint16

const (
  {{ range .Enum.Values }}
	// {{ $model }}{{ classname .Label }} is the '{{ .Label }}' {{ $model }}.
	{{ $model }}{{ classname .Label }} = {{ $model }}({{ .Order }})
  {{ end }}
)

// String returns the string value of the {{ $model }}.
func ({{ $shortModel }} {{ $model }}) String() string {
	var enumVal string

	switch {{ $shortModel }} {
  {{ range .Enum.Values }}
  case {{ $model }}{{ classname .Label }}:
    enumVal = "{{ .Label }}"
  {{ end }}
	}

	return enumVal
}

// MarshalText marshals {{ $model }} into text.
func ({{ $shortModel }} {{ $model }}) MarshalText() ([]byte, error) {
	return []byte({{ $shortModel }}.String()), nil
}

// UnmarshalText unmarshals {{ $model }} from text.
func ({{ $shortModel }} *{{ $model }}) UnmarshalText(text []byte) error {
	switch string(text) {
  {{ range .Enum.Values }}
  case "{{ .Label }}":
    *{{ $shortModel }} = {{ $model }}{{ classname .Label }}
  {{ end }}
	default:
		return errors.New("invalid {{ $model }}")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for {{ $model }}.
func ({{ $shortModel }} {{ $model }}) Value() (driver.Value, error) {
	return {{ $shortModel }}.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for {{ $model }}.
func ({{ $shortModel }} *{{ $model }}) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid {{ $model }}")
	}

	return {{ $shortModel }}.UnmarshalText(buf)
}

// ScanPgx into PGX
func ({{ $shortModel }} *{{ $model }}) ScanPgx(vr *pgx.ValueReader) error {
	if vr.Len() == -1 {
		return nil
	}
	return {{ $shortModel }}.UnmarshalText(vr.ReadBytes(vr.Len()))
}
