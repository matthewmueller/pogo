{{/* Variables */}}
{{ $Fruit := .Enum.Name | pascal }}
{{ $fruit := .Enum.Name | camel }}

package enum

// GENERATED BY POGO. DO NOT EDIT.

{{/*************************************************************************/}}
{{/* Our enum type */}}
{{/*************************************************************************/}}

// {{$Fruit}} is the "{{$.Enum.Name}}" enum type from "{{$.Schema.Name}}".
type {{$Fruit}} string

{{/*************************************************************************/}}
{{/* Our enum type */}}
{{/*************************************************************************/}}

const (
  {{- range $val := $.Enum.Values }}
    {{ $Apple := $val.Label | pascal }}
    {{ $apple := $val.Label }}
    // {{$Fruit}}{{$Apple}} is the '{{$apple}}' {{$Fruit}}.
    {{$Fruit}}{{$Apple}} = {{$Fruit}}("{{$apple}}")
  {{- end }}
)

{{/*************************************************************************/}}
{{/* Satisfy the sql/driver.Valuer interface */}}
{{/*************************************************************************/}}

// Value satisfies the sql/driver.Valuer interface for {{$Fruit}}.
func ({{$fruit}} {{$Fruit}}) Value() (driver.Value, error) {
  return string({{$fruit}}), nil
}

{{/*************************************************************************/}}
{{/* Satisfy the pgtypes.EncodeBinary interface */}}
{{/*************************************************************************/}}

// EncodeBinary Satisfies the pgtypes.EncodeBinary interface for {{$Fruit}}.
func ({{$fruit}} {{$Fruit}}) EncodeBinary(_ *pgtype.ConnInfo, b []byte) ([]byte, error) {
  return append(b, []byte({{$fruit}})...), nil
}	