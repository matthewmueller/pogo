{{ $shortClass := shortname .Table.TableName }}
{{ $class := classname .Table.TableName }}
{{ $shortModel := shortname .Table.TableName $shortClass }}
{{ $model := modelname .Table.TableName }}
{{ $return := modelreturn .Table.TableName }}
package {{ .Package }}

import "github.com/matthewmueller/pgx"

// GENERATED BY POGO. DO NOT EDIT.

// FindOne {{ $model }} by a condition
func ({{ $shortClass }} *{{ $class }}) FindOne(condition string, params... interface{}) ({{ $return }} {{ $model }}, err error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT {{ fields .Columns }}
    FROM {{ schema .Schema .Table.TableName }}
    WHERE ` + condition

	DBLog(sqlstr, params...)
  row := {{ $shortClass }}.DB.QueryRow(sqlstr, params...)
  err = row.Scan({{ gofields $.Columns $return }})
  if err != nil {
    if err == pgx.ErrNoRows {
      return {{ $return }},  Err{{ $model }}NotFound
    }
    return {{ $return }}, err
  }

  return {{ $return }}, nil
}
