// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/enum.gotmpl
// templates/many.gotmpl
// templates/model.gotmpl
// templates/pogo.gotmpl

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnumGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x61\x6b\xdb\x30\x14\xfc\x3c\xfd\x8a\x23\x04\x6a\x87\x4c\xfe\x3e\xe8\x87\x76\xf1\x4a\x61\xc4\x63\x09\x85\x31\xc6\x90\x9d\xe7\x54\xcc\x96\x3d\xc9\x0e\x04\x4d\xff\x7d\xd8\x72\x16\x1b\x02\x65\xd0\x16\x9a\x4f\x41\xba\x77\xef\xde\xdd\x93\xad\x8d\x16\x78\x10\x5a\x8a\xb4\x20\x83\x45\xe4\x1c\xb3\x16\xf3\x4f\xba\x95\x0d\x3e\x5c\x83\xc7\xaa\x2d\xf9\x5a\x94\x84\x3f\xa8\x85\xc9\x44\x81\x01\x93\x5f\xc4\x64\xa2\xa4\x1e\xc2\x6a\x91\xfd\x12\x7b\x02\xa9\xb6\x64\x2c\x8a\x70\x17\xaf\xe3\xaf\x37\xdb\x78\x85\xdb\x6f\xf8\x92\xdc\x25\x1c\xab\x04\xeb\x64\x8b\x78\x75\xbf\xe5\x8c\x75\x6a\x9e\xeb\xe7\x27\x89\x16\x48\x5a\xdd\x4b\x40\x73\xac\x09\xff\xce\x9f\xb3\x4f\x37\x9c\xb5\xde\x34\xe7\x20\x0d\x9a\x47\xc2\xcc\xda\xf9\xd9\x1a\xe7\x66\x23\x19\xb9\xae\x4a\x0f\xd8\x64\x8f\x54\x8a\x13\x84\xb3\xfe\x7a\x44\x66\x1a\x2d\xd5\xfe\x0d\x7b\x93\x55\xca\x34\x08\x18\x60\xed\x7b\x68\xa1\xf6\x84\xf9\x41\x14\xdd\xe6\x0c\xfe\x3c\x88\xa2\x25\xd3\x2d\x0d\xd0\xc1\x30\xbf\xa9\xeb\x82\x7a\xc4\x41\x14\xfc\xb3\x48\xa9\x98\xec\xdf\x09\x27\x2e\xe0\x86\xeb\x49\x26\xd6\x7a\xca\x73\x3a\x57\xd6\xfa\x6a\xe7\xae\x46\x40\x3e\x50\x5f\x28\xbc\x1e\x1d\x07\xb3\x73\xf9\x2c\x1c\x66\x23\xb5\xeb\x9a\x87\x2f\x14\xd6\x46\x34\xd2\xe4\xc7\x5e\xbd\xf9\x5d\x44\x3b\x2d\x0f\xa4\xbd\x79\x1a\x52\x35\xa4\x73\x91\xbd\xe0\x8a\xf7\x9d\x60\x7a\x19\x92\xcc\x93\x42\xf2\x4a\x4f\x9c\xcd\x5b\x95\x21\xb0\xd6\x7f\x39\x9c\x1b\x5d\x86\x9e\x3c\x08\x11\x8c\xd9\x96\x20\xad\x2b\x1d\xc2\x32\x40\x53\xd3\x6a\x35\x3c\x88\x11\x4d\xb8\x84\x92\x05\x73\xaf\x60\x7b\xbd\xef\x1e\x8a\xe1\xb1\xca\xaa\x1d\xdd\x4a\x25\xf4\xf1\x35\x9c\x9f\xf4\xdb\x4c\x02\x78\x42\xd2\x7f\x65\x30\xe6\x08\x7e\x62\xe1\xb9\xf9\xc7\x4a\xa9\x7b\x95\x57\x4b\xa4\xf8\xfe\x23\x3d\x36\x14\x22\xf0\x7f\x2e\x05\x24\xea\x9a\xd4\x2e\x48\x97\x03\x78\x1c\x15\xe7\xfc\x14\xd7\xbb\xbf\x01\x00\x00\xff\xff\x3b\x56\x37\x75\x7c\x06\x00\x00")

func templatesEnumGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnumGotmpl,
		"templates/enum.gotmpl",
	)
}

func templatesEnumGotmpl() (*asset, error) {
	bytes, err := templatesEnumGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enum.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x80, 0x5c, 0xe4, 0x7a, 0x54, 0x28, 0x97, 0x98, 0x42, 0xcd, 0x72, 0xfd, 0x46, 0x3c, 0xf2, 0xe6, 0x53, 0xd4, 0x46, 0x73, 0x27, 0xa8, 0xec, 0xb0, 0xf, 0x14, 0x9c, 0xdb, 0xa, 0xca, 0xa2}}
	return a, nil
}

var _templatesManyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xdf\x6f\xdb\x38\xf2\x7f\xb6\xfe\x8a\xf9\x0a\xc5\xae\x9c\xb8\xf2\xf7\x5e\x7b\xf0\x43\x53\xab\xb9\x2c\x52\xa7\x8d\x9d\x2e\x0e\x45\x51\x33\xd2\xd8\xe6\x56\x22\x55\x92\x8a\x13\xa8\xfa\xdf\x0f\x43\x4a\xb2\xe4\xd8\xdd\x6c\x76\x17\x38\xe0\x9e\x22\x73\x7e\x70\x38\xf3\x99\xcf\x90\x29\xcb\xf1\x09\x7c\x64\x8a\xb3\xdb\x14\x35\x9c\x8c\xab\xca\x2b\x4b\x78\x71\xa3\x51\xc1\xab\x09\x84\x0b\x12\x84\xef\x64\x82\x29\xd4\xb2\xe2\x90\xec\x3b\x68\x2e\xd6\x45\xca\x14\x7c\x87\x98\x65\x7d\x75\xdd\xd1\x9f\xb1\x0c\xe1\x3b\xe4\x69\xa1\x58\xda\x55\xf6\x72\x16\x7f\x65\x6b\x84\xb2\xac\x8d\xbe\x43\x2a\xb7\xa8\x48\xc6\xb3\x5c\x2a\x03\x81\x07\xe0\xc7\x52\x18\xbc\x37\x3e\x7d\xa3\x88\x65\xc2\xc5\x7a\xfc\x9b\x96\xc2\xf7\x06\x3e\x2a\x25\x95\xa6\x2f\x6d\x14\x17\x6b\xfb\x69\x78\x86\xbe\xe7\x0d\xfc\x35\x37\x9b\xe2\x36\x8c\x65\x36\xfe\x8d\xc5\x5f\xe3\x71\xbe\xbe\xf7\xbd\xa1\xe7\x8d\xc7\x70\x1e\xcd\xa2\xeb\xd7\x8b\x68\x0a\x67\xff\x86\xf7\x57\xe7\x57\x21\x4c\xaf\x60\x76\xb5\x80\x68\x7a\xb1\x08\xad\x4e\xa4\x54\x59\xda\xec\x54\xd5\x4c\x9a\xb7\xb2\x10\x09\x28\x34\x85\x12\x98\x00\x5f\x81\xd9\x50\xfc\x9d\xa3\x56\x15\x70\x0d\x42\x1a\x58\x91\xb2\x77\xc7\xd4\x61\x2f\x13\x70\xa1\x87\x33\xdc\x06\xfe\xbe\x8f\xd6\x81\xef\x82\x6d\xed\x41\xa1\x2e\x52\x03\x09\x33\x0c\x56\x52\x81\x5f\x96\x2f\xc2\x79\xbc\xc1\x8c\xd5\xc6\x7e\x68\xd7\xba\xfe\x7c\xcf\x3c\xe4\xd8\xf1\xa2\x8d\x2a\x62\x03\xa5\x07\x50\x96\x2f\x41\x31\xb1\x46\x78\x11\xcb\xb4\x53\xb9\x37\x32\x2d\x32\xa1\xa9\x56\xa4\x45\xd2\xb6\x9a\x4c\xc7\x2c\xad\x2a\x28\x4b\xca\x82\x13\x49\x33\x2b\x52\x2a\x6d\xad\x7b\x2e\x17\x0f\x39\xd2\x4f\xc0\x54\x23\x54\xd5\xc9\x01\x89\x48\x9a\x0d\x5e\x36\x3f\x2a\x7b\xe4\x19\x6e\x81\x8b\xbc\x30\x70\x5b\xf0\x34\x41\xf5\x07\x8e\x1b\x7a\xab\x42\xc4\xe4\x22\x18\xc2\xc9\x85\xf5\x42\x67\x75\xa5\x83\x9f\xec\x4a\xd9\xec\xe4\xe4\xcf\xca\xa8\x33\x7d\x46\x36\xa1\x9b\xce\xa6\x27\xe0\xa4\x11\xb8\x0c\x1d\xca\x4c\x59\xfe\xae\x7f\x72\x12\x65\x8c\x3b\x71\xaf\x64\x8d\x18\xf7\xc5\x6d\x5b\x3a\xb0\x59\x73\xc2\x09\x1a\x6d\x41\x4e\x09\x40\xb7\xe8\xbb\xe4\x06\x75\xdf\x52\xd8\x36\x0d\xc3\x8e\x61\xb0\x53\x87\xbd\xa2\xf7\x0a\xd2\xfa\x08\x3b\x06\x13\xf8\x69\xf7\x6b\x57\xb5\x56\xd7\xa3\x33\xb4\x39\xa1\x88\xdf\x31\xa5\x37\x2c\xfd\x65\x7e\x35\x83\xcc\x7d\xef\xc2\x76\x46\x3e\x70\x61\x24\x90\xca\xd1\xf8\x3b\x6e\x82\x21\x04\x9f\x3e\xdf\x3e\x18\x1c\xb9\x46\x1d\x76\x01\x44\xec\x13\xd6\xda\x3b\x3f\xc3\x1a\x4f\x37\x22\xeb\xc4\x53\x88\x36\x22\x32\x03\x23\x81\x75\xe3\x3a\x1a\x4d\xcf\x4d\x60\xe1\xe9\x22\x1a\xba\x88\x1e\x05\xd4\x1a\x58\xe5\x11\xf4\x03\x3b\xb6\xcd\xdc\xf2\x66\x30\x04\x47\xa0\x5d\xaf\xdd\x28\x1b\x0f\xb1\xc3\xd9\x01\x47\x19\xcb\x3f\x39\x1f\x9f\xb9\x30\xa8\x56\x2c\xc6\xb2\xb2\xfe\x6a\x23\x02\x5c\xc6\xbe\x62\x70\x58\x75\xe8\xb9\xd6\x78\x5a\xff\xb4\x10\x3e\xd4\x49\x1e\x10\x2f\x1d\x44\xd7\xff\x4d\x40\xf0\xd4\x86\xd5\x06\xf6\xc9\xef\xf0\x5b\x55\xf9\x9f\x61\x42\xbd\xf8\xd8\xda\x03\xa8\xf7\x6f\xd0\xd7\x26\xab\x76\x55\x63\xe0\xd7\x0d\x2a\x7c\x93\xb2\x42\x23\x0d\x04\xd6\x70\x84\x91\xb0\x61\x22\x49\x11\xb6\xa4\x01\xb1\x55\xd1\x8e\x4d\xba\x46\x1d\x4e\x89\xa5\x48\xb8\xe1\x52\xd4\x25\xf2\x00\x72\xa6\x58\xa6\xe9\x04\x9f\xba\x19\xec\x6e\x0e\x3a\xc7\x98\xaf\x38\xba\x4e\x68\x9d\x68\x57\x47\xab\x13\xec\xbb\x1e\x35\x9e\xc3\x30\xec\x56\x06\x4e\xba\xb1\x75\xa9\xb4\xb3\xde\xa4\xb4\x76\xf9\x6a\xf7\x39\xb2\x12\xe7\xfa\xd5\xee\x73\x64\xd3\xe9\x62\x9e\x9e\x51\x9e\x5c\xa4\x59\x26\x05\xb4\xdb\x5b\x52\x26\x44\xdf\x32\x8d\x20\x73\x54\xcc\x9e\x03\xcc\x86\x19\x88\x99\x80\x5b\x84\x42\x63\x02\x5b\x6e\x36\xe4\x8b\x92\xa9\x61\xa5\x64\x06\xda\xf2\x38\x2c\xcb\x12\xba\x9c\x0e\x55\xb5\x0c\xbd\xf1\x98\xb4\x17\x1b\xae\x41\x6f\x64\x91\x26\xb0\x95\xea\xab\x75\xd3\x6e\x38\xd6\xdf\xd2\x70\x7a\x06\x4c\x24\xfd\xb5\xc5\x7d\xe8\xaa\x46\x91\xb7\xb1\x96\xde\x20\xba\xc7\x38\x68\xd2\xb9\x9f\xc7\x20\x5f\xdf\x87\x6f\x64\x96\x31\x91\x2c\xd8\xba\x21\x17\x6f\xf0\xa1\x40\xf5\x70\xdc\xec\x84\xec\xae\xe5\x56\xef\x59\x5c\xcb\xed\x51\xa3\xc6\xa6\xce\xb0\xbb\xb9\x51\x32\xdb\x7b\x80\x3b\x80\x13\x74\x00\x37\x3d\x83\xe9\x99\x07\x70\x29\xd7\x40\x60\x39\xb6\x43\x3b\x3f\x35\x2a\xd3\x67\x35\xc7\xb6\x4f\x1c\xa5\x8e\x9a\x32\x38\xb1\x91\x0c\x6b\x87\x41\x6c\xee\xa1\xbe\xfc\x85\x6f\xdc\xdf\x0e\xa9\xb9\x21\xd2\x90\x4f\x70\xd2\x1e\xaa\x47\xd8\xe3\x31\xac\xd1\x00\x4b\x53\x8b\x2d\x21\xc5\x4b\xea\xfe\x15\xc7\x34\xd1\xb6\xa8\xb9\xc2\x9c\x29\x24\x71\x66\xb3\x43\x7a\xdf\x28\xb7\x1e\xc0\x97\x78\x04\x5f\xf8\x08\xbe\xdc\x11\xd3\xe8\x94\xc7\xd4\x33\x7b\x0c\xe8\x42\x18\xc1\xff\x5b\x02\x1b\x8f\x41\x7f\x4b\x81\xbb\xa4\x58\x47\x23\xc8\x15\xcf\x98\x7a\x80\xaf\xf8\x00\xb9\x92\x77\x3c\xc1\x04\x6e\x1f\x40\xe3\xb7\x02\x45\x8c\x1e\x90\x91\x36\xf6\xa6\xbd\xf4\x00\x2e\x66\xf3\xe8\x7a\x01\x17\xb3\xc5\xd5\x13\xb3\x08\xc1\x12\x4e\xeb\x36\xd6\xe1\x2f\x92\x8b\x80\xa2\xf7\x47\xe0\x0f\xe1\x14\x96\x43\x0f\xe0\xe3\xeb\xcb\x9b\x68\x7e\x48\x93\xef\x69\x5e\x47\x8b\x9b\xeb\xd9\xc5\xec\x1c\x76\x1b\xcd\x3f\x5c\x5e\xdb\xae\xb7\x3c\x48\x51\xba\xe3\xa6\x72\xed\xce\x49\x9c\xbb\xc5\x9f\xef\x70\x77\x46\x46\xd2\x35\x2a\x47\xc8\x59\x48\x90\xea\x31\xb0\x5d\x0a\xdc\xe1\x29\xcf\x61\x18\x0e\x2d\x2d\x38\xdf\xaa\x10\xbd\x82\xd0\x7d\x7a\x37\x7a\x76\x40\x06\x50\x72\x6b\xe7\x4b\x38\x3d\x0b\x77\xad\xb1\xef\x97\xaf\x00\x49\x4d\xc9\x6d\x38\x8f\x99\x08\x76\xc7\x3b\x97\xb4\x50\x55\xc3\x7f\x02\xf6\x63\xac\xb9\x4e\xf0\x74\x04\xd8\x04\xd7\x10\x60\x1b\xcd\x88\x14\xea\x2b\x1a\x5f\xed\xe6\x56\x96\x4b\xcd\x0d\x36\x57\xaf\x38\xd7\xbd\xb1\xd6\x11\x8f\xc7\xf0\x96\x8b\xa4\xee\xa4\x9b\xba\x93\x6e\x1f\x80\x1b\x6d\xaf\x51\xb9\x0e\xa7\xa8\x63\xc5\x73\x62\xc0\xaa\x7a\xd4\x39\x64\x7e\xb4\x6f\xc8\xfc\x5c\xbe\xb7\xd4\x5b\x55\x3f\xec\x19\x42\xb0\xc6\x14\xe3\xe7\x23\x18\x60\x1e\x5d\x46\x6f\x16\x7d\x00\xcd\xad\x53\x5b\x30\x80\xb7\xd7\x57\xef\x0e\xa0\x3b\x7c\xcc\x10\xa4\xfd\xeb\xbf\xa2\xeb\xa8\x39\xc7\xfc\xc3\xa5\x9d\x3c\x7f\x1f\x14\xdb\x84\x7d\x64\x8a\xd2\xf5\xd7\x83\xf2\xc0\x0e\xcf\x82\xa7\x35\x9a\x4c\x80\xe8\x3e\x52\x6a\x26\x69\x4e\xd4\xb2\x3e\x78\x0f\xbd\x44\xad\x5a\xf5\x0c\x9c\x77\x2e\x41\x7f\x06\xf1\x37\x79\xc2\x0c\xfe\x09\xcc\x3b\x07\x4f\x44\xfd\x1f\x1e\x20\xf5\xa4\x78\x35\x79\x7c\xf3\x75\x96\x35\x26\x12\x29\x7e\x36\x50\xb8\xc3\x10\x38\x56\x52\x21\x5f\x0b\x6a\x18\xbd\xf7\x30\xcc\x75\x73\x9d\xb5\x20\x49\x30\x45\x83\x81\xdb\x69\x44\x79\x68\x70\x3f\xec\x3f\xff\xdc\x4e\x9d\x81\xe5\x26\x92\x3e\x32\xa8\x1a\x87\x75\x12\x66\x45\xd6\xee\xda\x9d\x54\x0d\x8a\x3b\xed\x7b\xf3\x7e\xfa\x7a\x11\x3d\x75\xf0\xcc\xa3\x85\x1d\x29\x16\x43\x3f\x18\x40\x30\x39\xa6\xb6\x3f\x7d\x7e\xd4\xec\xbf\x3b\x9b\x96\xcd\xd9\xd0\x14\xf9\x5e\x9f\xa6\x05\xda\x5a\xf6\x6e\xcd\x65\xf5\xe3\xfa\xd4\x66\x13\x60\x79\x8e\x22\x09\xdc\x6f\xca\x6b\xef\xd9\xe1\x3a\xb8\x53\xae\xe3\x96\xed\x38\xfa\xcb\x59\xcb\xed\xf0\xf7\x0c\xd1\x9e\xef\xff\x41\xa6\x9a\xda\x3e\x7d\x3a\x53\x85\x8f\xa8\xca\x79\x78\xf2\x80\xde\x3d\xf3\xf7\x5a\x35\x96\x42\x9b\xa6\x61\x9b\x71\x3b\x8d\x2e\xa3\x45\x74\x6c\xa8\x1e\xbc\x78\xff\xf7\x8d\xd5\xe6\x84\x7c\x05\x5f\x46\x0e\x61\x16\x8c\xee\x51\x75\xc4\xc7\xf3\x70\xf6\x34\x88\xed\xa3\xeb\x11\xa2\xa8\x34\x44\xb7\x54\x94\x3b\x54\x46\x83\x2c\x54\xfb\x1f\x0f\xfb\x0c\xd2\x32\x43\xb3\xe1\x62\xed\x38\xfb\x5b\x0a\x89\xe2\x77\xa8\xec\xe3\xb5\x10\x09\x2a\x6d\x98\x48\x1c\x5c\x7a\x8f\x8c\x23\xff\x54\x19\x81\x5c\xad\x34\x1a\x72\x3f\x84\x20\x86\x4f\x9f\x9b\x27\x1a\xef\x7c\xdf\xf5\x79\x8e\x06\xda\x40\x50\x4a\x6b\xeb\x53\xf8\x87\x37\xa0\x27\x4f\x2c\x53\xdb\xde\xb6\xa1\x2d\x09\x36\xfb\x97\xde\x60\x10\xef\x08\x2c\x1e\xc1\xd2\x5f\x9e\xc6\x32\x3d\x5d\xfa\xcb\xa1\x37\x18\xf0\x9d\x90\x58\xfc\x85\x7f\xaa\x8d\xa2\x54\x84\x17\x46\xb2\x40\x0c\x49\xe9\xae\x43\x81\x76\x23\x5a\x14\xa7\xa7\xde\xa0\xf2\x06\xcd\xff\x4f\x46\xc0\x47\x70\xe7\x55\xff\x09\x00\x00\xff\xff\xe2\x9f\x11\x49\xa5\x18\x00\x00")

func templatesManyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesManyGotmpl,
		"templates/many.gotmpl",
	)
}

func templatesManyGotmpl() (*asset, error) {
	bytes, err := templatesManyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/many.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x3, 0x99, 0x68, 0xef, 0xb, 0xf7, 0x53, 0x8e, 0x58, 0xc9, 0x7, 0x9e, 0x48, 0xc1, 0xa6, 0xe0, 0xe6, 0xbf, 0xa0, 0x1b, 0x1c, 0x59, 0xb5, 0xaf, 0x57, 0xf6, 0xd7, 0x3e, 0x5d, 0x3, 0xa3}}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x73\xdb\x38\xd2\x3e\x8b\xbf\xa2\x5f\x95\x2b\xa1\x6c\x85\x7a\xe7\x3a\x5b\x3e\xc4\x96\xe2\xf5\xac\x23\x25\x96\x9c\xd9\x2d\x57\x2a\x82\x49\x48\xe2\x98\x04\x18\x80\xb4\xad\xe2\xf0\xbf\x6f\xe1\x83\x24\x48\x91\x96\xfc\x95\xd9\x4c\xf9\x64\x8a\x68\x34\x1a\x8d\x7e\x1e\x34\x9a\x70\x9a\x0e\xf6\xe1\x0b\x62\x3e\xba\x0a\x30\x87\xfd\x41\x96\x59\x69\x0a\x7b\x09\xfc\x7a\x08\xce\x4c\xbc\x75\x3e\x52\x0f\x07\xf0\x27\xf0\x15\x65\x31\xfc\x09\x01\xbd\xc5\x0c\xb4\xe0\x05\xc7\xac\x41\x36\x42\xdc\x45\x41\x2e\x94\x34\x0b\xb9\x28\xc4\x15\x19\x6e\x08\x8d\x51\x88\x85\xa2\x20\x61\xa8\x22\x6c\x45\xc8\xbd\x46\x4b\x0c\x85\x66\xc3\x24\xcb\x0f\x23\x61\xa5\x6d\x01\x74\x5d\x4a\x62\x7c\x17\x77\xc5\x33\x26\x2e\xf5\x7c\xb2\x1c\xfc\xc1\x29\xe9\x5a\x9d\x2e\x66\x8c\x32\x2e\x9e\x78\xcc\x7c\xb2\x94\x8f\xb1\x1f\xe2\xae\x65\x75\xba\x4b\x3f\x5e\x25\x57\x8e\x4b\xc3\xc1\x1f\xc8\xbd\x76\x07\xd1\xf2\xae\x6b\xf5\x2c\x6b\x30\x80\x93\xd1\x78\x74\xfe\x7e\x36\x1a\xc2\xd1\x7f\xe0\xd3\xe4\x64\xe2\xc0\x70\x02\xe3\xc9\x0c\x46\xc3\xd3\x99\x23\x65\x46\x8c\xa5\xa9\x74\x4e\x96\x8d\x69\xfc\x81\x26\xc4\x03\x86\xe3\x84\x11\xec\x81\xbf\x80\x78\x25\x26\x60\xcc\x35\xcb\xc0\xe7\x40\x68\x0c\x0b\x21\x6c\xdd\x20\xd6\xac\xe5\x10\x94\xe9\xce\x18\xdf\xda\xdd\xba\x8e\x42\x41\x57\x19\x5b\xf4\x07\x86\x79\x12\xc4\xe0\xa1\x18\xc1\x82\x32\xe8\xa6\xe9\x9e\x33\x75\x57\x38\x44\xba\x73\xd7\x91\xef\x4c\x7d\x5d\x2b\x5e\x47\xd8\xd0\xc2\x63\x96\xb8\x31\xa4\x16\x40\x9a\xbe\x03\x86\xc8\x12\xc3\x9e\x4b\x03\x63\xe9\x8e\x69\x90\x84\x84\x8b\xf5\x10\x52\xa2\xb5\x58\x4e\x19\x17\x59\x26\x16\xcf\x5f\x80\x6a\xa2\xf1\x38\x09\xc4\xda\x6a\xd9\x13\x3a\x5b\x47\x58\xfc\x04\x1c\x70\x0c\x59\xb6\xdf\xd0\x42\xbc\x7c\x80\x77\xf9\x8f\x4c\x4e\x79\x8c\x6f\xc1\x27\x51\x12\xc3\x55\xe2\x07\x1e\x66\x0f\x98\xae\x63\x2d\x12\xe2\x0a\x15\x76\x0f\xf6\x4f\xa5\x16\x31\x57\xb5\x74\xf0\x46\xbe\x49\xf3\x91\x54\xfb\xa3\x3c\xaa\xba\x3e\xc2\x9b\x60\xba\x33\x07\x05\xec\xe7\x0d\xca\x43\x4d\x9e\x49\xd3\xad\xfa\x85\x92\x51\x88\x7c\xd5\x5c\x59\xb2\xbc\x19\xd7\x9b\x0b\x5c\xaa\x60\x93\xdd\x45\x9c\xe0\x98\xcb\x20\x17\x0e\xc0\xea\x65\x57\x39\xd7\x4e\x53\x89\x5b\x61\xb6\x74\x43\xcf\xe8\x68\x97\xe2\x50\x5b\xf4\xca\x82\x14\x3a\x1c\xa3\xc3\x21\xbc\x29\x7f\x95\xab\x56\xc8\x5a\x62\x0e\x85\x4f\x84\xc5\x1f\x11\xe3\x2b\x14\xfc\x36\x9d\x8c\x21\x54\xcf\xa5\xd9\xaa\x53\x17\x7c\x12\x53\x10\x22\xad\xf6\x1b\x6a\xec\x1e\xd8\x97\x5f\xaf\xd6\x31\xee\x2b\xa0\xf6\xcc\x00\x12\xec\xe3\x68\xe9\x52\x4f\x4f\xc7\xd3\x05\x09\x0d\x7b\x12\x52\x58\x24\xba\x41\x4c\x01\x99\x76\xb5\x5a\x53\x51\x63\xcb\xf0\x54\x16\xf5\x94\x45\x1b\x06\x15\x1d\xa4\x70\x1f\xaa\x86\xb5\x0d\x33\x95\xbc\x69\xf7\x40\x11\xa8\xa9\xd5\xb4\x32\xd7\xe0\xaa\x38\x6b\x50\x14\xa2\xe8\x52\xe9\xf8\xea\x93\x18\xb3\x05\x72\x71\x9a\x49\x7d\xba\x93\x08\xb8\x10\x5d\x63\xbb\x59\xb4\x67\x29\x68\xec\x86\x9f\x22\x84\x9b\x90\x64\x81\xe0\xa5\xc6\xe8\xfa\xbf\x43\x20\x7e\x20\xcd\x2a\x0c\xbb\xec\x1a\xfc\x96\x65\xdd\xaf\x70\x28\xb0\xb8\xd9\xdb\x02\xd0\xe3\xe7\xd1\x57\x38\x4b\xab\xd2\x31\xf0\xfb\x0a\x33\x7c\x1c\xa0\x84\x63\xb1\x21\xa0\x9c\x23\x62\x0a\x2b\x44\xbc\x00\xc3\xad\x90\x00\x57\x8a\x70\xc5\x26\x66\x27\x83\x53\x5c\x4a\x3c\x3f\xf6\x29\xd1\x4b\x64\x01\x44\x88\xa1\x90\x8b\x19\x5c\x9a\x1e\x34\x07\x07\x1e\x61\xd7\x5f\xf8\x58\x21\xa1\x50\xc2\xd5\x3a\x4a\x19\xbb\xae\xba\x9f\x6b\x76\x1c\xc7\x5c\x19\xd8\x37\x6d\x33\xa9\xd4\x78\x9f\xbb\x54\xab\xfc\xb5\x7c\xec\xcb\x16\xa5\xfa\xd7\xf2\xb1\x2f\xdd\xa9\x6c\x1e\x1e\x09\x3f\x29\x4b\xc3\x90\x12\x28\x86\x97\xa4\x2c\x22\xfa\x0a\x71\x0c\x34\xc2\x0c\xc9\x79\x40\xbc\x42\x31\xb8\x88\xc0\x15\x86\x84\x63\x0f\x6e\xfd\x78\x25\x74\x09\x67\x72\x58\x30\x1a\x02\x97\x3c\x0e\xf3\x34\x05\x93\xd3\x21\xcb\xe6\x8e\x35\x18\x08\xe9\xd9\xca\xe7\x22\x2b\x4a\x02\x0f\x6e\x29\xbb\x96\x6a\x8a\x01\x07\xfc\x7b\xe0\x0c\x8f\x00\x11\xaf\xfa\x6e\x76\xe7\xa8\x55\x13\x96\x17\xb6\xa6\x56\x67\x74\x87\x5d\x3b\x77\x67\xdd\x8f\x76\xb4\xbc\x73\x8e\x69\x18\x22\xe2\xcd\xd0\x32\x27\x17\xab\xf3\x39\xc1\x6c\xdd\xde\x6d\x5f\xf4\x3b\xa7\xb7\xbc\xd6\xe3\x9c\xde\xb6\x76\xca\xfb\x68\x0f\xab\x7c\x4d\x38\xb3\xc8\x03\xd4\x04\x54\x83\x11\x70\xc3\x23\x18\x1e\x59\x00\x67\x74\x09\x22\x58\xda\x46\x28\xf6\x4f\x8e\x59\x5c\x65\x35\xc5\xb6\x39\x05\xef\xb0\x9d\x2a\x7a\x0a\x61\x5f\x5a\xd3\xd3\x4a\x6d\x37\xbe\x03\x9d\x00\x3a\xc7\xea\xaf\x41\x6c\x6a\x23\xc9\x09\xc8\xde\x2f\x26\x56\x21\xed\xc1\x00\x96\x38\x06\x14\x04\xd2\x20\x42\xc9\x3b\xc1\x00\x39\x29\x89\x95\x8d\x18\x8e\x10\xc3\xa2\x3d\x94\x2e\x12\x82\xdf\x85\x83\x2d\x80\x6f\x6e\x1f\xbe\xf9\x7d\xf8\x76\x23\xe8\x86\x07\xbe\x2b\x80\x53\xa3\x41\x65\x43\x1f\xfe\x5f\xb2\xd8\x60\x00\xfc\x7b\x00\xbe\xf2\x8c\x54\xd4\x87\x88\xf9\x21\x62\x6b\xb8\xc6\x6b\x88\x18\xbd\xf1\x3d\xec\xc1\xd5\x1a\x38\xfe\x9e\x60\xe2\x62\x0b\x44\x27\x1e\xcb\x24\x7b\x2e\x21\x73\x3a\x9e\x8e\xce\x67\x70\x3a\x9e\x4d\x76\x74\x24\xd8\x73\x38\xd0\x68\xe6\xce\x6f\xd4\x27\xb6\xb0\xbf\xdb\x87\x6e\x0f\x0e\x60\xde\x93\x7a\xbf\xbc\x3f\xbb\x18\x4d\x9b\x64\xfd\x0d\xd9\xf3\xd1\xec\xe2\x7c\x7c\x3a\x3e\x81\x72\xb0\xe9\xe7\xb3\x73\x49\x00\x92\x12\xe7\x7a\xca\x01\x5d\xaa\xb9\x0a\xf2\xbd\xc5\x6f\x6f\x70\x39\x4f\x24\x5a\x97\x98\x29\x66\x0e\x1d\x11\x5b\x15\x2a\x96\xaf\x6c\xe5\x00\xe1\x6b\xc7\x71\x7a\x92\x1f\x2c\x00\x91\x45\x97\x1b\x4e\x19\xbe\x00\x8c\xde\xca\x5d\xc5\x19\x1e\x39\x25\x20\xea\x4a\xfc\x05\x60\x21\xc6\xe8\xad\x33\x75\x11\xb1\xcb\x99\x9c\x50\xf1\x22\xcb\x7a\xff\x00\x5c\x35\x48\x33\x1c\xf1\x83\x3e\xe0\xdc\x92\x9c\xf6\x0a\x6b\xfa\x42\x40\x27\x66\xfe\x22\xdf\xad\x3e\xa9\xa5\xfe\x17\x5e\xe7\x19\x57\x74\x6d\x6c\x66\x9b\xcd\xe5\x6e\x16\x5d\x37\xe5\x64\x1f\x7c\x22\x7c\x38\x2f\xe6\x3e\x17\x91\xe3\xc7\x6f\x79\x25\xac\x44\xbb\x56\x90\x65\xf3\x0d\x50\x09\x2d\xad\x90\x32\xf2\xb5\xe8\xda\x48\xd7\xee\x81\x95\x88\x71\x8e\x03\xec\x3e\x25\xc6\xa7\xa3\xb3\xd1\xf1\xac\x3c\x46\x4d\x3f\x9f\x4d\xa5\x4e\xb9\xc0\x00\x1f\xce\x27\x1f\x77\x65\x11\x21\xff\xfb\x3f\x47\xe7\x23\xd9\xa1\xf0\x44\x17\x0e\x61\xef\x97\x97\x89\x54\x23\x57\x7d\x6a\xbc\xd6\x54\x3d\x2a\x6a\x65\xa7\xc3\x43\x10\xdc\x3f\x62\x6c\x4c\xc5\xa6\xa1\xdb\xaa\x31\xdd\x74\x2c\x95\x62\xd9\x23\xc2\xdf\xc8\x88\xca\x0c\xce\xf7\xee\x8c\xa0\x3f\x25\x1e\xbe\xc3\xfa\x84\xf2\x4e\x18\x6a\x0b\xea\x15\x52\xce\x29\xbf\x20\xfe\xf7\x04\x83\x2d\x4e\xbe\xfa\x95\x46\x49\xaf\x67\x60\xe0\x68\x9d\xa6\xb2\xf9\x84\x7e\xc4\xf1\x8a\x7a\x59\x06\x0b\x85\x8d\xd2\xe1\x57\x6b\xd0\x52\x43\xcc\x5d\xe6\x47\x22\x5f\xc8\xb2\x46\x38\x34\x28\x6c\x45\x88\x12\xfb\x24\x73\x97\x1f\x8a\x8c\xbd\x67\x85\x86\x9e\xc9\xf4\xf3\x99\x4c\xde\x5e\x8a\xc2\x0b\x87\x7d\x41\x8c\x3f\x1d\x1c\x0d\xea\x30\x63\xdb\xf0\xa1\x61\xc4\xd8\x26\x4a\x18\xdb\x0d\x27\x0f\x02\x0a\x63\x3b\x40\xa5\x38\xbb\x1a\xa8\xd1\xf1\x3d\x21\x58\xc5\x33\x25\xb8\x1a\xd1\xa8\x4c\xa7\x1b\x03\x79\x42\x70\x73\xe0\xaa\x83\x86\x99\xc0\xbf\x74\xe4\xde\xcf\xe8\x0f\x0b\x5a\x15\xb2\x22\x4f\x91\xf3\x70\x4a\x27\x3c\x7b\xc0\xaa\x01\xd4\xd1\xe4\x19\xb2\x8f\x06\x75\x2f\xcc\xe8\xcf\x4a\xe9\x9d\x22\x26\xd5\x71\x52\x46\x65\x88\xc8\xda\x4c\xf3\xdf\x72\x15\x9a\x4b\xff\x06\x93\x2d\x01\xaa\x4f\x9c\x3b\x87\xe8\xe5\xd7\x96\x20\xd5\xc3\xf3\x2c\x13\xbe\x34\xc5\xd2\xcc\x7a\x0d\xe2\xe6\x20\x66\xf9\xd9\xb1\x1a\xb0\xdb\xa2\xb5\x4e\x9c\xd5\x5a\x1c\xd7\x2b\xa3\xcb\x22\x1e\x5e\x60\x26\x47\x72\x8e\x03\xca\xb1\x2d\xcf\x42\xe2\x38\x25\xdf\x8d\xf1\x5d\x6c\xf7\xb4\xa2\x76\x50\x55\x60\xc2\x77\xc7\xc9\x36\xa4\x34\x1a\xdf\x8a\x98\x1c\x33\xf7\x4c\x39\x17\x31\xe2\xf1\x10\x50\x14\x61\xe2\xd9\xa6\xf4\x1b\xa3\x10\xa7\xfa\xf8\x0b\x35\xb7\x11\x63\x76\x6f\xab\x83\x4b\xd1\x1a\x66\x4d\x21\x7d\x0a\xd1\x90\x7d\x1f\x04\x3a\x2d\x0a\x82\x2a\x5e\x1b\xa1\xf9\x3e\x08\x9a\x80\xf9\x37\x02\xe1\xb3\xe7\x37\x3b\x02\xeb\x15\x47\x3f\x27\x8e\x5e\xf6\x34\x7f\x11\x79\x28\xc6\x1b\x15\xb3\x5d\x4b\x3c\xf2\xe4\xcf\x6b\x47\xdc\x0d\x60\xab\x41\x1e\x78\xdc\x7f\x70\x71\x6d\xe1\xe3\xc0\x93\x95\xfd\x96\x92\x98\x06\x9e\x47\xc9\xdb\x18\x12\x35\xf1\x78\x85\x4d\x2e\x90\x21\x1f\xe0\x18\xdb\x4a\x5b\xbf\x36\xb5\x5c\x87\x51\xa5\x53\x65\x38\xde\x52\x9d\xcb\xd5\xfc\x62\x16\xe3\xf2\x72\x9e\xc1\x30\x17\x9f\x86\xef\x67\xa3\x5d\xdd\x3e\x1d\xcd\x64\xc5\x4c\xc7\x73\x6b\x8d\x4d\xb6\xcf\x7b\x70\xd8\x2e\xed\x6f\x48\x6f\x2d\x5d\x6c\x2d\xc4\xe5\x14\xc7\x71\x9c\x44\xc5\x6c\x6f\x50\x90\x60\xb9\x3e\x1a\x51\x95\x0f\x06\xa9\x51\x72\xc8\x8a\x82\xd9\xb3\x27\x25\xca\x08\x33\x1d\x19\x0c\x80\x25\xa4\x52\x66\x7d\x64\x9a\x5d\xd1\xfd\x33\x25\xd8\xbb\xd4\x4c\x54\x55\x84\x57\x68\xe3\xfe\x12\x88\x76\x5a\x33\x19\x3c\xbe\xd8\xf1\xe3\x78\xe1\x1a\xaf\x79\xf5\x43\xba\xb0\x44\x7f\xfe\xcb\xb2\x46\xae\x28\x89\xa2\xf2\xb9\xfc\x91\xac\xa1\x27\x3f\x4e\xc2\x62\xd4\x97\xe3\x91\x7b\x2a\xf5\x26\x81\xdc\x53\xa4\x87\x5c\x66\xde\x52\xde\x29\x05\x1e\xc4\x20\x55\x6c\xe6\x2c\x52\xa5\x8f\xec\xfe\x95\xd2\xdd\x0a\xee\x51\xbf\x85\x87\x2b\xbb\xa2\xda\xd0\x8d\x85\x6b\xef\xf9\xca\x50\x7f\x4d\x51\xb7\x60\x1f\x55\x0c\x10\xa9\xd4\xc3\x12\x96\xed\x35\x02\x43\xff\xae\x55\x82\x76\x56\x7a\xca\xb9\x65\x67\xc2\x68\xfd\x08\x18\x60\x62\x9b\x07\xea\xde\xcf\xc4\x1f\x0d\x65\x0a\x21\xf7\xc2\x2c\xd2\x06\xf8\x86\xba\xc4\xff\x0c\x37\xe4\xf3\xda\x56\x5b\xd9\x20\x80\xd7\xd3\xe0\xeb\x69\xb0\x3c\x0d\x0e\x65\x3e\x53\x3b\x0d\xca\xdb\x2b\xbb\xdf\x9f\x80\x58\xfc\xda\xe0\x54\xa5\xfa\xc1\x9f\x7c\xcb\xfb\x65\xed\x9c\x35\x1c\x9d\x8d\x66\xa3\x87\xd4\x60\xda\x8f\x37\x2f\xf3\xf5\xa9\xfe\x55\xb6\x86\x5a\x7f\x01\xdf\xfa\x0a\x12\x12\xb3\xea\xde\xce\x66\xf7\xc7\xed\xc6\xbb\x6d\xc4\xf5\x3d\xf8\x91\x07\x03\xb5\xcc\x4d\x07\x03\x95\x2b\xf3\xc6\x2b\x87\xf5\x30\x79\xca\xa7\xd0\x8d\x88\x51\x03\x3f\x6b\xe0\x6c\x24\xb6\x73\x0b\xe0\x87\x7d\xb6\xdc\x16\x2e\x95\x4e\x7f\x69\xcc\x14\x01\xa1\x72\x35\xbd\x12\xcd\x9f\x6e\x04\xc3\x6c\x4b\xcc\x0c\x65\xbb\x7f\xbe\xd9\x08\x88\xa7\x54\x82\x1f\x1d\x32\x4d\x9f\x5c\x5e\x20\x66\xda\x3e\xba\xdc\x1b\x33\xf5\x4e\x6d\x17\x90\x9a\xd7\xfb\x09\x7b\x92\xcc\xe5\xe5\xc5\xb4\xfa\x15\xe9\xc6\xc2\xa2\xd3\x90\xa9\xff\x0d\xee\xe6\x35\x30\xd3\x0b\xdc\xb6\xd3\x59\xf3\x7c\xc7\x0b\x77\xb9\xf8\x64\x0c\xc7\x93\xf1\x87\xb3\xd3\xe3\x19\xd8\xb5\x62\x68\x2e\x33\x9c\x80\x3e\x37\xe4\x07\x82\x6d\x87\x01\x18\xfd\xfb\xf8\xec\x62\x38\x1a\x3a\x6d\xc2\x85\x40\xcd\x9e\x1d\x53\xfe\x17\xbb\x00\x58\xdb\xba\x7f\x82\xfb\x80\x8f\x28\xee\x09\x50\xdd\x53\xdc\xeb\x16\xf3\x6c\xaa\xf5\xb7\x74\x7e\x05\xe9\x0f\x02\x69\x99\x9c\x94\x45\xc3\x57\xa4\xfe\x68\xa4\xbe\x79\xa3\x9e\x9b\xd2\xac\xa7\xd4\xbe\x64\xcc\x0a\x1c\xdd\x60\x16\x73\xa0\x09\x2b\xa2\x5f\x5e\x74\xe7\x34\xc4\xf1\xca\x27\x4b\x55\x34\x12\xf9\x2f\xf3\x6f\x30\x93\xff\x9e\x90\x10\x0f\x33\x1e\x23\xe2\x29\xdc\x56\x00\xd0\xf2\x6f\x33\x7d\xa0\x8b\x05\xc7\xb1\x50\xdf\x03\xdb\x85\xcb\xaf\xf9\x25\x7c\xdf\x78\xbe\xa9\x56\x52\x04\x5c\x3b\x44\xf8\x4b\xf7\x3e\x80\x5f\xac\x8e\x80\xa3\x4b\x03\x59\x87\x90\xbe\x94\x64\x94\x8f\x9f\x5a\x9d\x8e\x5b\x1e\xb1\xdd\x3e\xcc\xbb\xf3\x03\x97\x06\x07\xf3\xee\xbc\x67\x75\x3a\x7e\xd9\x28\x60\xb0\xd7\x3d\xe0\x31\x13\xae\x70\x4e\x63\x8a\x6c\xd2\x13\x42\x37\x46\x39\x46\x0e\x24\x5e\x92\x83\x03\xab\x93\x59\x9d\xfc\x3f\x64\xfa\xe0\xf7\xe1\xc6\xca\xfe\x1b\x00\x00\xff\xff\x68\xb5\x58\x71\xaf\x3a\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x4a, 0x44, 0x3f, 0xb2, 0xc7, 0x8d, 0xbe, 0x78, 0xe4, 0x73, 0x49, 0x8b, 0x5a, 0x3e, 0x44, 0xbc, 0xc7, 0x4b, 0x9e, 0x5e, 0x94, 0x44, 0xef, 0x10, 0x99, 0xec, 0xa8, 0xe7, 0x47, 0x71, 0xce}}
	return a, nil
}

var _templatesPogoGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x51\x6f\xe2\x38\x10\x7e\x8e\x7f\xc5\x08\xa1\x0a\x10\x67\xde\x91\xfa\x70\x14\x54\x9d\xc4\x41\xaf\xc7\xe9\xb4\x4f\x5b\xe3\x18\x27\xdb\xc4\x93\xb5\x9d\x42\xe5\xf5\x7f\x5f\xd9\x4e\x68\xa9\xb6\x55\xf7\x05\x2c\xfb\xfb\x66\xbe\x99\x6f\x26\x0d\xe3\x8f\x4c\x0a\x70\x6e\x48\xef\xd2\xd9\x7b\x42\xca\xba\x41\x6d\x61\x44\xb2\x81\x2c\x6d\xd1\xee\x29\xc7\x7a\xf6\x8d\xf1\x47\x3e\x6b\xe4\x69\x40\x48\xe6\xdc\x1f\xa0\x99\x92\x02\x86\x96\xed\x2b\x01\xf3\x6b\x18\xd2\x7f\x79\x21\x6a\x46\x77\xe1\xc6\x80\xf7\x01\x97\xde\xe9\xdf\x98\x8b\x0a\x7e\x00\x67\x75\xfc\xaf\xf0\x28\xb4\xf7\x30\x70\x0e\xfa\x7c\x1f\x41\xc7\xe0\xfd\x20\xe5\x15\x2a\x0f\xb1\xc7\x84\xcc\x66\x70\xbb\xda\xac\xee\xff\xdc\xad\x96\xb0\xf8\x02\x77\xdb\xdb\x2d\x85\xe5\x16\x36\xdb\x1d\xac\x96\x7f\xed\x68\xc4\x2c\x17\x50\x1a\xb0\x85\x00\x8e\x75\x8d\x0a\x4a\x65\x85\x3e\x30\x2e\xe0\x80\x1a\x72\x66\xd9\x9e\x19\x01\xd8\x08\xcd\x6c\x89\x2a\x80\x99\x05\xce\x14\xec\x05\xb4\x46\xe4\x70\x2c\x6d\x11\x62\xd9\xe7\x46\x18\x38\x68\xac\xc1\xc4\x6a\xe1\xc1\x39\xe8\x2b\xdf\xb0\x5a\x80\xf7\x0f\x14\x36\x68\x45\x8a\x62\x8b\xd2\x84\xfc\x81\xcd\x2a\x83\xc0\xb1\x29\x45\x1e\x44\x20\x08\xc6\x0b\xc0\x43\x14\x97\x1a\xd9\x79\x62\x28\x99\xcd\x02\x65\x17\xe8\xa6\xc0\xb6\xca\xe1\x88\xfa\x31\x2a\x39\x6b\x9e\x99\xef\x15\x5d\x2e\x80\xa9\xfc\xf2\x6e\x77\xa2\x24\x68\x8d\xc5\x9f\xcb\x75\x24\x5b\x9d\x04\x1f\x19\xab\x4b\x25\xa7\x40\x29\x3d\x3f\x3a\x3f\x86\x51\x23\x4f\xf4\x06\xeb\x9a\xa9\x7c\xc7\xe4\x14\x84\xd6\xa8\xc7\x24\xfb\xa7\x15\xfa\xf9\x7d\xda\x24\xf0\xee\xf1\x68\xde\x30\xee\xf1\xf8\x2e\xa9\xe7\x10\x1f\x4d\xc2\xc6\xc6\x36\x31\x68\x74\xf9\xc4\xac\x00\x63\x75\xcb\x6d\xb4\xa8\xc0\x2a\x2f\x95\x04\x6c\x75\x00\x06\x8b\xba\xf2\x22\xad\x43\x3a\x92\xad\x51\xc2\xa1\x55\x7c\x54\xa1\x84\x3e\xf3\xd3\xdb\xdc\x5d\xca\x6d\x8c\x14\xf1\xe1\xd0\x45\x7c\x75\x3b\x9a\x84\xf0\x69\xd0\x36\xe2\x08\x37\x55\x29\x94\x4d\x0e\xb0\xaa\x8a\xae\xd5\x61\x5a\x0d\x18\x61\xdb\x86\x92\xc0\x0a\xd0\x51\xbe\x87\xe5\x62\xda\x8b\x0d\x02\x52\xdc\x31\x4c\xba\x28\x8e\x64\x4f\x4c\xa7\x02\xc2\x0f\xc9\x42\xa5\x5f\xa7\x80\x61\x99\xd2\x72\xf5\x74\x47\xb2\x0c\x47\x57\x49\x4d\xe6\x09\xc9\xb4\xb0\xad\x56\x70\x95\x82\x85\xf7\xcf\xae\x64\x04\x0e\xff\x33\x42\x47\xc4\xe5\xce\x35\xcc\x70\x56\xbd\xc2\xb5\xbf\xc6\x5d\xec\x66\x0f\xef\xa2\x7a\x3f\x87\x2b\xe7\x22\xd5\xfb\x44\x09\x02\xb3\xe5\x62\x0e\x90\xef\xa7\xe1\xbc\x46\x39\x8f\x65\xd3\x35\xca\x70\xe3\xa7\x5d\xca\x6e\xbd\x33\xdf\xb9\xf4\x7f\x69\x8b\x35\x4a\x29\x7a\xeb\xbb\x2e\xbf\xdc\x47\xb3\xa3\x5f\xb5\xf9\xc0\xf5\x71\x6f\xad\x3b\xb7\x2f\x92\xa2\x03\xc9\xe9\xd4\xe8\x4e\x15\x5c\x43\x85\xf2\x45\x48\xe7\x1b\x47\x65\x59\xa9\x4c\x9c\x80\x30\x90\x69\x02\xd2\xf0\x74\x98\x97\x81\xfc\xfc\x87\xf2\x53\xa6\xfc\x9e\x27\xaf\x2c\x81\xc9\x1b\x47\x2e\xbe\xa5\x9e\xfc\x0c\x00\x00\xff\xff\xed\xe0\x9c\x32\x0b\x06\x00\x00")

func templatesPogoGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPogoGotmpl,
		"templates/pogo.gotmpl",
	)
}

func templatesPogoGotmpl() (*asset, error) {
	bytes, err := templatesPogoGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pogo.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xbc, 0xf6, 0x6a, 0xc3, 0xf2, 0xa2, 0x88, 0x18, 0x63, 0x3d, 0x3d, 0x73, 0x3, 0xd5, 0xa8, 0x72, 0x56, 0x10, 0x37, 0x62, 0xad, 0xb, 0x9b, 0x42, 0x34, 0x16, 0x4c, 0xf7, 0x26, 0x0, 0xac}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enum.gotmpl": templatesEnumGotmpl,

	"templates/many.gotmpl": templatesManyGotmpl,

	"templates/model.gotmpl": templatesModelGotmpl,

	"templates/pogo.gotmpl": templatesPogoGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enum.gotmpl":  &bintree{templatesEnumGotmpl, map[string]*bintree{}},
		"many.gotmpl":  &bintree{templatesManyGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"pogo.gotmpl":  &bintree{templatesPogoGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
